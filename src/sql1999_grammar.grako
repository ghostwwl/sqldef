# The MIT License (MIT)
# Copyright (c) 2016, Victor M. Uriarte
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

sql_terminal_character =
    sql_language_character
    ;

sql_language_character =
  | simple_latin_letter
  | digit
  | sql_special_character
    ;

simple_latin_letter =
  | simple_latin_upper_case_letter
  | simple_latin_lower_case_letter
    ;

simple_latin_upper_case_letter =
  | 'A'
  | 'B'
  | 'C'
  | 'D'
  | 'E'
  | 'F'
  | 'G'
  | 'H'
  | 'I'
  | 'J'
  | 'K'
  | 'L'
  | 'M'
  | 'N'
  | 'O'
  | 'P'
  | 'Q'
  | 'R'
  | 'S'
  | 'T'
  | 'U'
  | 'V'
  | 'W'
  | 'X'
  | 'Y'
  | 'Z'
    ;

simple_latin_lower_case_letter =
  | 'a'
  | 'b'
  | 'c'
  | 'd'
  | 'e'
  | 'f'
  | 'g'
  | 'h'
  | 'i'
  | 'j'
  | 'k'
  | 'l'
  | 'm'
  | 'n'
  | 'o'
  | 'p'
  | 'q'
  | 'r'
  | 's'
  | 't'
  | 'u'
  | 'v'
  | 'w'
  | 'x'
  | 'y'
  | 'z'
    ;

digit =
  | '0'
  | '1'
  | '2'
  | '3'
  | '4'
  | '5'
  | '6'
  | '7'
  | '8'
  | '9'
    ;

sql_special_character =
  | space
  | double_quote
  | percent
  | ampersand
  | quote
  | left_paren
  | right_paren
  | asterisk
  | plus_sign
  | comma
  | minus_sign
  | period
  | solidus
  | colon
  | semicolon
  | less_than_operator
  | equals_operator
  | greater_than_operator
  | question_mark
  | left_bracket
  | right_bracket
  | circumflex
  | underscore
  | vertical_bar
  | left_brace
  | right_brace
    ;

space =
    '#SEE_THE_SYNTAX_RULES'
    ;

double_quote =
    '"'
    ;

percent =
    '%'
    ;

ampersand =
    '&'
    ;

quote =
    "'"
    ;

left_paren =
    '('
    ;

right_paren =
    ')'
    ;

asterisk =
    '*'
    ;

plus_sign =
    '+'
    ;

comma =
    ','
    ;

minus_sign =
    '-'
    ;

period =
    '.'
    ;

solidus =
    '/'
    ;

colon =
    ':'
    ;

semicolon =
    ';'
    ;

less_than_operator =
    '<'
    ;

equals_operator =
    '='
    ;

greater_than_operator =
    '>'
    ;

question_mark =
    '?'
    ;

left_bracket_or_trigraph =
  | left_bracket
  | left_bracket_trigraph
    ;

right_bracket_or_trigraph =
  | right_bracket
  | right_bracket_trigraph
    ;

left_bracket =
    '['
    ;

left_bracket_trigraph =
    '??('
    ;

right_bracket =
    ']'
    ;

right_bracket_trigraph =
    '??)'
    ;

circumflex =
    '^'
    ;

underscore =
    '_'
    ;

vertical_bar =
    '|'
    ;

left_brace =
    '{'
    ;

right_brace =
    '}'
    ;

token =
  | nondelimiter_token
  | delimiter_token
    ;

nondelimiter_token =
  | regular_identifier
  | key_word
  | unsigned_numeric_literal
  | national_character_string_literal
  | bit_string_literal
  | hex_string_literal
  | large_object_length_token
  | multiplier
    ;

regular_identifier =
    identifier_body
    ;

identifier_body =
    identifier_start [{underscore | identifier_part}+]
    ;

identifier_start =
  | initial_alphabetic_character
  | ideographic_character
    ;

identifier_part =
  | alphabetic_character
  | ideographic_character
  | decimal_digit_character
  | identifier_combining_character
  | underscore
  | alternate_underscore
  | extender_character
  | identifier_ignorable_character
  | connector_character
    ;

initial_alphabetic_character =
    '#SEE_THE_SYNTAX_RULES'
    ;

ideographic_character =
    '#SEE_THE_SYNTAX_RULES'
    ;

alphabetic_character =
    '#SEE_THE_SYNTAX_RULES'
    ;

decimal_digit_character =
    '#SEE_THE_SYNTAX_RULES'
    ;

identifier_combining_character =
    '#SEE_THE_SYNTAX_RULES'
    ;

alternate_underscore =
    '#SEE_THE_SYNTAX_RULES'
    ;

extender_character =
    '#SEE_THE_SYNTAX_RULES'
    ;

identifier_ignorable_character =
    '#SEE_THE_SYNTAX_RULES'
    ;

connector_character =
    '#SEE_THE_SYNTAX_RULES'
    ;

large_object_length_token =
    {digit}+ multiplier
    ;

multiplier =
  | 'K'
  | 'M'
  | 'G'
    ;

delimited_identifier =
    double_quote delimited_identifier_body double_quote
    ;

delimited_identifier_body =
    {delimited_identifier_part}+
    ;

delimited_identifier_part =
  | nondoublequote_character
  | doublequote_symbol
    ;

nondoublequote_character =
    '#SEE_THE_SYNTAX_RULES'
    ;

doublequote_symbol =
    '""'
    ;

delimiter_token =
  | character_string_literal
  | date_string
  | time_string
  | timestamp_string
  | interval_string
  | delimited_identifier
  | sql_special_character
  | not_equals_operator
  | greater_than_or_equals_operator
  | less_than_or_equals_operator
  | concatenation_operator
  | right_arrow
  | left_bracket_trigraph
  | right_bracket_trigraph
  | double_colon
    ;

not_equals_operator =
    '<>'
    ;

greater_than_or_equals_operator =
    '>='
    ;

less_than_or_equals_operator =
    '<='
    ;

concatenation_operator =
    '||'
    ;

right_arrow =
    '->'
    ;

double_colon =
    '::'
    ;

separator =
    {comment | white_space}+
    ;

white_space =
    '#SEE_THE_SYNTAX_RULES'
    ;

comment =
  | simple_comment
  | bracketed_comment
    ;

simple_comment =
    simple_comment_introducer [{comment_character}+] newline
    ;

simple_comment_introducer =
    minus_sign minus_sign [{minus_sign}+]
    ;

bracketed_comment =
    bracketed_comment_introducer bracketed_comment_contents bracketed_comment_terminator
    ;

bracketed_comment_introducer =
    '/*'
    ;

bracketed_comment_terminator =
    '*/'
    ;

bracketed_comment_contents =
    [{comment_character | separator}+] '#SEE_THE_SYNTAX_RULES'
    ;

comment_character =
  | nonquote_character
  | quote
    ;

newline =
    '#SEE_THE_SYNTAX_RULES'
    ;

key_word =
  | reserved_word
  | non_reserved_word
    ;

non_reserved_word =
  | 'ABS'
  | 'ADA'
  | 'ASENSITIVE'
  | 'ASSIGNMENT'
  | 'ASYMMETRIC'
  | 'ATOMIC'
  | 'AVG'
  | 'BETWEEN'
  | 'BIT_LENGTH'
  | 'BITVAR'
  | 'C'
  | 'CALLED'
  | 'CARDINALITY'
  | 'CATALOG_NAME'
  | 'CHAIN'
  | 'CHAR_LENGTH'
  | 'CHARACTER_LENGTH'
  | 'CHARACTER_SET_CATALOG'
  | 'CHARACTER_SET_NAME'
  | 'CHARACTER_SET_SCHEMA'
  | 'CHECKED'
  | 'CLASS_ORIGIN'
  | 'COALESCE'
  | 'COBOL'
  | 'COLLATION_CATALOG'
  | 'COLLATION_NAME'
  | 'COLLATION_SCHEMA'
  | 'COLUMN_NAME'
  | 'COMMAND_FUNCTION'
  | 'COMMAND_FUNCTION_CODE'
  | 'COMMITTED'
  | 'CONDITION_NUMBER'
  | 'CONNECTION_NAME'
  | 'CONSTRAINT_CATALOG'
  | 'CONSTRAINT_NAME'
  | 'CONSTRAINT_SCHEMA'
  | 'CONTAINS'
  | 'CONVERT'
  | 'COUNT'
  | 'CURSOR_NAME'
  | 'DATETIME_INTERVAL_CODE'
  | 'DATETIME_INTERVAL_PRECISION'
  | 'DEFINED'
  | 'DEFINER'
  | 'DISPATCH'
  | 'DYNAMIC_FUNCTION'
  | 'DYNAMIC_FUNCTION_CODE'
  | 'EXISTING'
  | 'EXISTS'
  | 'EXTRACT'
  | 'FINAL'
  | 'FORTRAN'
  | 'G'
  | 'GENERATED'
  | 'GRANTED'
  | 'HIERARCHY'
  | 'HOLD'
  | 'IMPLEMENTATION'
  | 'INFIX'
  | 'INSENSITIVE'
  | 'INSTANCE'
  | 'INSTANTIABLE'
  | 'INVOKER'
  | 'K'
  | 'KEY_MEMBER'
  | 'KEY_TYPE'
  | 'LENGTH'
  | 'LOWER'
  | 'M'
  | 'MAX'
  | 'MIN'
  | 'MESSAGE_LENGTH'
  | 'MESSAGE_OCTET_LENGTH'
  | 'MESSAGE_TEXT'
  | 'METHOD'
  | 'MOD'
  | 'MORE'
  | 'MUMPS'
  | 'NAME'
  | 'NULLABLE'
  | 'NUMBER'
  | 'NULLIF'
  | 'OCTET_LENGTH'
  | 'OPTIONS'
  | 'OVERLAPS'
  | 'OVERLAY'
  | 'OVERRIDING'
  | 'PASCAL'
  | 'PARAMETER_MODE'
  | 'PARAMETER_NAME'
  | 'PARAMETER_ORDINAL_POSITION'
  | 'PARAMETER_SPECIFIC_CATALOG'
  | 'PARAMETER_SPECIFIC_NAME'
  | 'PARAMETER_SPECIFIC_SCHEMA'
  | 'PLI'
  | 'POSITION'
  | 'REPEATABLE'
  | 'RETURNED_LENGTH'
  | 'RETURNED_OCTET_LENGTH'
  | 'RETURNED_SQLSTATE'
  | 'ROUTINE_CATALOG'
  | 'ROUTINE_NAME'
  | 'ROUTINE_SCHEMA'
  | 'ROW_COUNT'
  | 'SCALE'
  | 'SCHEMA_NAME'
  | 'SECURITY'
  | 'SELF'
  | 'SENSITIVE'
  | 'SERIALIZABLE'
  | 'SERVER_NAME'
  | 'SIMPLE'
  | 'SOURCE'
  | 'SPECIFIC_NAME'
  | 'SIMILAR'
  | 'SUBLIST'
  | 'SUBSTRING'
  | 'SUM'
  | 'STYLE'
  | 'SUBCLASS_ORIGIN'
  | 'SYMMETRIC'
  | 'SYSTEM'
  | 'TABLE_NAME'
  | 'TRANSACTIONS_COMMITTED'
  | 'TRANSACTIONS_ROLLED_BACK'
  | 'TRANSACTION_ACTIVE'
  | 'TRANSFORM'
  | 'TRANSFORMS'
  | 'TRANSLATE'
  | 'TRIGGER_CATALOG'
  | 'TRIGGER_SCHEMA'
  | 'TRIGGER_NAME'
  | 'TRIM'
  | 'TYPE'
  | 'UNCOMMITTED'
  | 'UNNAMED'
  | 'UPPER'
  | 'USER_DEFINED_TYPE_CATALOG'
  | 'USER_DEFINED_TYPE_NAME'
  | 'USER_DEFINED_TYPE_SCHEMA'
    ;

reserved_word =
  | 'ABSOLUTE'
  | 'ACTION'
  | 'ADD'
  | 'ADMIN'
  | 'AFTER'
  | 'AGGREGATE'
  | 'ALIAS'
  | 'ALL'
  | 'ALLOCATE'
  | 'ALTER'
  | 'AND'
  | 'ANY'
  | 'ARE'
  | 'ARRAY'
  | 'AS'
  | 'ASC'
  | 'ASSERTION'
  | 'AT'
  | 'AUTHORIZATION'
  | 'BEFORE'
  | 'BEGIN'
  | 'BINARY'
  | 'BIT'
  | 'BLOB'
  | 'BOOLEAN'
  | 'BOTH'
  | 'BREADTH'
  | 'BY'
  | 'CALL'
  | 'CASCADE'
  | 'CASCADED'
  | 'CASE'
  | 'CAST'
  | 'CATALOG'
  | 'CHAR'
  | 'CHARACTER'
  | 'CHECK'
  | 'CLASS'
  | 'CLOB'
  | 'CLOSE'
  | 'COLLATE'
  | 'COLLATION'
  | 'COLUMN'
  | 'COMMIT'
  | 'COMPLETION'
  | 'CONNECT'
  | 'CONNECTION'
  | 'CONSTRAINT'
  | 'CONSTRAINTS'
  | 'CONSTRUCTOR'
  | 'CONTINUE'
  | 'CORRESPONDING'
  | 'CREATE'
  | 'CROSS'
  | 'CUBE'
  | 'CURRENT'
  | 'CURRENT_DATE'
  | 'CURRENT_PATH'
  | 'CURRENT_ROLE'
  | 'CURRENT_TIME'
  | 'CURRENT_TIMESTAMP'
  | 'CURRENT_USER'
  | 'CURSOR'
  | 'CYCLE'
  | 'DATA'
  | 'DATE'
  | 'DAY'
  | 'DEALLOCATE'
  | 'DEC'
  | 'DECIMAL'
  | 'DECLARE'
  | 'DEFAULT'
  | 'DEFERRABLE'
  | 'DEFERRED'
  | 'DELETE'
  | 'DEPTH'
  | 'DEREF'
  | 'DESC'
  | 'DESCRIBE'
  | 'DESCRIPTOR'
  | 'DESTROY'
  | 'DESTRUCTOR'
  | 'DETERMINISTIC'
  | 'DICTIONARY'
  | 'DIAGNOSTICS'
  | 'DISCONNECT'
  | 'DISTINCT'
  | 'DOMAIN'
  | 'DOUBLE'
  | 'DROP'
  | 'DYNAMIC'
  | 'EACH'
  | 'ELSE'
  | 'END'
  | 'END-EXEC'
  | 'EQUALS'
  | 'ESCAPE'
  | 'EVERY'
  | 'EXCEPT'
  | 'EXCEPTION'
  | 'EXEC'
  | 'EXECUTE'
  | 'EXTERNAL'
  | 'FALSE'
  | 'FETCH'
  | 'FIRST'
  | 'FLOAT'
  | 'FOR'
  | 'FOREIGN'
  | 'FOUND'
  | 'FROM'
  | 'FREE'
  | 'FULL'
  | 'FUNCTION'
  | 'GENERAL'
  | 'GET'
  | 'GLOBAL'
  | 'GO'
  | 'GOTO'
  | 'GRANT'
  | 'GROUP'
  | 'GROUPING'
  | 'HAVING'
  | 'HOST'
  | 'HOUR'
  | 'IDENTITY'
  | 'IGNORE'
  | 'IMMEDIATE'
  | 'IN'
  | 'INDICATOR'
  | 'INITIALIZE'
  | 'INITIALLY'
  | 'INNER'
  | 'INOUT'
  | 'INPUT'
  | 'INSERT'
  | 'INT'
  | 'INTEGER'
  | 'INTERSECT'
  | 'INTERVAL'
  | 'INTO'
  | 'IS'
  | 'ISOLATION'
  | 'ITERATE'
  | 'JOIN'
  | 'KEY'
  | 'LANGUAGE'
  | 'LARGE'
  | 'LAST'
  | 'LATERAL'
  | 'LEADING'
  | 'LEFT'
  | 'LESS'
  | 'LEVEL'
  | 'LIKE'
  | 'LIMIT'
  | 'LOCAL'
  | 'LOCALTIME'
  | 'LOCALTIMESTAMP'
  | 'LOCATOR'
  | 'MAP'
  | 'MATCH'
  | 'MINUTE'
  | 'MODIFIES'
  | 'MODIFY'
  | 'MODULE'
  | 'MONTH'
  | 'NAMES'
  | 'NATIONAL'
  | 'NATURAL'
  | 'NCHAR'
  | 'NCLOB'
  | 'NEW'
  | 'NEXT'
  | 'NO'
  | 'NONE'
  | 'NOT'
  | 'NULL'
  | 'NUMERIC'
  | 'OBJECT'
  | 'OF'
  | 'OFF'
  | 'OLD'
  | 'ON'
  | 'ONLY'
  | 'OPEN'
  | 'OPERATION'
  | 'OPTION'
  | 'OR'
  | 'ORDER'
  | 'ORDINALITY'
  | 'OUT'
  | 'OUTER'
  | 'OUTPUT'
  | 'PAD'
  | 'PARAMETER'
  | 'PARAMETERS'
  | 'PARTIAL'
  | 'PATH'
  | 'POSTFIX'
  | 'PRECISION'
  | 'PREFIX'
  | 'PREORDER'
  | 'PREPARE'
  | 'PRESERVE'
  | 'PRIMARY'
  | 'PRIOR'
  | 'PRIVILEGES'
  | 'PROCEDURE'
  | 'PUBLIC'
  | 'READ'
  | 'READS'
  | 'REAL'
  | 'RECURSIVE'
  | 'REF'
  | 'REFERENCES'
  | 'REFERENCING'
  | 'RELATIVE'
  | 'RESTRICT'
  | 'RESULT'
  | 'RETURN'
  | 'RETURNS'
  | 'REVOKE'
  | 'RIGHT'
  | 'ROLE'
  | 'ROLLBACK'
  | 'ROLLUP'
  | 'ROUTINE'
  | 'ROW'
  | 'ROWS'
  | 'SAVEPOINT'
  | 'SCHEMA'
  | 'SCROLL'
  | 'SCOPE'
  | 'SEARCH'
  | 'SECOND'
  | 'SECTION'
  | 'SELECT'
  | 'SEQUENCE'
  | 'SESSION'
  | 'SESSION_USER'
  | 'SET'
  | 'SETS'
  | 'SIZE'
  | 'SMALLINT'
  | 'SOME'| 'SPACE'
  | 'SPECIFIC'
  | 'SPECIFICTYPE'
  | 'SQL'
  | 'SQLEXCEPTION'
  | 'SQLSTATE'
  | 'SQLWARNING'
  | 'START'
  | 'STATE'
  | 'STATEMENT'
  | 'STATIC'
  | 'STRUCTURE'
  | 'SYSTEM_USER'
  | 'TABLE'
  | 'TEMPORARY'
  | 'TERMINATE'
  | 'THAN'
  | 'THEN'
  | 'TIME'
  | 'TIMESTAMP'
  | 'TIMEZONE_HOUR'
  | 'TIMEZONE_MINUTE'
  | 'TO'
  | 'TRAILING'
  | 'TRANSACTION'
  | 'TRANSLATION'
  | 'TREAT'
  | 'TRIGGER'
  | 'TRUE'
  | 'UNDER'
  | 'UNION'
  | 'UNIQUE'
  | 'UNKNOWN'
  | 'UNNEST'
  | 'UPDATE'
  | 'USAGE'
  | 'USER'
  | 'USING'
  | 'VALUE'
  | 'VALUES'
  | 'VARCHAR'
  | 'VARIABLE'
  | 'VARYING'
  | 'VIEW'
  | 'WHEN'
  | 'WHENEVER'
  | 'WHERE'
  | 'WITH'
  | 'WITHOUT'
  | 'WORK'
  | 'WRITE'
  | 'YEAR'
  | 'ZONE'
    ;

literal =
  | signed_numeric_literal
  | general_literal
    ;

unsigned_literal =
  | unsigned_numeric_literal
  | general_literal
    ;

general_literal =
  | character_string_literal
  | national_character_string_literal
  | bit_string_literal
  | hex_string_literal
  | binary_string_literal
  | datetime_literal
  | interval_literal
  | boolean_literal
    ;

character_string_literal =
    [introducer character_set_specification] quote [{character_representation}+] quote [{separator quote [{character_representation}+] quote}+]
    ;

introducer =
    underscore
    ;

character_representation =
  | nonquote_character
  | quote_symbol
    ;

nonquote_character =
    '#SEE_THE_SYNTAX_RULES'.
    ;

quote_symbol =
    quote quote
    ;

national_character_string_literal =
    'N' quote [{character_representation}+] quote [{separator quote [{character_representation}+] quote}+]
    ;

bit_string_literal =
    'B' quote [{bit}+] quote [{separator quote [{bit}+] quote}+]
    ;

hex_string_literal =
    'X' quote [{hexit}+] quote [{separator quote [{hexit}+] quote}+]
    ;

binary_string_literal =
    'X' quote [{hexit hexit}+] quote [{separator quote [{hexit hexit}+] quote}+]
    ;

bit =
  | '0'
  | '1'
    ;

hexit =
  | digit
  | 'A'
  | 'B'
  | 'C'
  | 'D'
  | 'E'
  | 'F'
  | 'a'
  | 'b'
  | 'c'
  | 'd'
  | 'e'
  | 'f'
    ;

signed_numeric_literal =
    [sign] unsigned_numeric_literal
    ;

unsigned_numeric_literal =
  | exact_numeric_literal
  | approximate_numeric_literal
    ;

exact_numeric_literal =
  | unsigned_integer [period [unsigned_integer]]
  | period unsigned_integer
    ;

sign =
  | plus_sign
  | minus_sign
    ;

approximate_numeric_literal =
    mantissa 'E' exponent
    ;

mantissa =
    exact_numeric_literal
    ;

exponent =
    signed_integer
    ;

signed_integer =
    [sign] unsigned_integer
    ;

unsigned_integer =
    {digit}+
    ;

datetime_literal =
  | date_literal
  | time_literal
  | timestamp_literal
    ;

date_literal =
    'DATE' date_string
    ;

time_literal =
    'TIME' time_string
    ;

timestamp_literal =
    'TIMESTAMP' timestamp_string
    ;

date_string =
    quote unquoted_date_string quote
    ;

time_string =
    quote unquoted_time_string quote
    ;

timestamp_string =
    quote unquoted_timestamp_string quote
    ;

time_zone_interval =
    sign hours_value colon minutes_value
    ;

date_value =
    years_value minus_sign months_value minus_sign days_value
    ;

time_value =
    hours_value colon minutes_value colon seconds_value
    ;

interval_literal =
    'INTERVAL' [sign] interval_string interval_qualifier
    ;

interval_string =
    quote unquoted_interval_string quote
    ;

unquoted_date_string =
    date_value
    ;

unquoted_time_string =
    time_value [time_zone_interval]
    ;

unquoted_timestamp_string =
    unquoted_date_string space unquoted_time_string
    ;

unquoted_interval_string =
    [sign] (year_month_literal | day_time_literal)
    ;

year_month_literal =
  | years_value
  | [years_value minus_sign] months_value
    ;

day_time_literal =
  | day_time_interval
  | time_interval
    ;

day_time_interval =
    days_value [space hours_value [colon minutes_value [colon seconds_value]]]
    ;

time_interval =
  | hours_value [colon minutes_value [colon seconds_value]]
  | minutes_value [colon seconds_value]
  | seconds_value
    ;

years_value =
    datetime_value
    ;

months_value =
    datetime_value
    ;

days_value =
    datetime_value
    ;

hours_value =
    datetime_value
    ;

minutes_value =
    datetime_value
    ;

seconds_value =
    seconds_integer_value [period [seconds_fraction]]
    ;

seconds_integer_value =
    unsigned_integer
    ;

seconds_fraction =
    unsigned_integer
    ;

datetime_value =
    unsigned_integer
    ;

boolean_literal =
  | 'TRUE'
  | 'FALSE'
  | 'UNKNOWN'
    ;

identifier =
    actual_identifier
    ;

actual_identifier =
  | regular_identifier
  | delimited_identifier
    ;

sql_language_identifier =
    sql_language_identifier_start [{underscore | sql_language_identifier_part}+]
    ;

sql_language_identifier_start =
    simple_latin_letter
    ;

sql_language_identifier_part =
  | simple_latin_letter
  | digit
    ;

authorization_identifier =
  | role_name
  | user_identifier
    ;

table_name =
    local_or_schema_qualified_name
    ;

domain_name =
    schema_qualified_name
    ;

schema_name =
    [catalog_name period] unqualified_schema_name
    ;

unqualified_schema_name =
    identifier
    ;

catalog_name =
    identifier
    ;

schema_qualified_name =
    [schema_name period] qualified_identifier
    ;

local_or_schema_qualified_name =
    [local_or_schema_qualifier period] qualified_identifier
    ;

local_or_schema_qualifier =
  | schema_name
  | 'MODULE'
    ;

qualified_identifier =
    identifier
    ;

column_name =
    identifier
    ;

correlation_name =
    identifier
    ;

query_name =
    identifier
    ;

sql_client_module_name =
    identifier
    ;

procedure_name =
    identifier
    ;

schema_qualified_routine_name =
    schema_qualified_name
    ;

method_name =
    identifier
    ;

specific_name =
    schema_qualified_name
    ;

cursor_name =
    local_qualified_name
    ;

local_qualified_name =
    [local_qualifier period] qualified_identifier
    ;

local_qualifier =
    'MODULE'
    ;

host_parameter_name =
    colon identifier
    ;

sql_parameter_name =
    identifier
    ;

constraint_name =
    schema_qualified_name
    ;

external_routine_name =
  | identifier
  | character_string_literal
    ;

trigger_name =
    schema_qualified_name
    ;

collation_name =
    schema_qualified_name
    ;

character_set_name =
    [schema_name period] sql_language_identifier
    ;

translation_name =
    schema_qualified_name
    ;

form_of_use_conversion_name =
    schema_qualified_name
    ;

user_defined_type_name =
    schema_qualified_type_name
    ;

schema_qualified_type_name =
    [schema_name period] qualified_identifier
    ;

attribute_name =
    identifier
    ;

field_name =
    identifier
    ;

savepoint_name =
    identifier
    ;

role_name =
    identifier
    ;

user_identifier =
    identifier
    ;

connection_name =
    simple_value_specification
    ;

sql_server_name =
    simple_value_specification
    ;

connection_user_name =
    simple_value_specification
    ;

data_type =
  | predefined_type
  | row_type
  | user_defined_type
  | reference_type
  | collection_type
    ;

predefined_type =
  | character_string_type ['CHARACTER' 'SET' character_set_specification]
  | national_character_string_type
  | binary_large_object_string_type
  | bit_string_type
  | numeric_type
  | boolean_type
  | datetime_type
  | interval_type
    ;

character_string_type =
  | 'CHARACTER' [left_paren length right_paren]
  | 'CHAR' [left_paren length right_paren]
  | 'CHARACTER' 'VARYING' left_paren length right_paren
  | 'CHAR' 'VARYING' left_paren length right_paren
  | 'VARCHAR' left_paren length right_paren
  | 'CHARACTER' 'LARGE' 'OBJECT' [left_paren large_object_length right_paren]
  | 'CHAR' 'LARGE' 'OBJECT' [left_paren large_object_length right_paren]
  | 'CLOB' [left_paren large_object_length right_paren]
    ;

national_character_string_type =
  | 'NATIONAL' 'CHARACTER' [left_paren length right_paren]
  | 'NATIONAL' 'CHAR' [left_paren length right_paren]
  | 'NCHAR' [left_paren length right_paren]
  | 'NATIONAL' 'CHARACTER' 'VARYING' left_paren length right_paren
  | 'NATIONAL' 'CHAR' 'VARYING' left_paren length right_paren
  | 'NCHAR' 'VARYING' left_paren length right_paren
  | 'NATIONAL' 'CHARACTER' 'LARGE' 'OBJECT' [left_paren large_object_length right_paren]
  | 'NCHAR' 'LARGE' 'OBJECT' [left_paren large_object_length right_paren]
  | 'NCLOB' [left_paren large_object_length right_paren]
    ;

binary_large_object_string_type =
  | 'BINARY' 'LARGE' 'OBJECT' [left_paren large_object_length right_paren]
  | 'BLOB' [left_paren large_object_length right_paren]
    ;

bit_string_type =
  | 'BIT' [left_paren length right_paren]
  | 'BIT' 'VARYING' left_paren length right_paren
    ;

numeric_type =
  | exact_numeric_type
  | approximate_numeric_type
    ;

exact_numeric_type =
  | 'NUMERIC' [left_paren precision [comma scale] right_paren]
  | 'DECIMAL' [left_paren precision [comma scale] right_paren]
  | 'DEC' [left_paren precision [comma scale] right_paren]
  | 'INTEGER'
  | 'INT'
  | 'SMALLINT'
    ;

approximate_numeric_type =
  | 'FLOAT' [left_paren precision right_paren]
  | 'REAL'
  | 'DOUBLE' 'PRECISION'
    ;

length =
    unsigned_integer
    ;

large_object_length =
  | unsigned_integer [multiplier]
  | large_object_length_token
    ;

precision =
    unsigned_integer
    ;

scale =
    unsigned_integer
    ;

boolean_type =
    'BOOLEAN'
    ;

datetime_type =
  | 'DATE'
  | 'TIME' [left_paren time_precision right_paren] [with_or_without_time_zone]
  | 'TIMESTAMP' [left_paren timestamp_precision right_paren] [with_or_without_time_zone]
    ;

with_or_without_time_zone =
  | 'WITH' 'TIME' 'ZONE'
  | 'WITHOUT' 'TIME' 'ZONE'
    ;

time_precision =
    time_fractional_seconds_precision
    ;

timestamp_precision =
    time_fractional_seconds_precision
    ;

time_fractional_seconds_precision =
    unsigned_integer
    ;

interval_type =
    'INTERVAL' interval_qualifier
    ;

row_type =
    'ROW' row_type_body
    ;

row_type_body =
    left_paren field_definition [{comma field_definition}+] right_paren
    ;

reference_type =
    'REF' left_paren referenced_type right_paren [scope_clause]
    ;

scope_clause =
    'SCOPE' table_name
    ;

referenced_type =
    user_defined_type
    ;

user_defined_type =
    user_defined_type_name
    ;

collection_type =
    data_type array_specification
    ;

array_specification =
    collection_type_constructor left_bracket_or_trigraph unsigned_integer right_bracket_or_trigraph
    ;

collection_type_constructor =
    'ARRAY'
    ;

field_definition =
    field_name data_type [reference_scope_check] [collate_clause]
    ;

value_specification =
  | literal
  | general_value_specification
    ;

unsigned_value_specification =
  | unsigned_literal
  | general_value_specification
    ;

general_value_specification =
  | host_parameter_specification
  | sql_parameter_reference
  | 'CURRENT_PATH'
  | 'CURRENT_ROLE'
  | 'CURRENT_USER'
  | 'SESSION_USER'
  | 'SYSTEM_USER'
  | 'USER'
  | 'VALUE'
    ;

simple_value_specification =
  | literal
  | host_parameter_name
  | sql_parameter_reference
    ;

target_specification =
  | host_parameter_specification
  | sql_parameter_reference
  | column_reference
    ;

simple_target_specification =
  | host_parameter_specification
  | sql_parameter_reference
  | column_reference
    ;

host_parameter_specification =
    host_parameter_name [indicator_parameter]
    ;

indicator_parameter =
    ['INDICATOR'] host_parameter_name
    ;

contextually_typed_value_specification =
  | implicitly_typed_value_specification
  | default_specification
    ;

implicitly_typed_value_specification =
  | null_specification
  | empty_specification
    ;

null_specification =
    'NULL'
    ;

empty_specification =
    'ARRAY' left_bracket_or_trigraph right_bracket_or_trigraph
    ;

default_specification =
    'DEFAULT'
    ;

identifier_chain =
    identifier [{period identifier}+]
    ;

basic_identifier_chain =
    identifier_chain
    ;

column_reference =
  | basic_identifier_chain
  | 'MODULE' period qualified_identifier period column_name
    ;

sql_parameter_reference =
    basic_identifier_chain
    ;

field_reference =
    value_expression_primary period field_name
    ;

attribute_or_method_reference =
    value_expression_primary dereference_operator qualified_identifier [sql_argument_list]
    ;

dereference_operator =
    right_arrow
    ;

method_reference =
    value_expression_primary dereference_operator method_name sql_argument_list
    ;

method_invocation =
  | direct_invocation
  | generalized_invocation
    ;

direct_invocation =
    value_expression_primary period method_name [sql_argument_list]
    ;

generalized_invocation =
    left_paren value_expression_primary 'AS' data_type right_paren period method_name [sql_argument_list]
    ;

method_selection =
    routine_invocation
    ;

static_method_invocation =
    user_defined_type double_colon method_name [sql_argument_list]
    ;

static_method_selection =
    routine_invocation
    ;

element_reference =
    array_value_expression left_bracket_or_trigraph numeric_value_expression right_bracket_or_trigraph
    ;

dereference_operation =
    reference_value_expression dereference_operator attribute_name
    ;

reference_resolution =
    'DEREF' left_paren reference_value_expression right_paren
    ;

set_function_specification =
  | 'COUNT' left_paren asterisk right_paren
  | general_set_function
  | grouping_operation
    ;

general_set_function =
    set_function_type left_paren [set_quantifier] value_expression right_paren
    ;

set_function_type =
    computational_operation
    ;

computational_operation =
  | 'AVG'
  | 'MAX'
  | 'MIN'
  | 'SUM'
  | 'EVERY'
  | 'ANY'
  | 'SOME'
  | 'COUNT'
    ;

grouping_operation =
    'GROUPING' left_paren column_reference right_paren
    ;

set_quantifier =
  | 'DISTINCT'
  | 'ALL'
    ;

numeric_value_function =
  | position_expression
  | extract_expression
  | length_expression
  | cardinality_expression
  | absolute_value_expression
  | modulus_expression
    ;

position_expression =
  | string_position_expression
  | blob_position_expression
    ;

string_position_expression =
    'POSITION' left_paren string_value_expression 'IN' string_value_expression right_paren
    ;

blob_position_expression =
    'POSITION' left_paren blob_value_expression 'IN' blob_value_expression right_paren
    ;

length_expression =
  | char_length_expression
  | octet_length_expression
  | bit_length_expression
    ;

char_length_expression =
    ('CHAR_LENGTH' | 'CHARACTER_LENGTH') left_paren string_value_expression right_paren
    ;

octet_length_expression =
    'OCTET_LENGTH' left_paren string_value_expression right_paren
    ;

bit_length_expression =
    'BIT_LENGTH' left_paren string_value_expression right_paren
    ;

extract_expression =
    'EXTRACT' left_paren extract_field 'FROM' extract_source right_paren
    ;

extract_field =
  | primary_datetime_field
  | time_zone_field
    ;

time_zone_field =
  | 'TIMEZONE_HOUR'
  | 'TIMEZONE_MINUTE'
    ;

extract_source =
  | datetime_value_expression
  | interval_value_expression
    ;

cardinality_expression =
    'CARDINALITY' left_paren collection_value_expression right_paren
    ;

absolute_value_expression =
    'ABS' left_paren numeric_value_expression right_paren
    ;

modulus_expression =
    'MOD' left_paren numeric_value_expression_dividend comma numeric_value_expression_divisor right_paren
    ;

numeric_value_expression_dividend =
    numeric_value_expression
    ;

numeric_value_expression_divisor =
    numeric_value_expression
    ;

string_value_function =
  | character_value_function
  | blob_value_function
  | bit_value_function
    ;

character_value_function =
  | character_substring_function
  | regular_expression_substring_function
  | fold
  | form_of_use_conversion
  | character_translation
  | trim_function
  | character_overlay_function
  | specific_type_method
    ;

character_substring_function =
    'SUBSTRING' left_paren character_value_expression 'FROM' start_position ['FOR' string_length] right_paren
    ;

regular_expression_substring_function =
    'SUBSTRING' left_paren character_value_expression 'FROM' character_value_expression 'FOR' escape_character right_paren
    ;

fold =
    ('UPPER' | 'LOWER') left_paren character_value_expression right_paren
    ;

form_of_use_conversion =
    'CONVERT' left_paren character_value_expression 'USING' form_of_use_conversion_name right_paren
    ;

character_translation =
    'TRANSLATE' left_paren character_value_expression 'USING' translation_name right_paren
    ;

trim_function =
    'TRIM' left_paren trim_operands right_paren
    ;

trim_operands =
    [[trim_specification] [trim_character] 'FROM'] trim_source
    ;

trim_source =
    character_value_expression
    ;

trim_specification =
  | 'LEADING'
  | 'TRAILING'
  | 'BOTH'
    ;

trim_character =
    character_value_expression
    ;

character_overlay_function =
    'OVERLAY' left_paren character_value_expression 'PLACING' character_value_expression 'FROM' start_position ['FOR' string_length] right_paren
    ;

specific_type_method =
    user_defined_type_value_expression period 'SPECIFICTYPE'
    ;

blob_value_function =
  | blob_substring_function
  | blob_trim_function
  | blob_overlay_function
    ;

blob_substring_function =
    'SUBSTRING' left_paren blob_value_expression 'FROM' start_position ['FOR' string_length] right_paren
    ;

blob_trim_function =
    'TRIM' left_paren blob_trim_operands right_paren
    ;

blob_trim_operands =
    [[trim_specification] [trim_octet] 'FROM'] blob_trim_source
    ;

blob_trim_source =
    blob_value_expression
    ;

trim_octet =
    blob_value_expression
    ;

blob_overlay_function =
    'OVERLAY' left_paren blob_value_expression 'PLACING' blob_value_expression 'FROM' start_position ['FOR' string_length] right_paren
    ;

bit_value_function =
    bit_substring_function
    ;

bit_substring_function =
    'SUBSTRING' left_paren bit_value_expression 'FROM' start_position ['FOR' string_length] right_paren
    ;

start_position =
    numeric_value_expression
    ;

string_length =
    numeric_value_expression
    ;

datetime_value_function =
  | current_date_value_function
  | current_time_value_function
  | current_timestamp_value_function
  | current_local_time_value_function
  | current_local_timestamp_value_function
    ;

current_date_value_function =
    'CURRENT_DATE'
    ;

current_time_value_function =
    'CURRENT_TIME' [left_paren time_precision right_paren]
    ;

current_local_time_value_function =
    'LOCALTIME' [left_paren time_precision right_paren]
    ;

current_timestamp_value_function =
    'CURRENT_TIMESTAMP' [left_paren timestamp_precision right_paren]
    ;

current_local_timestamp_value_function =
    'LOCALTIMESTAMP' [left_paren timestamp_precision right_paren]
    ;

interval_value_function =
    interval_absolute_value_function
    ;

interval_absolute_value_function =
    'ABS' left_paren interval_value_expression right_paren
    ;

case_expression =
  | case_abbreviation
  | case_specification
    ;

case_abbreviation =
  | 'NULLIF' left_paren value_expression comma value_expression right_paren
  | 'COALESCE' left_paren value_expression {comma value_expression}+ right_paren
    ;

case_specification =
  | simple_case
  | searched_case
    ;

simple_case =
    'CASE' case_operand {simple_when_clause}+ [else_clause] 'END'
    ;

searched_case =
    'CASE' {searched_when_clause}+ [else_clause] 'END'
    ;

simple_when_clause =
    'WHEN' when_operand 'THEN' result
    ;

searched_when_clause =
    'WHEN' search_condition 'THEN' result
    ;

else_clause =
    'ELSE' result
    ;

case_operand =
    value_expression
    ;

when_operand =
    value_expression
    ;

result =
  | result_expression
  | 'NULL'
    ;

result_expression =
    value_expression
    ;

cast_specification =
    'CAST' left_paren cast_operand 'AS' cast_target right_paren
    ;

cast_operand =
  | value_expression
  | implicitly_typed_value_specification
    ;

cast_target =
  | domain_name
  | data_type
    ;

value_expression =
  | numeric_value_expression
  | string_value_expression
  | datetime_value_expression
  | interval_value_expression
  | boolean_value_expression
  | user_defined_type_value_expression
  | row_value_expression
  | reference_value_expression
  | collection_value_expression
    ;

user_defined_type_value_expression =
    value_expression_primary
    ;

reference_value_expression =
    value_expression_primary
    ;

collection_value_expression =
    value_expression_primary
    ;

value_expression_primary =
  | parenthesized_value_expression
  | nonparenthesized_value_expression_primary
    ;

parenthesized_value_expression =
    left_paren value_expression right_paren
    ;

nonparenthesized_value_expression_primary =
  | unsigned_value_specification
  | column_reference
  | set_function_specification
  | scalar_subquery
  | case_expression
  | cast_specification
  | subtype_treatment
  | attribute_or_method_reference
  | reference_resolution
  | collection_value_constructor
  | routine_invocation
  | field_reference
  | element_reference
  | method_invocation
  | static_method_invocation
  | new_specification
    ;

collection_value_constructor =
    array_value_expression
    ;

new_specification =
    'NEW' routine_invocation
    ;

new_invocation =
    method_invocation
    ;

subtype_treatment =
    'TREAT' left_paren subtype_operand 'AS' target_data_type right_paren
    ;

subtype_operand =
    value_expression
    ;

target_data_type =
    user_defined_type
    ;

numeric_value_expression =
  | term
  | numeric_value_expression plus_sign term
  | numeric_value_expression minus_sign term
    ;

term =
  | factor
  | term asterisk factor
  | term solidus factor
    ;

factor =
    [sign] numeric_primary
    ;

numeric_primary =
  | value_expression_primary
  | numeric_value_function
    ;

string_value_expression =
  | character_value_expression
  | bit_value_expression
  | blob_value_expression
    ;

character_value_expression =
  | concatenation
  | character_factor
    ;

concatenation =
    character_value_expression concatenation_operator character_factor
    ;

character_factor =
    character_primary [collate_clause]
    ;

character_primary =
  | value_expression_primary
  | string_value_function
    ;

blob_value_expression =
  | blob_concatenation
  | blob_factor
    ;

blob_factor =
    blob_primary
    ;

blob_primary =
  | value_expression_primary
  | string_value_function
    ;

blob_concatenation =
    blob_value_expression concatenation_operator blob_factor
    ;

bit_value_expression =
  | bit_concatenation
  | bit_factor
    ;

bit_concatenation =
    bit_value_expression concatenation_operator bit_factor
    ;

bit_factor =
    bit_primary
    ;

bit_primary =
  | value_expression_primary
  | string_value_function
    ;

datetime_value_expression =
  | datetime_term
  | interval_value_expression plus_sign datetime_term
  | datetime_value_expression plus_sign interval_term
  | datetime_value_expression minus_sign interval_term
    ;

datetime_term =
    datetime_factor
    ;

datetime_factor =
    datetime_primary [time_zone]
    ;

datetime_primary =
  | value_expression_primary
  | datetime_value_function
    ;

time_zone =
    'AT' time_zone_specifier
    ;

time_zone_specifier =
  | 'LOCAL'
  | 'TIME' 'ZONE' interval_primary
    ;

interval_value_expression =
  | interval_term
  | interval_value_expression_1 plus_sign interval_term_1
  | interval_value_expression_1 minus_sign interval_term_1
  | left_paren datetime_value_expression minus_sign datetime_term right_paren interval_qualifier
    ;

interval_term =
  | interval_factor
  | interval_term_2 asterisk factor
  | interval_term_2 solidus factor
  | term asterisk interval_factor
    ;

interval_factor =
    [sign] interval_primary
    ;

interval_primary =
  | value_expression_primary
  | interval_value_function
    ;

interval_value_expression_1 =
    interval_value_expression
    ;

interval_term_1 =
    interval_term
    ;

interval_term_2 =
    interval_term
    ;

boolean_value_expression =
  | boolean_term
  | boolean_value_expression 'OR' boolean_term
    ;

boolean_term =
  | boolean_factor
  | boolean_term 'AND' boolean_factor
    ;

boolean_factor =
    ['NOT'] boolean_test
    ;

boolean_test =
    boolean_primary ['IS' ['NOT'] truth_value]
    ;

truth_value =
  | 'TRUE'
  | 'FALSE'
  | 'UNKNOWN'
    ;

boolean_primary =
  | predicate
  | parenthesized_boolean_value_expression
  | nonparenthesized_value_expression_primary
    ;

parenthesized_boolean_value_expression =
    left_paren boolean_value_expression right_paren
    ;

array_value_expression =
  | array_value_constructor
  | array_concatenation
  | value_expression_primary
    ;

array_concatenation =
    array_value_expression_1 concatenation_operator array_value_expression_2
    ;

array_value_expression_1 =
    array_value_expression
    ;

array_value_expression_2 =
    array_value_expression
    ;

array_value_constructor =
    array_value_list_constructor
    ;

array_value_list_constructor =
    'ARRAY' left_bracket_or_trigraph array_element_list right_bracket_or_trigraph
    ;

array_element_list =
    array_element [{comma array_element}+]
    ;

array_element =
    value_expression
    ;

row_value_constructor =
  | row_value_constructor_element
  | ['ROW'] left_paren row_value_constructor_element_list right_paren
  | row_subquery
    ;

row_value_constructor_element_list =
    row_value_constructor_element [{comma row_value_constructor_element}+]
    ;

row_value_constructor_element =
    value_expression
    ;

contextually_typed_row_value_constructor =
  | contextually_typed_row_value_constructor_element
  | ['ROW'] left_paren contextually_typed_row_value_constructor_element_list right_paren
    ;

contextually_typed_row_value_constructor_element_list =
    contextually_typed_row_value_constructor_element [{comma contextually_typed_row_value_constructor_element}+]
    ;

contextually_typed_row_value_constructor_element =
  | value_expression
  | contextually_typed_value_specification
    ;

row_value_expression =
  | row_value_special_case
  | row_value_constructor
    ;

contextually_typed_row_value_expression =
  | row_value_special_case
  | contextually_typed_row_value_constructor
    ;

row_value_special_case =
  | value_specification
  | value_expression
    ;

table_value_constructor =
    'VALUES' row_value_expression_list
    ;

row_value_expression_list =
    row_value_expression [{comma row_value_expression}+]
    ;

contextually_typed_table_value_constructor =
    'VALUES' contextually_typed_row_value_expression_list
    ;

contextually_typed_row_value_expression_list =
    contextually_typed_row_value_expression [{comma contextually_typed_row_value_expression}+]
    ;

table_expression =
    from_clause [where_clause] [group_by_clause] [having_clause]
    ;

from_clause =
    'FROM' table_reference_list
    ;

table_reference_list =
    table_reference [{comma table_reference}+]
    ;

table_reference =
  | table_primary
  | joined_table
    ;

table_primary =
  | table_or_query_name [['AS'] correlation_name [left_paren derived_column_list right_paren]]
  | derived_table ['AS'] correlation_name [left_paren derived_column_list right_paren]
  | lateral_derived_table ['AS'] correlation_name [left_paren derived_column_list right_paren]
  | collection_derived_table ['AS'] correlation_name [left_paren derived_column_list right_paren]
  | only_spec [['AS'] correlation_name [left_paren derived_column_list right_paren]]
  | left_paren joined_table right_paren
    ;

only_spec =
    'ONLY' left_paren table_or_query_name right_paren
    ;

lateral_derived_table =
    'LATERAL' left_paren query_expression right_paren
    ;

collection_derived_table =
    'UNNEST' left_paren collection_value_expression right_paren ['WITH' 'ORDINALITY']
    ;

derived_table =
    table_subquery
    ;

table_or_query_name =
  | table_name
  | query_name
    ;

derived_column_list =
    column_name_list
    ;

column_name_list =
    column_name [{comma column_name}+]
    ;

joined_table =
  | cross_join
  | qualified_join
  | natural_join
  | union_join
    ;

cross_join =
    table_reference 'CROSS' 'JOIN' table_primary
    ;

qualified_join =
    table_reference [join_type] 'JOIN' table_reference join_specification
    ;

natural_join =
    table_reference 'NATURAL' [join_type] 'JOIN' table_primary
    ;

union_join =
    table_reference 'UNION' 'JOIN' table_primary
    ;

join_specification =
  | join_condition
  | named_columns_join
    ;

join_condition =
    'ON' search_condition
    ;

named_columns_join =
    'USING' left_paren join_column_list right_paren
    ;

join_type =
  | 'INNER'
  | outer_join_type ['OUTER']
    ;

outer_join_type =
  | 'LEFT'
  | 'RIGHT'
  | 'FULL'
    ;

join_column_list =
    column_name_list
    ;

where_clause =
    'WHERE' search_condition
    ;

group_by_clause =
    'GROUP' 'BY' grouping_specification
    ;

grouping_specification =
  | grouping_column_reference
  | rollup_list
  | cube_list
  | grouping_sets_list
  | grand_total
  | concatenated_grouping
    ;

rollup_list =
    'ROLLUP' left_paren grouping_column_reference_list right_paren
    ;

cube_list =
    'CUBE' left_paren grouping_column_reference_list right_paren
    ;

grouping_sets_list =
    'GROUPING' 'SETS' left_paren grouping_set_list right_paren
    ;

grouping_set_list =
    grouping_set [{comma grouping_set}+]
    ;

concatenated_grouping =
    grouping_set comma grouping_set_list
    ;

grouping_set =
  | ordinary_grouping_set
  | rollup_list
  | cube_list
  | grand_total
    ;

ordinary_grouping_set =
  | grouping_column_reference
  | left_paren grouping_column_reference_list right_paren
    ;

grand_total =
    left_paren right_paren
    ;

grouping_column_reference_list =
    grouping_column_reference [{comma grouping_column_reference}+]
    ;

grouping_column_reference =
    column_reference [collate_clause]
    ;

having_clause =
    'HAVING' search_condition
    ;

query_specification =
    'SELECT' [set_quantifier] select_list table_expression
    ;

select_list =
  | asterisk
  | select_sublist [{comma select_sublist}+]
    ;

select_sublist =
  | derived_column
  | qualified_asterisk
    ;

qualified_asterisk =
  | asterisked_identifier_chain period asterisk
  | all_fields_reference
    ;

asterisked_identifier_chain =
    asterisked_identifier [{period asterisked_identifier}+]
    ;

asterisked_identifier =
    identifier
    ;

derived_column =
    value_expression [as_clause]
    ;

as_clause =
    ['AS'] column_name
    ;

all_fields_reference =
    value_expression_primary period asterisk
    ;

query_expression =
    [with_clause] query_expression_body
    ;

with_clause =
    'WITH' ['RECURSIVE'] with_list
    ;

with_list =
    with_list_element [{comma with_list_element}+]
    ;

with_list_element =
    query_name [left_paren with_column_list right_paren] 'AS' left_paren query_expression right_paren [search_or_cycle_clause]
    ;

with_column_list =
    column_name_list
    ;

query_expression_body =
  | non_join_query_expression
  | joined_table
    ;

non_join_query_expression =
  | non_join_query_term
  | query_expression_body 'UNION' ['ALL' | 'DISTINCT'] [corresponding_spec] query_term
  | query_expression_body 'EXCEPT' ['ALL' | 'DISTINCT'] [corresponding_spec] query_term
    ;

query_term =
  | non_join_query_term
  | joined_table
    ;

non_join_query_term =
  | non_join_query_primary
  | query_term 'INTERSECT' ['ALL' | 'DISTINCT'] [corresponding_spec] query_primary
    ;

query_primary =
  | non_join_query_primary
  | joined_table
    ;

non_join_query_primary =
  | simple_table
  | left_paren non_join_query_expression right_paren
    ;

simple_table =
  | query_specification
  | table_value_constructor
  | explicit_table
    ;

explicit_table =
    'TABLE' table_name
    ;

corresponding_spec =
    'CORRESPONDING' ['BY' left_paren corresponding_column_list right_paren]
    ;

corresponding_column_list =
    column_name_list
    ;

search_or_cycle_clause =
  | search_clause
  | cycle_clause
  | search_clause cycle_clause
    ;

search_clause =
    'SEARCH' recursive_search_order 'SET' sequence_column
    ;

recursive_search_order =
  | 'DEPTH' 'FIRST' 'BY' sort_specification_list
  | 'BREADTH' 'FIRST' 'BY' sort_specification_list
    ;

sequence_column =
    column_name
    ;

cycle_clause =
    'CYCLE' cycle_column_list 'SET' cycle_mark_column 'TO' cycle_mark_value 'DEFAULT' non_cycle_mark_value 'USING' path_column
    ;

cycle_column_list =
    cycle_column [{comma cycle_column}+]
    ;

cycle_column =
    column_name
    ;

cycle_mark_column =
    column_name
    ;

path_column =
    column_name
    ;

cycle_mark_value =
    value_expression
    ;

non_cycle_mark_value =
    value_expression
    ;

scalar_subquery =
    subquery
    ;

row_subquery =
    subquery
    ;

table_subquery =
    subquery
    ;

subquery =
    left_paren query_expression right_paren
    ;

predicate =
  | comparison_predicate
  | between_predicate
  | in_predicate
  | like_predicate
  | null_predicate
  | quantified_comparison_predicate
  | exists_predicate
  | unique_predicate
  | match_predicate
  | overlaps_predicate
  | similar_predicate
  | distinct_predicate
  | type_predicate
    ;

comparison_predicate =
    row_value_expression comp_op row_value_expression
    ;

comp_op =
  | equals_operator
  | not_equals_operator
  | less_than_operator
  | greater_than_operator
  | less_than_or_equals_operator
  | greater_than_or_equals_operator
    ;

between_predicate =
    row_value_expression ['NOT'] 'BETWEEN' ['ASYMMETRIC' | 'SYMMETRIC'] row_value_expression 'AND' row_value_expression
    ;

in_predicate =
    row_value_expression ['NOT'] 'IN' in_predicate_value
    ;

in_predicate_value =
  | table_subquery
  | left_paren in_value_list right_paren
    ;

in_value_list =
    row_value_expression {comma row_value_expression}+
    ;

like_predicate =
  | character_like_predicate
  | octet_like_predicate
    ;

character_like_predicate =
    character_match_value ['NOT'] 'LIKE' character_pattern ['ESCAPE' escape_character]
    ;

character_match_value =
    character_value_expression
    ;

character_pattern =
    character_value_expression
    ;

escape_character =
    character_value_expression
    ;

octet_like_predicate =
    octet_match_value ['NOT'] 'LIKE' octet_pattern ['ESCAPE' escape_octet]
    ;

octet_match_value =
    blob_value_expression
    ;

octet_pattern =
    blob_value_expression
    ;

escape_octet =
    blob_value_expression
    ;

similar_predicate =
    character_match_value ['NOT'] 'SIMILAR' 'TO' similar_pattern ['ESCAPE' escape_character]
    ;

similar_pattern =
    character_value_expression
    ;

regular_expression =
  | regular_term
  | regular_expression vertical_bar regular_term
    ;

regular_term =
  | regular_factor
  | regular_term regular_factor
    ;

regular_factor =
  | regular_primary
  | regular_primary asterisk
  | regular_primary plus_sign
    ;

regular_primary =
  | character_specifier
  | percent
  | regular_character_set
  | left_paren regular_expression right_paren
    ;

character_specifier =
  | non_escaped_character
  | escaped_character
    ;

non_escaped_character =
    '#SEE_THE_SYNTAX_RULES'
    ;

escaped_character =
    '#SEE_THE_SYNTAX_RULES'
    ;

regular_character_set =
  | underscore
  | left_bracket {character_enumeration}+ right_bracket
  | left_bracket circumflex {character_enumeration}+ right_bracket
  | left_bracket colon regular_character_set_identifier colon right_bracket
    ;

character_enumeration =
  | character_specifier
  | character_specifier minus_sign character_specifier
    ;

regular_character_set_identifier =
    identifier
    ;

null_predicate =
    row_value_expression 'IS' ['NOT'] 'NULL'
    ;

quantified_comparison_predicate =
    row_value_expression comp_op quantifier table_subquery
    ;

quantifier =
  | all
  | some
    ;

all =
    'ALL'
    ;

some =
  | 'SOME'
  | 'ANY'
    ;

exists_predicate =
    'EXISTS' table_subquery
    ;

unique_predicate =
    'UNIQUE' table_subquery
    ;

match_predicate =
    row_value_expression 'MATCH' ['UNIQUE'] ['SIMPLE' | 'PARTIAL' | 'FULL'] table_subquery
    ;

overlaps_predicate =
    row_value_expression_1 'OVERLAPS' row_value_expression_2
    ;

row_value_expression_1 =
    row_value_expression
    ;

row_value_expression_2 =
    row_value_expression
    ;

distinct_predicate =
    row_value_expression_3 'IS' 'DISTINCT' 'FROM' row_value_expression_4
    ;

row_value_expression_3 =
    row_value_expression
    ;

row_value_expression_4 =
    row_value_expression
    ;

type_predicate =
    user_defined_type_value_expression 'IS' ['NOT'] 'OF' left_paren type_list right_paren
    ;

type_list =
    user_defined_type_specification [{comma user_defined_type_specification}+]
    ;

user_defined_type_specification =
  | inclusive_user_defined_type_specification
  | exclusive_user_defined_type_specification
    ;

inclusive_user_defined_type_specification =
    user_defined_type
    ;

exclusive_user_defined_type_specification =
    'ONLY' user_defined_type
    ;

search_condition =
    boolean_value_expression
    ;

interval_qualifier =
  | start_field 'TO' end_field
  | single_datetime_field
    ;

start_field =
    non_second_primary_datetime_field [left_paren interval_leading_field_precision right_paren]
    ;

end_field =
  | non_second_primary_datetime_field
  | 'SECOND' [left_paren interval_fractional_seconds_precision right_paren]
    ;

single_datetime_field =
  | non_second_primary_datetime_field [left_paren interval_leading_field_precision right_paren]
  | 'SECOND' [left_paren interval_leading_field_precision [comma interval_fractional_seconds_precision] right_paren]
    ;

primary_datetime_field =
  | non_second_primary_datetime_field
  | 'SECOND'
    ;

non_second_primary_datetime_field =
  | 'YEAR'
  | 'MONTH'
  | 'DAY'
  | 'HOUR'
  | 'MINUTE'
    ;

interval_fractional_seconds_precision =
    unsigned_integer
    ;

interval_leading_field_precision =
    unsigned_integer
    ;

language_clause =
    'LANGUAGE' language_name
    ;

language_name =
  | 'ADA'
  | 'C'
  | 'COBOL'
  | 'FORTRAN'
  | 'MUMPS'
  | 'PASCAL'
  | 'PLI'
  | 'SQL'
    ;

path_specification =
    'PATH' schema_name_list
    ;

schema_name_list =
    schema_name [{comma schema_name}+]
    ;

routine_invocation =
    routine_name sql_argument_list
    ;

routine_name =
    [schema_name period] qualified_identifier
    ;

sql_argument_list =
    left_paren [sql_argument [{comma sql_argument}+]] right_paren
    ;

sql_argument =
  | value_expression
  | generalized_expression
  | target_specification
    ;

generalized_expression =
    value_expression 'AS' user_defined_type
    ;

privileges =
    object_privileges 'ON' object_name
    ;

object_name =
  | ['TABLE'] table_name
  | 'DOMAIN' domain_name
  | 'COLLATION' collation_name
  | 'CHARACTER' 'SET' character_set_name
  | 'TRANSLATION' translation_name
  | 'TYPE' user_defined_type_name
  | specific_routine_designator
    ;

object_privileges =
  | 'ALL' 'PRIVILEGES'
  | action [{comma action}+]
    ;

action =
  | 'SELECT'
  | 'SELECT' left_paren privilege_column_list right_paren
  | 'SELECT' left_paren privilege_method_list right_paren
  | 'DELETE'
  | 'INSERT' [left_paren privilege_column_list right_paren]
  | 'UPDATE' [left_paren privilege_column_list right_paren]
  | 'REFERENCES' [left_paren privilege_column_list right_paren]
  | 'USAGE'
  | 'TRIGGER'
  | 'UNDER'
  | 'EXECUTE'
    ;

privilege_method_list =
    specific_routine_designator [{comma specific_routine_designator}+]
    ;

privilege_column_list =
    column_name_list
    ;

grantee =
  | 'PUBLIC'
  | authorization_identifier
    ;

grantor =
  | 'CURRENT_USER'
  | 'CURRENT_ROLE'
    ;

character_set_specification =
  | standard_character_set_name
  | implementation_defined_character_set_name
  | user_defined_character_set_name
    ;

standard_character_set_name =
    character_set_name
    ;

implementation_defined_character_set_name =
    character_set_name
    ;

user_defined_character_set_name =
    character_set_name
    ;

specific_routine_designator =
  | 'SPECIFIC' routine_type specific_name
  | routine_type member_name ['FOR' 'user_defined' type>]
    ;

routine_type =
  | 'ROUTINE'
  | 'FUNCTION'
  | 'PROCEDURE'
  | ['INSTANCE' | 'STATIC'] 'METHOD'
    ;

member_name =
    schema_qualified_routine_name [data_type_list]
    ;

data_type_list =
    left_paren [data_type [{comma data_type}+]] right_paren
    ;

collate_clause =
    'COLLATE' collation_name
    ;

constraint_name_definition =
    'CONSTRAINT' constraint_name
    ;

constraint_characteristics =
  | constraint_check_time [['NOT'] 'DEFERRABLE']
  | ['NOT'] 'DEFERRABLE' [constraint_check_time]
    ;

constraint_check_time =
  | 'INITIALLY' 'DEFERRED'
  | 'INITIALLY' 'IMMEDIATE'
    ;

schema_definition =
    'CREATE' 'SCHEMA' schema_name_clause [schema_character_set_or_path] [{schema_element}+]
    ;

schema_character_set_or_path =
  | schema_character_set_specification
  | schema_path_specification
  | schema_character_set_specification schema_path_specification
  | schema_path_specification schema_character_set_specification
    ;

schema_name_clause =
  | schema_name
  | 'AUTHORIZATION' schema_authorization_identifier
  | schema_name 'AUTHORIZATION' schema_authorization_identifier
    ;

schema_authorization_identifier =
    authorization_identifier
    ;

schema_character_set_specification =
    'DEFAULT' 'CHARACTER' 'SET' character_set_specification
    ;

schema_path_specification =
    path_specification
    ;

schema_element =
  | table_definition
  | view_definition
  | domain_definition
  | character_set_definition
  | collation_definition
  | translation_definition
  | assertion_definition
  | trigger_definition
  | user_defined_type_definition
  | schema_routine
  | grant_statement
  | role_definition
  | grant_role_statement
    ;

drop_schema_statement =
    'DROP' 'SCHEMA' schema_name drop_behavior
    ;

drop_behavior =
  | 'CASCADE'
  | 'RESTRICT'
    ;

table_definition =
    'CREATE' [table_scope] 'TABLE' table_name table_contents_source ['ON' 'COMMIT' table_commit_action 'ROWS']
    ;

table_contents_source =
  | table_element_list
  | 'OF' user_defined_type [subtable_clause] [table_element_list]
    ;

table_scope =
    global_or_local 'TEMPORARY'
    ;

global_or_local =
  | 'GLOBAL'
  | 'LOCAL'
    ;

table_commit_action =
  | 'PRESERVE'
  | 'DELETE'
    ;

table_element_list =
    left_paren table_element [{comma table_element}+] right_paren
    ;

table_element =
  | column_definition
  | table_constraint_definition
  | like_clause
  | self_referencing_column_specification
  | column_options
    ;

self_referencing_column_specification =
    'REF' 'IS' self_referencing_column_name reference_generation
    ;

reference_generation =
  | 'SYSTEM' 'GENERATED'
  | 'USER' 'GENERATED'
  | 'DERIVED'
    ;

self_referencing_column_name =
    column_name
    ;

column_options =
    column_name 'WITH' 'OPTIONS' column_option_list
    ;

column_option_list =
    [scope_clause] [default_clause] [{column_constraint_definition}+] [collate_clause]
    ;

subtable_clause =
    'UNDER' supertable_clause
    ;

supertable_clause =
    supertable_name
    ;

supertable_name =
    table_name
    ;

like_clause =
    'LIKE' table_name
    ;

column_definition =
    column_name (data_type | domain_name) [reference_scope_check] [default_clause] [{column_constraint_definition}+] [collate_clause]
    ;

column_constraint_definition =
    [constraint_name_definition] column_constraint [constraint_characteristics]
    ;

column_constraint =
  | 'NOT' 'NULL'
  | unique_specification
  | references_specification
  | check_constraint_definition
    ;

reference_scope_check =
    'REFERENCES' 'ARE' ['NOT'] 'CHECKED' ['ON' 'DELETE' reference_scope_check_action]
    ;

reference_scope_check_action =
    referential_action
    ;

default_clause =
    'DEFAULT' default_option
    ;

default_option =
  | literal
  | datetime_value_function
  | 'USER'
  | 'CURRENT_USER'
  | 'CURRENT_ROLE'
  | 'SESSION_USER'
  | 'SYSTEM_USER'
  | 'CURRENT_PATH'
  | implicitly_typed_value_specification
    ;

table_constraint_definition =
    [constraint_name_definition] table_constraint [constraint_characteristics]
    ;

table_constraint =
  | unique_constraint_definition
  | referential_constraint_definition
  | check_constraint_definition
    ;

unique_constraint_definition =
  | unique_specification left_paren unique_column_list right_paren
  | 'UNIQUE' '(' 'VALUE' ')'
    ;

unique_specification =
  | 'UNIQUE'
  | 'PRIMARY' 'KEY'
    ;

unique_column_list =
    column_name_list
    ;

referential_constraint_definition =
    'FOREIGN' 'KEY' left_paren referencing_columns right_paren references_specification
    ;

references_specification =
    'REFERENCES' referenced_table_and_columns ['MATCH' match_type] [referential_triggered_action]
    ;

match_type =
  | 'FULL'
  | 'PARTIAL'
  | 'SIMPLE'
    ;

referencing_columns =
    reference_column_list
    ;

referenced_table_and_columns =
    table_name [left_paren reference_column_list right_paren]
    ;

reference_column_list =
    column_name_list
    ;

referential_triggered_action =
  | update_rule [delete_rule]
  | delete_rule [update_rule]
    ;

update_rule =
    'ON' 'UPDATE' referential_action
    ;

delete_rule =
    'ON' 'DELETE' referential_action
    ;

referential_action =
  | 'CASCADE'
  | 'SET' 'NULL'
  | 'SET' 'DEFAULT'
  | 'RESTRICT'
  | 'NO' 'ACTION'
    ;

check_constraint_definition =
    'CHECK' left_paren search_condition right_paren
    ;

alter_table_statement =
    'ALTER' 'TABLE' table_name alter_table_action
    ;

alter_table_action =
  | add_column_definition
  | alter_column_definition
  | drop_column_definition
  | add_table_constraint_definition
  | drop_table_constraint_definition
    ;

add_column_definition =
    'ADD' ['COLUMN'] column_definition
    ;

alter_column_definition =
    'ALTER' ['COLUMN'] column_name alter_column_action
    ;

alter_column_action =
  | set_column_default_clause
  | drop_column_default_clause
  | add_column_scope_clause
  | drop_column_scope_clause
    ;

set_column_default_clause =
    'SET' default_clause
    ;

drop_column_default_clause =
    'DROP' 'DEFAULT'
    ;

add_column_scope_clause =
    'ADD' scope_clause
    ;

drop_column_scope_clause =
    'DROP' 'SCOPE' drop_behavior
    ;

drop_column_definition =
    'DROP' ['COLUMN'] column_name drop_behavior
    ;

add_table_constraint_definition =
    'ADD' table_constraint_definition
    ;

drop_table_constraint_definition =
    'DROP' 'CONSTRAINT' constraint_name drop_behavior
    ;

drop_table_statement =
    'DROP' 'TABLE' table_name drop_behavior
    ;

view_definition =
    'CREATE' ['RECURSIVE'] 'VIEW' table_name view_specification 'AS' query_expression ['WITH' [levels_clause] 'CHECK' 'OPTION']
    ;

view_specification =
  | regular_view_specification
  | referenceable_view_specification
    ;

regular_view_specification =
    [left_paren view_column_list right_paren]
    ;

referenceable_view_specification =
    'OF' user_defined_type [subview_clause] [view_element_list]
    ;

subview_clause =
    'UNDER' table_name
    ;

view_element_list =
    left_paren [self_referencing_column_specification comma] view_element [{comma view_element}+] right_paren
    ;

view_element =
    view_column_option
    ;

view_column_option =
    column_name 'WITH' 'OPTIONS' scope_clause
    ;

levels_clause =
  | 'CASCADED'
  | 'LOCAL'
    ;

view_column_list =
    column_name_list
    ;

drop_view_statement =
    'DROP' 'VIEW' table_name drop_behavior
    ;

domain_definition =
    'CREATE' 'DOMAIN' domain_name ['AS'] data_type [default_clause] [{domain_constraint}+] [collate_clause]
    ;

domain_constraint =
    [constraint_name_definition] check_constraint_definition [constraint_characteristics]
    ;

alter_domain_statement =
    'ALTER' 'DOMAIN' domain_name alter_domain_action
    ;

alter_domain_action =
  | set_domain_default_clause
  | drop_domain_default_clause
  | add_domain_constraint_definition
  | drop_domain_constraint_definition
    ;

set_domain_default_clause =
    'SET' default_clause
    ;

drop_domain_default_clause =
    'DROP' 'DEFAULT'
    ;

add_domain_constraint_definition =
    'ADD' domain_constraint
    ;

drop_domain_constraint_definition =
    'DROP' 'CONSTRAINT' constraint_name
    ;

drop_domain_statement =
    'DROP' 'DOMAIN' domain_name drop_behavior
    ;

character_set_definition =
    'CREATE' 'CHARACTER' 'SET' character_set_name ['AS'] character_set_source [collate_clause]
    ;

character_set_source =
    'GET' character_set_specification
    ;

drop_character_set_statement =
    'DROP' 'CHARACTER' 'SET' character_set_name
    ;

collation_definition =
    'CREATE' 'COLLATION' collation_name 'FOR' character_set_specification 'FROM' existing_collation_name [pad_characteristic]
    ;

existing_collation_name =
    collation_name
    ;

pad_characteristic =
  | 'NO' 'PAD'
  | 'PAD' 'SPACE'
    ;

drop_collation_statement =
    'DROP' 'COLLATION' collation_name drop_behavior
    ;

translation_definition =
    'CREATE' 'TRANSLATION' translation_name 'FOR' source_character_set_specification 'TO' target_character_set_specification 'FROM' translation_source
    ;

source_character_set_specification =
    character_set_specification
    ;

target_character_set_specification =
    character_set_specification
    ;

translation_source =
  | existing_translation_name
  | translation_routine
    ;

existing_translation_name =
    translation_name
    ;

translation_routine =
    specific_routine_designator
    ;

drop_translation_statement =
    'DROP' 'TRANSLATION' translation_name
    ;

drop_assertion_statement =
    'DROP' 'ASSERTION' constraint_name
    ;

trigger_definition =
    'CREATE' 'TRIGGER' trigger_name trigger_action_time trigger_event 'ON' table_name ['REFERENCING' old_or_new_values_alias_list] triggered_action
    ;

trigger_action_time =
  | 'BEFORE'
  | 'AFTER'
    ;

trigger_event =
  | 'INSERT'
  | 'DELETE'
  | 'UPDATE' ['OF' trigger_column_list]
    ;

trigger_column_list =
    column_name_list
    ;

triggered_action =
    ['FOR' 'EACH' ('ROW' | 'STATEMENT')] ['WHEN' left_paren search_condition right_paren] triggered_sql_statement
    ;

triggered_sql_statement =
  | sql_procedure_statement
  | 'BEGIN' 'ATOMIC' {sql_procedure_statement semicolon}+ 'END'
    ;

old_or_new_values_alias_list =
    {old_or_new_values_alias}+
    ;

old_or_new_values_alias =
  | 'OLD' ['ROW'] ['AS'] old_values_correlation_name
  | 'NEW' ['ROW'] ['AS'] new_values_correlation_name
  | 'OLD' 'TABLE' ['AS'] old_values_table_alias
  | 'NEW' 'TABLE' ['AS'] new_values_table_alias
    ;

old_values_table_alias =
    identifier
    ;

new_values_table_alias =
    identifier
    ;

old_values_correlation_name =
    correlation_name
    ;

new_values_correlation_name =
    correlation_name
    ;

drop_trigger_statement =
    'DROP' 'TRIGGER' trigger_name
    ;

user_defined_type_definition =
    'CREATE' 'TYPE' user_defined_type_body
    ;

user_defined_type_body =
    user_defined_type_name [subtype_clause] ['AS' representation] [instantiable_clause] finality [reference_type_specification] [cast_option] [method_specification_list]
    ;

subtype_clause =
    'UNDER' supertype_name
    ;

supertype_name =
    user_defined_type
    ;

representation =
  | predefined_type
  | member_list
    ;

member_list =
    left_paren member [{comma member}+] right_paren
    ;

member =
    attribute_definition
    ;

instantiable_clause =
  | 'INSTANTIABLE'
  | 'NOT' 'INSTANTIABLE'
    ;

finality =
  | 'FINAL'
  | 'NOT' 'FINAL'
    ;

reference_type_specification =
  | user_defined_representation
  | derived_representation
  | system_generated_representation
    ;

user_defined_representation =
    'REF' 'USING' predefined_type [ref_cast_option]
    ;

derived_representation =
    'REF' 'FROM' list_of_attributes
    ;

system_generated_representation =
    'REF' 'IS' 'SYSTEM' 'GENERATED'
    ;

ref_cast_option =
    [cast_to_ref] [cast_to_type]
    ;

cast_to_ref =
    'CAST' left_paren 'SOURCE' 'AS' 'REF' right_paren 'WITH' cast_to_ref_identifier
    ;

cast_to_ref_identifier =
    identifier
    ;

cast_to_type =
    'CAST' left_paren 'REF' 'AS' 'SOURCE' right_paren 'WITH' cast_to_type_identifier
    ;

cast_to_type_identifier =
    identifier
    ;

list_of_attributes =
    left_paren attribute_name [{comma attribute_name}+] right_paren
    ;

cast_option =
    [cast_to_distinct] [cast_to_source]
    ;

cast_to_distinct =
    'CAST' left_paren 'SOURCE' 'AS' 'DISTINCT' right_paren 'WITH' cast_to_distinct_identifier
    ;

cast_to_distinct_identifier =
    identifier
    ;

cast_to_source =
    'CAST' left_paren 'DISTINCT' 'AS' 'SOURCE' right_paren 'WITH' cast_to_source_identifier
    ;

cast_to_source_identifier =
    identifier
    ;

method_specification_list =
    method_specification [{comma method_specification}+]
    ;

method_specification =
  | original_method_specification
  | overriding_method_specification
    ;

original_method_specification =
    partial_method_specification ['SELF' 'AS' 'RESULT'] ['SELF' 'AS' 'LOCATOR'] [method_characteristics]
    ;

overriding_method_specification =
    'OVERRIDING' partial_method_specification
    ;

partial_method_specification =
    ['INSTANCE' | 'STATIC'] 'METHOD' method_name sql_parameter_declaration_list returns_clause ['SPECIFIC' specific_name]
    ;

method_characteristics =
    {method_characteristic}+
    ;

method_characteristic =
  | language_clause
  | parameter_style_clause
  | deterministic_characteristic
  | sql_data_access_indication
  | null_call_clause
  | transform_group_specification
    ;

alter_type_statement =
    'ALTER' 'TYPE' user_defined_type_name alter_type_action
    ;

alter_type_action =
  | add_attribute_definition
  | drop_attribute_definition
  | add_original_method_specification
  | add_overriding_method_specification
  | drop_method_specification
    ;

add_attribute_definition =
    'ADD' 'ATTRIBUTE' attribute_definition
    ;

drop_attribute_definition =
    'DROP' 'ATTRIBUTE' attribute_name 'RESTRICT'
    ;

add_original_method_specification =
    'ADD' original_method_specification
    ;

add_overriding_method_specification =
    'ADD' overriding_method_specification
    ;

drop_method_specification =
    'DROP' specific_routine_designator 'RESTRICT'
    ;

drop_data_type_statement =
    'DROP' 'TYPE' user_defined_type_name drop_behavior
    ;

sql_invoked_routine =
    schema_routine
    ;

schema_routine =
  | schema_procedure
  | schema_function
    ;

schema_procedure =
    'CREATE' sql_invoked_procedure
    ;

schema_function =
    'CREATE' sql_invoked_function
    ;

sql_invoked_procedure =
    'PROCEDURE' schema_qualified_routine_name sql_parameter_declaration_list routine_characteristics routine_body
    ;

sql_invoked_function =
    (function_specification | method_specification_designator) routine_body
    ;

sql_parameter_declaration_list =
    left_paren [sql_parameter_declaration [{comma sql_parameter_declaration}+]] right_paren
    ;

sql_parameter_declaration =
    [parameter_mode] [sql_parameter_name] parameter_type ['RESULT']
    ;

parameter_mode =
  | 'IN'
  | 'OUT'
  | 'INOUT'
    ;

parameter_type =
    data_type [locator_indication]
    ;

locator_indication =
    'AS' 'LOCATOR'
    ;

function_specification =
    'FUNCTION' schema_qualified_routine_name sql_parameter_declaration_list returns_clause routine_characteristics [dispatch_clause]
    ;

method_specification_designator =
    ['INSTANCE' | 'STATIC'] 'METHOD' method_name sql_parameter_declaration_list [returns_clause] 'FOR' user_defined_type
    ;

routine_characteristics =
    [{routine_characteristic}+]
    ;

routine_characteristic =
  | language_clause
  | parameter_style_clause
  | 'SPECIFIC' specific_name
  | deterministic_characteristic
  | sql_data_access_indication
  | null_call_clause
  | transform_group_specification
  | dynamic_result_sets_characteristic
    ;

dynamic_result_sets_characteristic =
    'DYNAMIC' 'RESULT' 'SETS' maximum_dynamic_result_sets
    ;

parameter_style_clause =
    'PARAMETER' 'STYLE' parameter_style
    ;

dispatch_clause =
    'STATIC' 'DISPATCH'
    ;

returns_clause =
    'RETURNS' returns_data_type [result_cast]
    ;

result_cast =
    'CAST' 'FROM' result_cast_from_type
    ;

result_cast_from_type =
    data_type [locator_indication]
    ;

returns_data_type =
    data_type [locator_indication]
    ;

routine_body =
  | sql_routine_body
  | external_body_reference
    ;

sql_routine_body =
    sql_procedure_statement
    ;

external_body_reference =
    'EXTERNAL' ['NAME' external_routine_name] [parameter_style_clause] [external_security_clause]
    ;

external_security_clause =
  | 'EXTERNAL' 'SECURITY' 'DEFINER'
  | 'EXTERNAL' 'SECURITY' 'INVOKER'
  | 'EXTERNAL' 'SECURITY' 'IMPLEMENTATION' 'DEFINED'
    ;

parameter_style =
  | 'SQL'
  | 'GENERAL'
    ;

deterministic_characteristic =
  | 'DETERMINISTIC'
  | 'NOT' 'DETERMINISTIC'
    ;

sql_data_access_indication =
  | 'NO' 'SQL'
  | 'CONTAINS' 'SQL'
  | 'READS' 'SQL' 'DATA'
  | 'MODIFIES' 'SQL' 'DATA'
    ;

null_call_clause =
  | 'RETURNS' 'NULL' 'ON' 'NULL' 'INPUT'
  | 'CALLED' 'ON' 'NULL' 'INPUT'
    ;

maximum_dynamic_result_sets =
    unsigned_integer
    ;

transform_group_specification =
    'TRANSFORM' 'GROUP' (single_group_specification | multiple_group_specification)
    ;

single_group_specification =
    group_name
    ;

multiple_group_specification =
    group_specification [{comma group_specification}+]
    ;

group_specification =
    group_name 'FOR' 'TYPE' user_defined_type
    ;

alter_routine_statement =
    'ALTER' specific_routine_designator alter_routine_characteristics alter_routine_behaviour
    ;

alter_routine_characteristics =
    {alter_routine_characteristic}+
    ;

alter_routine_characteristic =
  | language_clause
  | parameter_style_clause
  | sql_data_access_indication
  | null_call_clause
  | dynamic_result_sets_characteristic
  | 'NAME' external_routine_name
    ;

alter_routine_behaviour =
    'RESTRICT'
    ;

drop_routine_statement =
    'DROP' specific_routine_designator drop_behavior
    ;

drop_user_defined_cast_statement =
    'DROP' 'CAST' left_paren source_data_type 'AS' target_data_type right_paren drop_behavior
    ;

user_defined_ordering_definition =
    'CREATE' 'ORDERING' 'FOR' user_defined_type ordering_form
    ;

ordering_form =
  | equals_ordering_form
  | full_ordering_form
    ;

equals_ordering_form =
    'EQUALS' 'ONLY' 'BY' ordering_category
    ;

full_ordering_form =
    'ORDER' 'FULL' 'BY' ordering_category
    ;

ordering_category =
  | relative_category
  | map_category
  | state_category
    ;

relative_category =
    'RELATIVE' 'WITH' relative_function_specification
    ;

map_category =
    'MAP' 'WITH' map_function_specification
    ;

state_category =
    'STATE' [specific_name]
    ;

relative_function_specification =
    specific_routine_designator
    ;

map_function_specification =
    specific_routine_designator
    ;

drop_user_defined_ordering_statement =
    'DROP' 'ORDERING' 'FOR' user_defined_type drop_behavior
    ;

transform_definition =
    'CREATE' ('TRANSFORM' | 'TRANSFORMS') 'FOR' user_defined_type {transform_group}+
    ;

transform_group =
    group_name left_paren transform_element_list right_paren
    ;

group_name =
    identifier
    ;

transform_element_list =
    transform_element [comma transform_element]
    ;

transform_element =
  | to_sql
  | from_sql
    ;

to_sql =
    'TO' 'SQL' 'WITH' to_sql_function
    ;

from_sql =
    'FROM' 'SQL' 'WITH' from_sql_function
    ;

to_sql_function =
    specific_routine_designator
    ;

from_sql_function =
    specific_routine_designator
    ;

drop_transform_statement =
    'DROP' ('TRANSFORM' | 'TRANSFORMS') transforms_to_be_dropped 'FOR' user_defined_type drop_behavior
    ;

transforms_to_be_dropped =
  | 'ALL'
  | transform_group_element
    ;

transform_group_element =
    group_name
    ;

grant_statement =
  | grant_privilege_statement
  | grant_role_statement
    ;

grant_privilege_statement =
    'GRANT' privileges 'TO' grantee [{comma grantee}+] ['WITH' 'HIERARCHY' 'OPTION'] ['WITH' 'GRANT' 'OPTION'] ['GRANTED' 'BY' grantor]
    ;

role_definition =
    'CREATE' 'ROLE' role_name ['WITH' 'ADMIN' grantor]
    ;

grant_role_statement =
    'GRANT' role_granted [{comma role_granted}+] 'TO' grantee [{comma grantee}+] ['WITH' 'ADMIN' 'OPTION'] ['GRANTED' 'BY' grantor]
    ;

role_granted =
    role_name
    ;

drop_role_statement =
    'DROP' 'ROLE' role_name
    ;

revoke_statement =
  | revoke_privilege_statement
  | revoke_role_statement
    ;

revoke_privilege_statement =
    'REVOKE' [revoke_option_extension] privileges 'FROM' grantee [{comma grantee}+] ['GRANTED' 'BY' grantor] drop_behavior
    ;

revoke_option_extension =
  | 'GRANT' 'OPTION' 'FOR'
  | 'HIERARCHY' 'OPTION' 'FOR'
    ;

revoke_role_statement =
    'REVOKE' ['ADMIN' 'OPTION' 'FOR'] role_revoked [{comma role_revoked}+] 'FROM' grantee [{comma grantee}+] ['GRANTED' 'BY' grantor] drop_behavior
    ;

role_revoked =
    role_name
    ;

sql_client_module_definition =
    module_name_clause language_clause module_authorization_clause [module_path_specification] [module_transform_group_specification] [temporary_table_declaration] {module_contents}+
    ;

module_authorization_clause =
  | 'SCHEMA' schema_name
  | 'AUTHORIZATION' module_authorization_identifier
  | 'SCHEMA' schema_name 'AUTHORIZATION' module_authorization_identifier
    ;

module_authorization_identifier =
    authorization_identifier
    ;

module_path_specification =
    path_specification
    ;

module_transform_group_specification =
    transform_group_specification
    ;

module_contents =
  | declare_cursor
  | externally_invoked_procedure
    ;

module_name_clause =
    'MODULE' [sql_client_module_name] [module_character_set_specification]
    ;

module_character_set_specification =
    'NAMES' 'ARE' character_set_specification
    ;

externally_invoked_procedure =
    'PROCEDURE' procedure_name host_parameter_declaration_setup semicolon sql_procedure_statement semicolon
    ;

host_parameter_declaration_setup =
  | host_parameter_declaration_list
  | {host_parameter_declaration}+
    ;

host_parameter_declaration_list =
    left_paren host_parameter_declaration [{comma host_parameter_declaration}+] right_paren
    ;

host_parameter_declaration =
  | host_parameter_name host_parameter_data_type
  | status_parameter
    ;

host_parameter_data_type =
    data_type [locator_indication]
    ;

status_parameter =
    'SQLSTATE'
    ;

sql_procedure_statement =
    sql_executable_statement
    ;

sql_executable_statement =
  | sql_schema_statement
  | sql_data_statement
  | sql_control_statement
  | sql_transaction_statement
  | sql_connection_statement
  | sql_session_statement
  | sql_diagnostics_statement
    ;

sql_schema_statement =
  | sql_schema_definition_statement
  | sql_schema_manipulation_statement
    ;

sql_schema_definition_statement =
  | schema_definition
  | table_definition
  | view_definition
  | sql_invoked_routine
  | grant_statement
  | role_definition
  | grant_role_statement
  | domain_definition
  | character_set_definition
  | collation_definition
  | translation_definition
  | assertion_definition
  | trigger_definition
  | user_defined_type_definition
  | user_defined_cast_definition
  | user_defined_ordering_definition
  | transform_definition
    ;

sql_schema_manipulation_statement =
  | drop_schema_statement
  | alter_table_statement
  | drop_table_statement
  | drop_view_statement
  | alter_routine_statement
  | drop_routine_statement
  | drop_user_defined_cast_statement
  | revoke_statement
  | drop_role_statement
  | alter_domain_statement
  | drop_domain_statement
  | drop_character_set_statement
  | drop_collation_statement
  | drop_translation_statement
  | drop_assertion_statement
  | drop_trigger_statement
  | alter_type_statement
  | drop_data_type_statement
  | drop_user_defined_ordering_statement
  | drop_transform_statement
    ;

sql_data_statement =
  | open_statement
  | fetch_statement
  | close_statement
  | select_statement_single_row
  | free_locator_statement
  | hold_locator_statement
  | sql_data_change_statement
    ;

sql_data_change_statement =
  | delete_statement_positioned
  | delete_statement_searched
  | insert_statement
  | update_statement_positioned
  | update_statement_searched
    ;

sql_control_statement =
  | call_statement
  | return_statement
    ;

sql_transaction_statement =
  | start_transaction_statement
  | set_transaction_statement
  | set_constraints_mode_statement
  | savepoint_statement
  | release_savepoint_statement
  | commit_statement
  | rollback_statement
    ;

sql_connection_statement =
  | connect_statement
  | set_connection_statement
  | disconnect_statement
    ;

sql_session_statement =
  | set_session_user_identifier_statement
  | set_role_statement
  | set_local_time_zone_statement
  | set_session_characteristics_statement
    ;

sql_diagnostics_statement =
    get_diagnostics_statement
    ;

declare_cursor =
    'DECLARE' cursor_name [cursor_sensitivity] [cursor_scrollability] 'CURSOR' [cursor_holdability] [cursor_returnability] 'FOR' cursor_specification
    ;

cursor_sensitivity =
  | 'SENSITIVE'
  | 'INSENSITIVE'
  | 'ASENSITIVE'
    ;

cursor_scrollability =
  | 'SCROLL'
  | 'NO' 'SCROLL'
    ;

cursor_holdability =
  | 'WITH' 'HOLD'
  | 'WITHOUT' 'HOLD'
    ;

cursor_returnability =
  | 'WITH' 'RETURN'
  | 'WITHOUT' 'RETURN'
    ;

cursor_specification =
    query_expression [order_by_clause] [updatability_clause]
    ;

updatability_clause =
    'FOR' ('READ' 'ONLY' | 'UPDATE' ['OF' column_name_list])
    ;

order_by_clause =
    'ORDER' 'BY' sort_specification_list
    ;

sort_specification_list =
    sort_specification [{comma sort_specification}+]
    ;

sort_specification =
    sort_key [collate_clause] [ordering_specification]
    ;

sort_key =
    value_expression
    ;

ordering_specification =
  | 'ASC'
  | 'DESC'
    ;

open_statement =
    'OPEN' cursor_name
    ;

fetch_statement =
    'FETCH' [[fetch_orientation] 'FROM'] cursor_name 'INTO' fetch_target_list
    ;

fetch_orientation =
  | 'NEXT'
  | 'PRIOR'
  | 'FIRST'
  | 'LAST'
  | ('ABSOLUTE' | 'RELATIVE') simple_value_specification
    ;

fetch_target_list =
    target_specification [{comma target_specification}+]
    ;

close_statement =
    'CLOSE' cursor_name
    ;

select_statement_single_row =
    'SELECT' [set_quantifier] select_list 'INTO' select_target_list table_expression
    ;

select_target_list =
    target_specification [{comma target_specification}+]
    ;

delete_statement_searched =
    'DELETE' 'FROM' target_table ['WHERE' search_condition]
    ;

insert_statement =
    'INSERT' 'INTO' insertion_target insert_columns_and_source
    ;

insertion_target =
    table_name
    ;

insert_columns_and_source =
  | from_subquery
  | from_constructor
  | from_default
    ;

from_subquery =
    [left_paren insert_column_list right_paren] [override_clause] query_expression
    ;

from_constructor =
    [left_paren insert_column_list right_paren] [override_clause] contextually_typed_table_value_constructor
    ;

override_clause =
  | 'OVERRIDING' 'USER' 'VALUE'
  | 'OVERRIDING' 'SYSTEM' 'VALUE'
    ;

from_default =
    'DEFAULT' 'VALUES'
    ;

insert_column_list =
    column_name_list
    ;

update_statement_positioned =
    'UPDATE' target_table 'SET' set_clause_list 'WHERE' 'CURRENT' 'OF' cursor_name
    ;

set_clause_list =
    set_clause [{comma set_clause}+]
    ;

set_clause =
  | update_target equals_operator update_source
  | mutated_set_clause equals_operator update_source
    ;

update_target =
  | object_column
  | 'ROW'
  | object_column left_bracket_or_trigraph simple_value_specification right_bracket_or_trigraph
    ;

object_column =
    column_name
    ;

mutated_set_clause =
    mutated_target period method_name
    ;

mutated_target =
  | object_column
  | mutated_set_clause
    ;

update_source =
  | value_expression
  | contextually_typed_value_specification
    ;

update_statement_searched =
    'UPDATE' target_table 'SET' set_clause_list ['WHERE' search_condition]
    ;

temporary_table_declaration =
    'DECLARE' 'LOCAL' 'TEMPORARY' 'TABLE' table_name table_element_list ['ON' 'COMMIT' table_commit_action 'ROWS']
    ;

free_locator_statement =
    'FREE' 'LOCATOR' locator_reference [{comma locator_reference}+]
    ;

locator_reference =
    host_parameter_name
    ;

hold_locator_statement =
    'HOLD' 'LOCATOR' locator_reference [{comma locator_reference}+]
    ;

call_statement =
    'CALL' routine_invocation
    ;

return_statement =
    'RETURN' return_value
    ;

return_value =
  | value_expression
  | 'NULL'
    ;

start_transaction_statement =
    'START' 'TRANSACTION' transaction_mode [{comma transaction_mode}+]
    ;

transaction_mode =
  | isolation_level
  | transaction_access_mode
  | diagnostics_size
    ;

transaction_access_mode =
  | 'READ' 'ONLY'
  | 'READ' 'WRITE'
    ;

isolation_level =
    'ISOLATION' 'LEVEL' level_of_isolation
    ;

level_of_isolation =
  | 'READ' 'UNCOMMITTED'
  | 'READ' 'COMMITTED'
  | 'REPEATABLE' 'READ'
  | 'SERIALIZABLE'
    ;

diagnostics_size =
    'DIAGNOSTICS' 'SIZE' number_of_conditions
    ;

number_of_conditions =
    simple_value_specification
    ;

set_transaction_statement =
    'SET' ['LOCAL'] transaction_characteristics
    ;

transaction_characteristics =
    'TRANSACTION' transaction_mode [{comma transaction_mode}+]
    ;

set_constraints_mode_statement =
    'SET' 'CONSTRAINTS' constraint_name_list ('DEFERRED' | 'IMMEDIATE')
    ;

constraint_name_list =
  | 'ALL'
  | constraint_name [{comma constraint_name}+]
    ;

savepoint_statement =
    'SAVEPOINT' savepoint_specifier
    ;

savepoint_specifier =
  | savepoint_name
  | simple_target_specification
    ;

release_savepoint_statement =
    'RELEASE' 'SAVEPOINT' savepoint_specifier
    ;

commit_statement =
    'COMMIT' ['WORK'] ['AND' ['NO'] 'CHAIN']
    ;

rollback_statement =
    'ROLLBACK' ['WORK'] ['AND' ['NO'] 'CHAIN'] [savepoint_clause]
    ;

savepoint_clause =
    'TO' 'SAVEPOINT' savepoint_specifier
    ;

connect_statement =
    'CONNECT' 'TO' connection_target
    ;

connection_target =
  | sql_server_name ['AS' connection_name] ['USER' connection_user_name]
  | 'DEFAULT'
    ;

set_connection_statement =
    'SET' 'CONNECTION' connection_object
    ;

connection_object =
  | 'DEFAULT'
  | connection_name
    ;

disconnect_statement =
    'DISCONNECT' disconnect_object
    ;

disconnect_object =
  | connection_object
  | 'ALL'
  | 'CURRENT'
    ;

set_session_characteristics_statement =
    'SET' 'SESSION' 'CHARACTERISTICS' 'AS' session_characteristic_list
    ;

session_characteristic_list =
    session_characteristic [{comma session_characteristic}+]
    ;

session_characteristic =
    transaction_characteristics
    ;

set_session_user_identifier_statement =
    'SET' 'SESSION' 'AUTHORIZATION' value_specification
    ;

set_role_statement =
    'SET' 'ROLE' role_specification
    ;

role_specification =
  | value_specification
  | 'NONE'
    ;

set_local_time_zone_statement =
    'SET' 'TIME' 'ZONE' set_time_zone_value
    ;

set_time_zone_value =
  | interval_value_expression
  | 'LOCAL'
    ;

get_diagnostics_statement =
    'GET' 'DIAGNOSTICS' sql_diagnostics_information
    ;

sql_diagnostics_information =
  | statement_information
  | condition_information
    ;

statement_information =
    statement_information_item [{comma statement_information_item}+]
    ;

statement_information_item =
    simple_target_specification equals_operator statement_information_item_name
    ;

statement_information_item_name =
  | 'NUMBER'
  | 'MORE'
  | 'COMMAND_FUNCTION'
  | 'COMMAND_FUNCTION_CODE'
  | 'ROW_COUNT'
  | 'TRANSACTIONS_COMMITTED'
  | 'TRANSACTIONS_ROLLED_BACK'
  | 'TRANSACTION_ACTIVE'
    ;

condition_information =
    'EXCEPTION' condition_number condition_information_item [{comma condition_information_item}+]
    ;

condition_information_item =
    simple_target_specification equals_operator condition_information_item_name
    ;

condition_information_item_name =
  | 'CATALOG_NAME'
  | 'CLASS_ORIGIN'
  | 'COLUMN_NAME'
  | 'CONDITION_NUMBER'
  | 'CONNECTION_NAME'
  | 'CONSTRAINT_CATALOG'
  | 'CONSTRAINT_NAME'
  | 'CONSTRAINT_SCHEMA'
  | 'CURSOR_NAME'
  | 'MESSAGE_LENGTH'
  | 'MESSAGE_OCTET_LENGTH'
  | 'MESSAGE_TEXT'
  | 'PARAMETER_MODE'
  | 'PARAMETER_NAME'
  | 'PARAMETER_ORDINAL_POSITION'
  | 'RETURNED_SQLSTATE'
  | 'ROUTINE_CATALOG'
  | 'ROUTINE_NAME'
  | 'ROUTINE_SCHEMA'
  | 'SCHEMA_NAME'
  | 'SERVER_NAME'
  | 'SPECIFIC_NAME'
  | 'SUBCLASS_ORIGIN'
  | 'TABLE_NAME'
  | 'TRIGGER_CATALOG'
  | 'TRIGGER_NAME'
  | 'TRIGGER_SCHEMA'
    ;

condition_number =
    simple_value_specification
    ;
