# The MIT License (MIT)
# Copyright (c) 2016, Victor M. Uriarte
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

@@grammar :: Sql
@@ignorecase :: True
@@whitespace :: /[\s]+/
@@eol_comments :: /--.*?$/


start =
        direct_sql_statement
        ;

SPACE =
        /\s/
        ;

REGULAR_IDENTIFIER =
        IDENTIFIER_BODY
        ;

IDENTIFIER_BODY =
        /[A-Za-z]\w*/
        ;

unsigned_numeric_literal =
        exact_numeric_literal
    |   approximate_numeric_literal
        ;

exact_numeric_literal =
        INTEGER ['.' [INTEGER]]
    |   '.' INTEGER
        ;

INTEGER =
        /\d+/
        ;

approximate_numeric_literal =
        mantissa 'E' exponent
        ;

mantissa =
        exact_numeric_literal
        ;

exponent =
        signed_integer
        ;

signed_integer =
        [sign] INTEGER
        ;

sign =
        '+'
    |   '-'
        ;

national_character_string_literal =
        'N' "'" [{character_representation}+ ] "'" [{{separator}+  "'" [{character_representation}+ ] "'"}+ ]
        ;

character_representation =
        /[A-Za-z]/
    |   "''"
        ;

separator =
        {SPACE}*
        ;

bit_string_literal =
        'B' "'" [{bit}] "'" [{{separator}+  "'" [{bit}] "'"}+ ]
        ;

bit =
        /[01]+/
        ;

hex_string_literal =
        'X' "'" [{hexit}] "'" [{{separator}+  "'" [{hexit}] "'"}+ ]
        ;

hexit =
        /[\dA-Fa-f]+/
        ;

character_string_literal =
        ['_' character_set_name] "'" [{character_representation}+ ] "'" [{{separator}+  "'" [{character_representation}+ ] "'"}+ ]
        ;

character_set_name =
        [schema_name '.'] IDENTIFIER_BODY
        ;

schema_name =
        [catalog_name '.'] unqualified_schema_name
        ;

catalog_name =
        IDENTIFIER
        ;

IDENTIFIER =
        ['_' character_set_name] actual_IDENTIFIER
        ;

actual_IDENTIFIER =
        REGULAR_IDENTIFIER
    |   delimited_IDENTIFIER
        ;

delimited_IDENTIFIER =
        '"' delimited_IDENTIFIER_BODY '"'
        ;

delimited_IDENTIFIER_BODY =
        {delimited_IDENTIFIER_PART}+
        ;

delimited_IDENTIFIER_PART =
        /[A-Za-z]/
    |   '""'
        ;

unqualified_schema_name =
        IDENTIFIER
        ;

date_string =
        "'" date_value "'"
        ;

date_value =
        years_value '-' months_value '-' days_value
        ;

years_value =
        datetime_value
        ;

datetime_value =
        INTEGER
        ;

months_value =
        datetime_value
        ;

days_value =
        datetime_value
        ;

time_string =
        "'" time_value [time_zone_interval] "'"
        ;

time_value =
        hours_value ':' minutes_value ':' seconds_value
        ;

hours_value =
        datetime_value
        ;

minutes_value =
        datetime_value
        ;

seconds_value =
        seconds_integer_value ['.' [seconds_fraction]]
        ;

seconds_integer_value =
        INTEGER
        ;

seconds_fraction =
        INTEGER
        ;

time_zone_interval =
        sign hours_value ':' minutes_value
        ;

timestamp_string =
        "'" date_value SPACE time_value [time_zone_interval] "'"
        ;

interval_string =
        "'" {year_month_literal | day_time_literal} "'"
        ;

year_month_literal =
        years_value
    |   [years_value '-'] months_value
        ;

day_time_literal =
        day_time_interval
    |   time_interval
        ;

day_time_interval =
        days_value [SPACE hours_value [':' minutes_value [':' seconds_value]]]
        ;

time_interval =
        hours_value [':' minutes_value [':' seconds_value]]
    |   minutes_value [':' seconds_value]
    |   seconds_value
        ;

authorization_IDENTIFIER =
        IDENTIFIER
        ;

temporary_table_declaration =
        'DECLARE' 'LOCAL' 'TEMPORARY' 'TABLE' qualified_local_table_name table_element_list ['ON' 'COMMIT' {'PRESERVE' | 'DELETE'} 'ROWS']
        ;

qualified_local_table_name =
        'MODULE' '.' local_table_name
        ;

local_table_name =
        qualified_IDENTIFIER
        ;

qualified_IDENTIFIER =
        IDENTIFIER
        ;

table_element_list =
        '(' table_element [{',' table_element}+ ] ')'
        ;

table_element =
        column_definition
    |   table_constraint_definition
        ;

column_definition =
        column_name {data_type | domain_name} [default_clause] [{column_constraint_definition}+ ] [collate_clause]
        ;

column_name =
        IDENTIFIER
        ;

data_type =
        character_string_type ['CHARACTER' 'SET' character_set_name]
    |   national_character_string_type
    |   bit_string_type
    |   numeric_type
    |   datetime_type
    |   interval_type
        ;

character_string_type =
        'CHARACTER' ['(' length ')']
    |   'CHAR' ['(' length ')']
    |   'CHARACTER' 'VARYING' ['(' length ')']
    |   'CHAR' 'VARYING' ['(' length ')']
    |   'VARCHAR' ['(' length ')']
        ;

length =
        INTEGER
        ;

national_character_string_type =
        'NATIONAL' 'CHARACTER' ['(' length ')']
    |   'NATIONAL' 'CHAR' ['(' length ')']
    |   'NCHAR' ['(' length ')']
    |   'NATIONAL' 'CHARACTER' 'VARYING' ['(' length ')']
    |   'NATIONAL' 'CHAR' 'VARYING' ['(' length ')']
    |   'NCHAR' 'VARYING' ['(' length ')']
        ;

bit_string_type =
        'BIT' ['(' length ')']
    |   'BIT' 'VARYING' ['(' length ')']
        ;

numeric_type =
        exact_numeric_type
    |   approximate_numeric_type
        ;

exact_numeric_type =
        'NUMERIC' ['(' precision [',' scale] ')']
    |   'DECIMAL' ['(' precision [',' scale] ')']
    |   'DEC' ['(' precision [',' scale] ')']
    |   'INTEGER'
    |   'INT'
    |   'SMALLINT'
        ;

precision =
        INTEGER
        ;

scale =
        INTEGER
        ;

approximate_numeric_type =
        'FLOAT' ['(' precision ')']
    |   'REAL'
    |   'DOUBLE' 'PRECISION'
        ;

datetime_type =
        'DATE'
    |   'TIME' ['(' time_precision ')'] ['WITH' 'TIME' 'ZONE']
    |   'TIMESTAMP' ['(' timestamp_precision ')'] ['WITH' 'TIME' 'ZONE']
        ;

time_precision =
        time_fractional_seconds_precision
        ;

time_fractional_seconds_precision =
        INTEGER
        ;

timestamp_precision =
        time_fractional_seconds_precision
        ;

interval_type =
        'INTERVAL' interval_qualifier
        ;

interval_qualifier =
        start_field 'TO' end_field
    |   single_datetime_field
        ;

start_field =
        non_second_datetime_field ['(' interval_leading_field_precision ')']
        ;

non_second_datetime_field =
        'YEAR'
    |   'MONTH'
    |   'DAY'
    |   'HOUR'
    |   'MINUTE'
        ;

interval_leading_field_precision =
        INTEGER
        ;

end_field =
        non_second_datetime_field
    |   'SECOND' ['(' interval_fractional_seconds_precision ')']
        ;

interval_fractional_seconds_precision =
        INTEGER
        ;

single_datetime_field =
        non_second_datetime_field ['(' interval_leading_field_precision ')']
    |   'SECOND' ['(' interval_leading_field_precision [',' '(' interval_fractional_seconds_precision] ')']
        ;

domain_name =
        qualified_name
        ;

qualified_name =
        [schema_name '.'] qualified_IDENTIFIER
        ;

default_clause =
        'DEFAULT' default_option
        ;

default_option =
        literal
    |   datetime_value_function
    |   'USER'
    |   'CURRENT_USER'
    |   'SESSION_USER'
    |   'SYSTEM_USER'
    |   'NULL'
        ;

literal =
        signed_numeric_literal
    |   general_literal
        ;

signed_numeric_literal =
        [sign] unsigned_numeric_literal
        ;

general_literal =
        character_string_literal
    |   national_character_string_literal
    |   bit_string_literal
    |   hex_string_literal
    |   datetime_literal
    |   interval_literal
        ;

datetime_literal =
        date_literal
    |   time_literal
    |   timestamp_literal
        ;

date_literal =
        'DATE' date_string
        ;

time_literal =
        'TIME' time_string
        ;

timestamp_literal =
        'TIMESTAMP' timestamp_string
        ;

interval_literal =
        'INTERVAL' [sign] interval_string interval_qualifier
        ;

datetime_value_function =
        current_date_value_function
    |   current_time_value_function
    |   current_timestamp_value_function
        ;

current_date_value_function =
        'CURRENT_DATE'
        ;

current_time_value_function =
        'CURRENT_TIME' ['(' time_precision ')']
        ;

current_timestamp_value_function =
        'CURRENT_TIMESTAMP' ['(' timestamp_precision ')']
        ;

column_constraint_definition =
        [constraint_name_definition] column_constraint [constraint_attributes]
        ;

constraint_name_definition =
        'CONSTRAINT' constraint_name
        ;

constraint_name =
        qualified_name
        ;

column_constraint =
        'NOT' 'NULL'
    |   unique_specification
    |   references_specification
    |   check_constraint_definition
        ;

unique_specification =
        'UNIQUE'
    |   'PRIMARY' 'KEY'
        ;

references_specification =
        'REFERENCES' referenced_table_and_columns ['MATCH' match_type] [referential_triggered_action]
        ;

referenced_table_and_columns =
        table_name ['(' reference_column_list ')']
        ;

table_name =
        qualified_name
    |   qualified_local_table_name
        ;

reference_column_list =
        column_name_list
        ;

column_name_list =
        column_name [{',' column_name}+ ]
        ;

match_type =
        'FULL'
    |   'PARTIAL'
        ;

referential_triggered_action =
        update_rule [delete_rule]
    |   delete_rule [update_rule]
        ;

update_rule =
        'ON' 'UPDATE' referential_action
        ;

referential_action =
        'CASCADE'
    |   'SET' 'NULL'
    |   'SET' 'DEFAULT'
    |   'NO' 'ACTION'
        ;

delete_rule =
        'ON' 'DELETE' referential_action
        ;

check_constraint_definition =
        'CHECK' '(' search_condition ')'
        ;

search_condition =
        boolean_term
    |   search_condition 'OR' boolean_term
        ;

boolean_term =
        boolean_factor
    |   boolean_term 'AND' boolean_factor
        ;

boolean_factor =
        ['NOT'] boolean_test
        ;

boolean_test =
        boolean_primary ['IS' ['NOT'] truth_value]
        ;

boolean_primary =
        predicate
    |   '(' search_condition ')'
        ;

predicate =
        comparison_predicate
    |   between_predicate
    |   in_predicate
    |   like_predicate
    |   null_predicate
    |   quantified_comparison_predicate
    |   exists_predicate
    |   match_predicate
    |   overlaps_predicate
        ;

comparison_predicate =
        row_value_constructor comp_op row_value_constructor
        ;

row_value_constructor =
        row_value_constructor_element
    |   '(' row_value_constructor_list ')'
    |   row_subquery
        ;

row_value_constructor_element =
        value_expression
    |   null_specification
    |   default_specification
        ;

value_expression =
        numeric_value_expression
    |   string_value_expression
    |   datetime_value_expression
    |   interval_value_expression
        ;

numeric_value_expression =
        term
    |   numeric_value_expression '+' term
    |   numeric_value_expression '-' term
        ;

term =
        factor
    |   term '*' factor
    |   term '/' factor
        ;

factor =
        [sign] numeric_primary
        ;

numeric_primary =
        value_expression_primary
    |   numeric_value_function
        ;

value_expression_primary =
        unsigned_value_specification
    |   column_reference
    |   set_function_specification
    |   scalar_subquery
    |   case_expression
    |   '(' value_expression ')'
    |   cast_specification
        ;

unsigned_value_specification =
        unsigned_literal
    |   general_value_specification
        ;

unsigned_literal =
        unsigned_numeric_literal
    |   general_literal
        ;

general_value_specification =
        parameter_specification
    |   dynamic_parameter_specification
    |   'USER'
    |   'CURRENT_USER'
    |   'SESSION_USER'
    |   'SYSTEM_USER'
    |   'VALUE'
        ;

parameter_specification =
        parameter_name [indicator_parameter]
        ;

parameter_name =
        ':' IDENTIFIER
        ;

indicator_parameter =
        ['INDICATOR'] parameter_name
        ;

dynamic_parameter_specification =
        '?'
        ;

column_reference =
        [qualifier '.'] column_name
        ;

qualifier =
        table_name
    |   correlation_name
        ;

correlation_name =
        IDENTIFIER
        ;

set_function_specification =
        'COUNT' '(' '*' ')'
    |   general_set_function
        ;

general_set_function =
        set_function_type '(' [set_quantifier] value_expression ')'
        ;

set_function_type =
        'AVG'
    |   'MAX'
    |   'MIN'
    |   'SUM'
    |   'COUNT'
        ;

set_quantifier =
        'DISTINCT'
    |   'ALL'
        ;

scalar_subquery =
        subquery
        ;

subquery =
        '(' query_expression ')'
        ;

query_expression =
        non_join_query_expression
    |   joined_table
        ;

non_join_query_expression =
        non_join_query_term
    |   query_expression 'UNION' ['ALL'] [corresponding_spec] query_term
    |   query_expression 'EXCEPT' ['ALL'] [corresponding_spec] query_term
        ;

non_join_query_term =
        non_join_query_primary
    |   query_term 'INTERSECT' ['ALL'] [corresponding_spec] query_primary
        ;

non_join_query_primary =
        simple_table
    |   '(' non_join_query_expression ')'
        ;

simple_table =
        query_specification
    |   table_value_constructor
    |   explicit_table
        ;

query_specification =
        'SELECT' [set_quantifier] select_list table_expression
        ;

select_list =
        '*'
    |   select_sublist [{',' select_sublist}+ ]
        ;

select_sublist =
        derived_column
    |   qualifier '.' '*'
        ;

derived_column =
        value_expression [as_clause]
        ;

as_clause =
        ['AS'] column_name
        ;

table_expression =
        from_clause
            [where_clause]
            [group_by_clause]
            [having_clause]
        ;

from_clause =
        'FROM' table_reference [{',' table_reference}+ ]
        ;

table_reference =
        table_name [correlation_specification]
    |   derived_table correlation_specification
    |   joined_table
        ;

correlation_specification =
        ['AS'] correlation_name ['(' derived_column_list ')']
        ;

derived_column_list =
        column_name_list
        ;

derived_table =
        table_subquery
        ;

table_subquery =
        subquery
        ;

joined_table =
        cross_join
    |   qualified_join
    |   '(' joined_table ')'
        ;

cross_join =
        table_reference 'CROSS' 'JOIN' table_reference
        ;

qualified_join =
        table_reference ['NATURAL'] [join_type] 'JOIN' table_reference [join_specification]
        ;

join_type =
        'INNER'
    |   outer_join_type ['OUTER']
    |   'UNION'
        ;

outer_join_type =
        'LEFT'
    |   'RIGHT'
    |   'FULL'
        ;

join_specification =
        join_condition
    |   named_columns_join
        ;

join_condition =
        'ON' search_condition
        ;

named_columns_join =
        'USING' '(' join_column_list ')'
        ;

join_column_list =
        column_name_list
        ;

where_clause =
        'WHERE' search_condition
        ;

group_by_clause =
        'GROUP' 'BY' grouping_column_reference_list
        ;

grouping_column_reference_list =
        grouping_column_reference [{',' grouping_column_reference}+ ]
        ;

grouping_column_reference =
        column_reference [collate_clause]
        ;

collate_clause =
        'COLLATE' collation_name
        ;

collation_name =
        qualified_name
        ;

having_clause =
        'HAVING' search_condition
        ;

table_value_constructor =
        'VALUES' table_value_constructor_list
        ;

table_value_constructor_list =
        row_value_constructor [{',' row_value_constructor}+ ]
        ;

explicit_table =
        'TABLE' table_name
        ;

query_term =
        non_join_query_term
    |   joined_table
        ;

corresponding_spec =
        'CORRESPONDING' ['BY' '(' corresponding_column_list ')']
        ;

corresponding_column_list =
        column_name_list
        ;

query_primary =
        non_join_query_primary
    |   joined_table
        ;

case_expression =
        case_abbreviation
    |   case_specification
        ;

case_abbreviation =
        'NULLIF' '(' value_expression ',' value_expression ')'
    |   'COALESCE' '(' value_expression {',' value_expression}+ ')'
        ;

case_specification =
        simple_case
    |   searched_case
        ;

simple_case =
        'CASE' case_operand
            {simple_when_clause}+
            [else_clause]
            'END'
        ;

case_operand =
        value_expression
        ;

simple_when_clause =
        'WHEN' when_operand 'THEN' result
        ;

when_operand =
        value_expression
        ;

result =
        result_expression
    |   'NULL'
        ;

result_expression =
        value_expression
        ;

else_clause =
        'ELSE' result
        ;

searched_case =
        'CASE'
            {searched_when_clause}+
            [else_clause]
            'END'
        ;

searched_when_clause =
        'WHEN' search_condition 'THEN' result
        ;

cast_specification =
        'CAST' '(' cast_operand 'AS' cast_target ')'
        ;

cast_operand =
        value_expression
    |   'NULL'
        ;

cast_target =
        domain_name
    |   data_type
        ;

numeric_value_function =
        position_expression
    |   extract_expression
    |   length_expression
        ;

position_expression =
        'POSITION' '(' character_value_expression 'IN' character_value_expression ')'
        ;

character_value_expression =
        concatenation
    |   character_factor
        ;

concatenation =
        character_value_expression '||' character_factor
        ;

character_factor =
        character_primary [collate_clause]
        ;

character_primary =
        value_expression_primary
    |   string_value_function
        ;

string_value_function =
        character_value_function
    |   bit_value_function
        ;

character_value_function =
        character_substring_function
    |   fold
    |   form_of_use_conversion
    |   character_translation
    |   trim_function
        ;

character_substring_function =
        'SUBSTRING' '(' character_value_expression 'FROM' start_position ['FOR' string_length] ')'
        ;

start_position =
        numeric_value_expression
        ;

string_length =
        numeric_value_expression
        ;

fold =
        {'UPPER' | 'LOWER'} '(' character_value_expression ')'
        ;

form_of_use_conversion =
        'CONVERT' '(' character_value_expression 'USING' form_of_use_conversion_name ')'
        ;

form_of_use_conversion_name =
        qualified_name
        ;

character_translation =
        'TRANSLATE' '(' character_value_expression 'USING' translation_name ')'
        ;

translation_name =
        qualified_name
        ;

trim_function =
        'TRIM' '(' trim_operands ')'
        ;

trim_operands =
        [[trim_specification] [trim_character] 'FROM'] trim_source
        ;

trim_specification =
        'LEADING'
    |   'TRAILING'
    |   'BOTH'
        ;

trim_character =
        character_value_expression
        ;

trim_source =
        character_value_expression
        ;

bit_value_function =
        bit_substring_function
        ;

bit_substring_function =
        'SUBSTRING' '(' bit_value_expression 'FROM' start_position ['FOR' string_length] ')'
        ;

bit_value_expression =
        bit_concatenation
    |   bit_factor
        ;

bit_concatenation =
        bit_value_expression '||' bit_factor
        ;

bit_factor =
        bit_primary
        ;

bit_primary =
        value_expression_primary
    |   string_value_function
        ;

extract_expression =
        'EXTRACT' '(' extract_field 'FROM' extract_source ')'
        ;

extract_field =
        datetime_field
    |   time_zone_field
        ;

datetime_field =
        non_second_datetime_field
    |   'SECOND'
        ;

time_zone_field =
        'TIMEZONE_HOUR'
    |   'TIMEZONE_MINUTE'
        ;

extract_source =
        datetime_value_expression
    |   interval_value_expression
        ;

datetime_value_expression =
        datetime_term
    |   interval_value_expression '+' datetime_term
    |   datetime_value_expression '+' interval_term
    |   datetime_value_expression '-' interval_term
        ;

interval_term =
        interval_factor
    |   interval_term_2 '*' factor
    |   interval_term_2 '/' factor
    |   term '*' interval_factor
        ;

interval_factor =
        [sign] interval_primary
        ;

interval_primary =
        value_expression_primary [interval_qualifier]
        ;

interval_term_2 =
        interval_term
        ;

interval_value_expression =
        interval_term
    |   interval_value_expression_1 '+' interval_term_1
    |   interval_value_expression_1 '-' interval_term_1
    |   '(' datetime_value_expression '-' datetime_term ')' interval_qualifier
        ;

interval_value_expression_1 =
        interval_value_expression
        ;

interval_term_1 =
        interval_term
        ;

datetime_term =
        datetime_factor
        ;

datetime_factor =
        datetime_primary [time_zone]
        ;

datetime_primary =
        value_expression_primary
    |   datetime_value_function
        ;

time_zone =
        'AT' time_zone_specifier
        ;

time_zone_specifier =
        'LOCAL'
    |   'TIME' 'ZONE' interval_value_expression
        ;

length_expression =
        char_length_expression
    |   octet_length_expression
    |   bit_length_expression
        ;

char_length_expression =
        {'CHAR_LENGTH' | 'CHARACTER_LENGTH'} '(' string_value_expression ')'
        ;

string_value_expression =
        character_value_expression
    |   bit_value_expression
        ;

octet_length_expression =
        'OCTET_LENGTH' '(' string_value_expression ')'
        ;

bit_length_expression =
        'BIT_LENGTH' '(' string_value_expression ')'
        ;

null_specification =
        'NULL'
        ;

default_specification =
        'DEFAULT'
        ;

row_value_constructor_list =
        row_value_constructor_element [{',' row_value_constructor_element}+ ]
        ;

row_subquery =
        subquery
        ;

comp_op =
        '='
    |   '<>'
    |   '<'
    |   '>'
    |   '<='
    |   '>='
        ;

between_predicate =
        row_value_constructor ['NOT'] 'BETWEEN' row_value_constructor 'AND' row_value_constructor
        ;

in_predicate =
        row_value_constructor ['NOT'] 'IN' in_predicate_value
        ;

in_predicate_value =
        table_subquery
    |   '(' in_value_list ')'
        ;

in_value_list =
        value_expression {',' value_expression}+
        ;

like_predicate =
        match_value ['NOT'] 'LIKE' pattern ['ESCAPE' escape_character]
        ;

match_value =
        character_value_expression
        ;

pattern =
        character_value_expression
        ;

escape_character =
        character_value_expression
        ;

null_predicate =
        'IS' ['NOT'] 'NULL'
        ;

quantified_comparison_predicate =
        row_value_constructor comp_op quantifier table_subquery
        ;

quantifier =
        all
    |   some
        ;

all =
        'ALL'
        ;

some =
        'SOME'
    |   'ANY'
        ;

exists_predicate =
        'EXISTS' table_subquery
        ;

match_predicate =
        row_value_constructor 'MATCH' ['UNIQUE'] ['PARTIAL' | 'FULL'] table_subquery
        ;

overlaps_predicate =
        row_value_constructor_1 'OVERLAPS' row_value_constructor_2
        ;

row_value_constructor_1 =
        row_value_constructor
        ;

row_value_constructor_2 =
        row_value_constructor
        ;

truth_value =
        'TRUE'
    |   'FALSE'
    |   'UNKNOWN'
        ;

constraint_attributes =
        constraint_check_time [['NOT'] 'DEFERRABLE']
    |   ['NOT'] 'DEFERRABLE' [constraint_check_time]
        ;

constraint_check_time =
        'INITIALLY' 'DEFERRED'
    |   'INITIALLY' 'IMMEDIATE'
        ;

table_constraint_definition =
        [constraint_name_definition] table_constraint [constraint_check_time]
        ;

table_constraint =
        unique_constraint_definition
    |   referential_constraint_definition
    |   check_constraint_definition
        ;

unique_constraint_definition =
        unique_specification '(' unique_column_list ')'
        ;

unique_column_list =
        column_name_list
        ;

referential_constraint_definition =
        'FOREIGN' 'KEY' '(' referencing_columns ')' references_specification
        ;

referencing_columns =
        reference_column_list
        ;

order_by_clause =
        'ORDER' 'BY' sort_specification_list
        ;

sort_specification_list =
        sort_specification [{',' sort_specification}+ ]
        ;

sort_specification =
        sort_key [collate_clause] [ordering_specification]
        ;

sort_key =
        column_name
    |   INTEGER
        ;

ordering_specification =
        'ASC'
    |   'DESC'
        ;

sql_schema_statement =
        sql_schema_definition_statement
    |   sql_schema_manipulation_statement
        ;

sql_schema_definition_statement =
        schema_definition
    |   table_definition
    |   view_definition
    |   grant_statement
    |   domain_definition
    |   character_set_definition
    |   collation_definition
    |   translation_definition
    |   assertion_definition
        ;

schema_definition =
        'CREATE' 'SCHEMA' schema_name_clause
            [schema_character_set_specification]
            [{schema_element}+ ]
        ;

schema_name_clause =
        schema_name
    |   'AUTHORIZATION' schema_authorization_IDENTIFIER
    |   schema_name 'AUTHORIZATION' schema_authorization_IDENTIFIER
        ;

schema_authorization_IDENTIFIER =
        authorization_IDENTIFIER
        ;

schema_character_set_specification =
        'DEFAULT' 'CHARACTER' 'SET' character_set_name
        ;

schema_element =
        domain_definition
    |   table_definition
    |   view_definition
    |   grant_statement
    |   assertion_definition
    |   character_set_definition
    |   collation_definition
    |   translation_definition
        ;

domain_definition =
        'CREATE' 'DOMAIN' domain_name ['AS'] data_type
            [default_clause] [domain_constraint] [collate_clause]
        ;

domain_constraint =
        [constraint_name_definition] check_constraint_definition [constraint_attributes]
        ;

table_definition =
        'CREATE' [{'GLOBAL' | 'LOCAL'} 'TEMPORARY'] 'TABLE' table_name table_element_list ['ON' 'COMMIT' {'DELETE' | 'PRESERVE'} 'ROWS']
        ;

view_definition =
        'CREATE' 'VIEW' table_name ['(' view_column_list ')']
            'AS' query_expression ['WITH' [levels_clause] 'CHECK' 'OPTION']
        ;

view_column_list =
        column_name_list
        ;

levels_clause =
        'CASCADED'
    |   'LOCAL'
        ;

grant_statement =
        'GRANT' privileges 'ON' object_name 'TO' grantee [{',' grantee}+ ] ['WITH' 'GRANT' 'OPTION']
        ;

privileges =
        'ALL' 'PRIVILEGES'
    |   action_list
        ;

action_list =
        action [{',' action}+ ]
        ;

action =
        'SELECT'
    |   'DELETE'
    |   'INSERT' ['(' privilege_column_list ')']
    |   'UPDATE' ['(' privilege_column_list ')']
    |   'REFERENCES' ['(' privilege_column_list ')']
    |   'USAGE'
        ;

privilege_column_list =
        column_name_list
        ;

object_name =
        ['TABLE'] table_name
    |   'DOMAIN' domain_name
    |   'COLLATION' collation_name
    |   'CHARACTER' 'SET' character_set_name
    |   'TRANSLATION' translation_name
        ;

grantee =
        'PUBLIC'
    |   authorization_IDENTIFIER
        ;

assertion_definition =
        'CREATE' 'ASSERTION' constraint_name assertion_check [constraint_attributes]
        ;

assertion_check =
        'CHECK' '(' search_condition ')'
        ;

character_set_definition =
        'CREATE' 'CHARACTER' 'SET' character_set_name ['AS'] character_set_source
            [collate_clause | limited_collation_definition]
        ;

character_set_source =
        'GET' character_set_name
        ;

limited_collation_definition =
        'COLLATION' 'FROM' collation_source
        ;

collation_source =
        collating_sequence_definition
    |   translation_collation
        ;

collating_sequence_definition =
        external_collation
    |   schema_collation_name
    |   'DESC' '(' collation_name ')'
    |   'DEFAULT'
        ;

external_collation =
        'EXTERNAL' '(' "'" external_collation_name "'" ')'
        ;

external_collation_name =
        standard_collation_name
    |   implementation_defined_collation_name
        ;

standard_collation_name =
        collation_name
        ;

implementation_defined_collation_name =
        collation_name
        ;

schema_collation_name =
        collation_name
        ;

translation_collation =
        'TRANSLATION' translation_name ['THEN' 'COLLATION' collation_name]
        ;

collation_definition =
        'CREATE' 'COLLATION' collation_name 'FOR' character_set_name
            'FROM' collation_source [pad_attribute]
        ;

pad_attribute =
        'NO' 'PAD'
    |   'PAD' 'SPACE'
        ;

translation_definition =
        'CREATE' 'TRANSLATION' translation_name
            'FOR' character_set_name
            'TO' character_set_name
            'FROM' translation_source
        ;

translation_source =
        translation_specification
        ;

translation_specification =
        external_translation
    |   'IDENTITY'
    |   schema_translation_name
        ;

external_translation =
        'EXTERNAL' '(' "'" external_translation_name "'" ')'
        ;

external_translation_name =
        standard_translation_name
    |   implementation_defined_translation_name
        ;

standard_translation_name =
        translation_name
        ;

implementation_defined_translation_name =
        translation_name
        ;

schema_translation_name =
        translation_name
        ;

sql_schema_manipulation_statement =
        drop_schema_statement
    |   alter_table_statement
    |   drop_table_statement
    |   drop_view_statement
    |   revoke_statement
    |   alter_domain_statement
    |   drop_domain_statement
    |   drop_character_set_statement
    |   drop_collation_statement
    |   drop_translation_statement
    |   drop_assertion_statement
        ;

drop_schema_statement =
        'DROP' 'SCHEMA' schema_name drop_behaviour
        ;

drop_behaviour =
        'CASCADE'
    |   'RESTRICT'
        ;

alter_table_statement =
        'ALTER' 'TABLE' table_name alter_table_action
        ;

alter_table_action =
        add_column_definition
    |   alter_column_definition
    |   drop_column_definition
    |   add_table_constraint_definition
    |   drop_table_constraint_definition
        ;

add_column_definition =
        'ADD' ['COLUMN'] column_definition
        ;

alter_column_definition =
        'ALTER' ['COLUMN'] column_name alter_column_action
        ;

alter_column_action =
        set_column_default_clause
    |   drop_column_default_clause
        ;

set_column_default_clause =
        'SET' default_clause
        ;

drop_column_default_clause =
        'DROP' 'DEFAULT'
        ;

drop_column_definition =
        'DROP' ['COLUMN'] column_name drop_behaviour
        ;

add_table_constraint_definition =
        'ADD' table_constraint_definition
        ;

drop_table_constraint_definition =
        'DROP' 'CONSTRAINT' constraint_name drop_behaviour
        ;

drop_table_statement =
        'DROP' 'TABLE' table_name drop_behaviour
        ;

drop_view_statement =
        'DROP' 'VIEW' table_name drop_behaviour
        ;

revoke_statement =
        'REVOKE' ['GRANT' 'OPTION' 'FOR'] privileges 'ON' object_name
            'FROM' grantee [{',' grantee}+ ] drop_behaviour
        ;

alter_domain_statement =
        'ALTER' 'DOMAIN' domain_name alter_domain_action
        ;

alter_domain_action =
        set_domain_default_clause
    |   drop_domain_default_clause
    |   add_domain_constraint_definition
    |   drop_domain_constraint_definition
        ;

set_domain_default_clause =
        'SET' default_clause
        ;

drop_domain_default_clause =
        'DROP' 'DEFAULT'
        ;

add_domain_constraint_definition =
        'ADD' domain_constraint
        ;

drop_domain_constraint_definition =
        'DROP' 'CONSTRAINT' constraint_name
        ;

drop_domain_statement =
        'DROP' 'DOMAIN' domain_name drop_behaviour
        ;

drop_character_set_statement =
        'DROP' 'CHARACTER' 'SET' character_set_name
        ;

drop_collation_statement =
        'DROP' 'COLLATION' collation_name
        ;

drop_translation_statement =
        'DROP' 'TRANSLATION' translation_name
        ;

drop_assertion_statement =
        'DROP' 'ASSERTION' constraint_name
        ;

simple_value_specification =
        parameter_name
    |   literal
        ;

delete_statement_searched =
        'DELETE' 'FROM' table_name ['WHERE' search_condition]
        ;

insert_statement =
        'INSERT' 'INTO' table_name insert_columns_and_source
        ;

insert_columns_and_source =
        ['(' insert_column_list ')'] query_expression
    |   'DEFAULT' 'VALUES'
        ;

insert_column_list =
        column_name_list
        ;

set_clause_list =
        set_clause [{',' set_clause}+ ]
        ;

set_clause =
        object_column '=' update_source
        ;

object_column =
        column_name
        ;

update_source =
        value_expression
    |   null_specification
    |   'DEFAULT'
        ;

update_statement_searched =
        'UPDATE' table_name 'SET' set_clause_list ['WHERE' search_condition]
        ;

sql_transaction_statement =
        set_transaction_statement
    |   set_constraints_mode_statement
    |   commit_statement
    |   rollback_statement
        ;

set_transaction_statement =
        'SET' 'TRANSACTION' transaction_mode [{',' transaction_mode}+ ]
        ;

transaction_mode =
        isolation_level
    |   transaction_access_mode
    |   diagnostics_size
        ;

isolation_level =
        'ISOLATION' 'LEVEL' level_of_isolation
        ;

level_of_isolation =
        'READ' 'UNCOMMITTED'
    |   'READ' 'COMMITTED'
    |   'REPEATABLE' 'READ'
    |   'SERIALIZABLE'
        ;

transaction_access_mode =
        'READ' 'ONLY'
    |   'READ' 'WRITE'
        ;

diagnostics_size =
        'DIAGNOSTICS' 'SIZE' number_of_conditions
        ;

number_of_conditions =
        simple_value_specification
        ;

set_constraints_mode_statement =
        'SET' 'CONSTRAINTS' constraint_name_list {'DEFERRED' | 'IMMEDIATE'}
        ;

constraint_name_list =
        'ALL'
    |   constraint_name [{',' constraint_name}+ ]
        ;

commit_statement =
        'COMMIT' ['WORK']
        ;

rollback_statement =
        'ROLLBACK' ['WORK']
        ;

sql_connection_statement =
        connect_statement
    |   set_connection_statement
    |   disconnect_statement
        ;

connect_statement =
        'CONNECT' 'TO' connection_target
        ;

connection_target =
        sql_server_name ['AS' connection_name] ['USER' user_name]
    |   'DEFAULT'
        ;

sql_server_name =
        simple_value_specification
        ;

connection_name =
        simple_value_specification
        ;

user_name =
        simple_value_specification
        ;

set_connection_statement =
        'SET' 'CONNECTION' connection_object
        ;

connection_object =
        'DEFAULT'
    |   connection_name
        ;

disconnect_statement =
        'DISCONNECT' disconnect_object
        ;

disconnect_object =
        connection_object
    |   'ALL'
    |   'CURRENT'
        ;

sql_session_statement =
        set_catalog_statement
    |   set_schema_statement
    |   set_names_statement
    |   set_session_authorization_IDENTIFIER_statement
    |   set_local_time_zone_statement
        ;

set_catalog_statement =
        'SET' 'CATALOG' value_specification
        ;

value_specification =
        literal
    |   general_value_specification
        ;

set_schema_statement =
        'SET' 'SCHEMA' value_specification
        ;

set_names_statement =
        'SET' 'NAMES' value_specification
        ;

set_session_authorization_IDENTIFIER_statement =
        'SET' 'SESSION' 'AUTHORIZATION' value_specification
        ;

set_local_time_zone_statement =
        'SET' 'TIME' 'ZONE' set_time_zone_value
        ;

set_time_zone_value =
        interval_value_expression
    |   'LOCAL'
        ;

direct_sql_statement =
        direct_sql_data_statement
    |   sql_schema_statement
    |   sql_transaction_statement
    |   sql_connection_statement
    |   sql_session_statement
        ;

direct_sql_data_statement =
        delete_statement_searched
    |   direct_select_statement_multiple_rows
    |   insert_statement
    |   update_statement_searched
    |   temporary_table_declaration
        ;

direct_select_statement_multiple_rows =
        query_expression [order_by_clause]
        ;
