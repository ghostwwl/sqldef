# The MIT License (MIT)
# Copyright (c) 2016, Victor M. Uriarte
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

@@grammar :: Sql
@@ignorecase :: True

@@whitespace :: /\s+/
@@eol_comments :: /--.*?$/
@@comments :: ?//\*[\s\S]*?\*//?
@@keyword :: SELECT FROM WHERE


start =
        multiple_direct_sql_statement
        $
        ;

multiple_direct_sql_statement =
        ';'.{direct_sql_statement}
        [';']
        ;

@name
regular_identifier =
        /[a-z]\w*/
        ;

unsigned_numeric_literal =
        exact_numeric_literal
    |   approximate_numeric_literal
        ;

exact_numeric_literal =
        proper_decimal
    |   '.' integer
        ;

integer =
        /\d+/
        ;

approximate_numeric_literal =
        exact_numeric_literal 'E' [sign] integer
        ;

sign =
        '+'
    |   '-'
        ;

mult_div =
        '*'
    |   '/'
        ;

char_in_string =
        /(''|[^'\n])+/
        ;  #';  syntax highlither bug

character_string_literal =
        "'" [{char_in_string}+] "'"
        ;

identifier_chain =
        '.'.{identifier}
        ;

identifier =
        regular_identifier
    |   delimited_identifier
        ;

delimited_identifier =
        '"' {char_in_delimited_identifier}+ '"'
        ;

char_in_delimited_identifier =
        /(""|[^"\n])+/
        ;  #";  syntax highlither bug

date_value =
        integer '-' integer '-' integer
        ;

time_value =
        integer ':' integer ':' proper_decimal
        ;

proper_decimal =
        integer ['.' [integer]]
        ;

time_zone_interval =
        sign integer ':' integer
        ;

year_month_literal =
        integer
    |   [integer '-'] integer
        ;

day_time_literal =
        day_time_interval
    |   time_interval
        ;

day_time_interval =
        integer [' ' integer [':' integer [':' proper_decimal]]]
        ;

time_interval =
        integer [':' integer [':' proper_decimal]]
    |   integer [':' proper_decimal]
    |   proper_decimal
        ;

temporary_table_declaration =
        'DECLARE' 'LOCAL' 'TEMPORARY' 'TABLE' qualified_local_table_name table_element_list ['ON' 'COMMIT' ('PRESERVE' | 'DELETE') 'ROWS']
        ;

qualified_local_table_name =
        'MODULE' '.' identifier
        ;

table_element_list =
        '(' ','.{table_element} ')'
        ;

table_element =
        column_definition
    |   table_constraint_definition
        ;

column_definition =
        identifier (data_type | qualified_name) [default_clause] [{[constraint_name_definition] column_constraint [_KW_CONSTRAINT_ATTRIBUTES]}+] [collate_clause]
        ;

data_type =
        character_string_type ['CHARACTER' 'SET' identifier_chain]
    |   national_character_string_type
    |   bit_string_type
    |   numeric_type
    |   datetime_type
    |   interval_type
        ;

character_string_type =
        (_KW_CHAR | _KW_VCHAR) ['(' integer ')']
        ;

national_character_string_type =
        _KW_NCHAR ['VARYING'] ['(' integer ')']
        ;

bit_string_type =
        'BIT' ['VARYING'] ['(' integer ')']
        ;

numeric_type =
        exact_numeric_type
    |   approximate_numeric_type
        ;

exact_numeric_type =
        'NUMERIC' ['(' integer [',' integer] ')']
    |   'DECIMAL' ['(' integer [',' integer] ')']
    |   'DEC' ['(' integer [',' integer] ')']
    |   'INTEGER'
    |   'INT'
    |   'SMALLINT'
        ;

approximate_numeric_type =
        'FLOAT' ['(' integer ')']
    |   'REAL'
    |   'DOUBLE' 'PRECISION'
        ;

datetime_type =
        'DATE'
    |   'TIME' ['(' integer ')'] ['WITH' 'TIME' 'ZONE']
    |   'TIMESTAMP' ['(' integer ')'] ['WITH' 'TIME' 'ZONE']
        ;

interval_type =
        'INTERVAL' interval_qualifier
        ;

interval_qualifier =
        _KW_NON_SECOND_DATETIME_FIELD ['(' integer ')'] 'TO' end_field
    |   single_datetime_field
        ;

end_field =
        _KW_NON_SECOND_DATETIME_FIELD
    |   'SECOND' ['(' integer ')']
        ;

single_datetime_field =
        _KW_NON_SECOND_DATETIME_FIELD ['(' integer ')']
    |   'SECOND' ['(' integer [',' '(' integer] ')']
        ;

qualified_name =
        [identifier_chain '.'] identifier
        ;

default_clause =
        'DEFAULT' default_option
        ;

default_option =
        literal
    |   datetime_value_function
    |   'USER'
    |   'CURRENT_USER'
    |   'SESSION_USER'
    |   'SYSTEM_USER'
    |   'NULL'
        ;

literal =
        signed_numeric_literal
    |   general_literal
        ;

signed_numeric_literal =
        [sign] unsigned_numeric_literal
        ;

general_literal =
        character_string_literal
    |   datetime_literal
    |   interval_literal
        ;

datetime_literal =
        date_literal
    |   time_literal
    |   timestamp_literal
        ;

date_literal =
        'DATE' "'" date_value "'"
        ;

time_literal =
        'TIME' "'" time_value [time_zone_interval] "'"
        ;

timestamp_literal =
        'TIMESTAMP' "'" date_value ' ' time_value [time_zone_interval] "'"
        ;

interval_literal =
        'INTERVAL' [sign] "'" (year_month_literal | day_time_literal) "'" interval_qualifier
        ;

datetime_value_function =
        'CURRENT_DATE'
    |   'CURRENT_TIME' ['(' integer ')']
    |   'CURRENT_TIMESTAMP' ['(' integer ')']
        ;

constraint_name_definition =
        'CONSTRAINT' qualified_name
        ;

column_constraint =
        'NOT' 'NULL'
    |   _KW_UNIQUE_SPECIFICATION
    |   references_specification
    |   assertion_check
        ;

references_specification =
        'REFERENCES' table_name ['(' column_name_list ')'] ['MATCH' _KW_MATCH_TYPE] [_KW_REFERENTIAL_TRIGGERED_ACTION]
        ;

table_name =
        qualified_name
    |   qualified_local_table_name
        ;

column_name_list =
        ','.{identifier}
        ;

search_condition =
        boolean_term
    |   search_condition 'OR' boolean_term
        ;

boolean_term =
        boolean_factor
    |   boolean_term 'AND' boolean_factor
        ;

boolean_factor =
        ['NOT'] boolean_primary ['IS' ['NOT'] _KW_TRUTH_VALUE]
        ;

boolean_primary =
        predicate
    |   '(' search_condition ')'
        ;

predicate =
        row_value_constructor comp_op row_value_constructor
    |   row_value_constructor ['NOT'] 'BETWEEN' row_value_constructor 'AND' row_value_constructor
    |   row_value_constructor ['NOT'] 'IN' in_predicate_value
    |   character_value_expression ['NOT'] 'LIKE' character_value_expression ['ESCAPE' character_value_expression]
    |   'IS' ['NOT'] 'NULL'
    |   row_value_constructor comp_op _KW_QUANTIFIER subquery
    |   'EXISTS' subquery
    |   row_value_constructor 'MATCH' ['UNIQUE'] ['PARTIAL' | 'FULL'] subquery
    |   row_value_constructor 'OVERLAPS' row_value_constructor
        ;

row_value_constructor =
        row_value_constructor_element
    |   '(' ','.{row_value_constructor_element} ')'
    |   subquery
        ;

row_value_constructor_element =
        value_expression
    |   'NULL'
    |   'DEFAULT'
        ;

value_expression =
        numeric_value_expression
    |   string_value_expression
    |   datetime_value_expression
    |   interval_value_expression
        ;

numeric_value_expression =
        [numeric_value_expression sign] term
        ;

term =
        [term mult_div] factor
        ;

factor =
        [sign] numeric_primary
        ;

numeric_primary =
        value_expression_primary
    |   numeric_value_function
        ;

value_expression_primary =
        unsigned_value_specification
    |   column_reference
    |   set_function_specification
    |   subquery
    |   case_expression
    |   '(' value_expression ')'
    |   'CAST' '(' result 'AS' cast_target ')'
        ;

unsigned_value_specification =
        unsigned_literal
    |   general_value_specification
        ;

unsigned_literal =
        unsigned_numeric_literal
    |   general_literal
        ;

general_value_specification =
        parameter_name [['INDICATOR'] parameter_name]
    |   '?'
    |   'USER'
    |   'CURRENT_USER'
    |   'SESSION_USER'
    |   'SYSTEM_USER'
    |   'VALUE'
        ;

parameter_name =
        ':' identifier
        ;

column_reference =
        [qualifier '.'] identifier
        ;

qualifier =
        table_name
    |   identifier
        ;

set_function_specification =
        'COUNT' '(' '*' ')'
    |   _KW_SET_FUNCTION_TYPE '(' [_KW_SET_QUANTIFIER] value_expression ')'
        ;

subquery =
        '(' query_expression ')'
        ;

query_expression =
        non_join_query_expression
    |   joined_table
        ;

non_join_query_expression =
        non_join_query_term
    |   query_expression ('UNION' | 'EXCEPT') ['ALL'] [corresponding_spec] query_term
        ;

non_join_query_term =
        non_join_query_primary
    |   query_term 'INTERSECT' ['ALL'] [corresponding_spec] query_primary
        ;

non_join_query_primary =
        simple_table
    |   '(' non_join_query_expression ')'
        ;

simple_table =
        'SELECT' [_KW_SET_QUANTIFIER] select_list table_expression
    |   'VALUES' table_value_constructor_list
    |   'TABLE' table_name
        ;

select_list =
        '*'
    |   ','.{select_sublist}
        ;

select_sublist =
        value_expression [as_clause]
    |   qualifier '.' '*'
        ;

as_clause =
        ['AS'] identifier
        ;

table_expression =
        from_clause
            [where_clause]
            [group_by_clause]
            [having_clause]
        ;

from_clause =
        'FROM' ','.{table_reference}
        ;

table_reference =
        table_name [correlation_specification]
    |   subquery correlation_specification
    |   joined_table
        ;

correlation_specification =
        ['AS'] identifier ['(' column_name_list ')']
        ;

joined_table =
        cross_join
    |   qualified_join
    |   '(' joined_table ')'
        ;

cross_join =
        table_reference 'CROSS' 'JOIN' table_reference
        ;

qualified_join =
        table_reference ['NATURAL'] [_KW_JOIN_TYPE] 'JOIN' table_reference [join_specification]
        ;

join_specification =
        join_condition
    |   named_columns_join
        ;

join_condition =
        'ON' search_condition
        ;

named_columns_join =
        'USING' '(' column_name_list ')'
        ;

where_clause =
        'WHERE' search_condition
        ;

group_by_clause =
        'GROUP' 'BY' grouping_column_reference_list
        ;

grouping_column_reference_list =
        ','.{column_reference [collate_clause]}
        ;

collate_clause =
        'COLLATE' qualified_name
        ;

having_clause =
        'HAVING' search_condition
        ;

table_value_constructor_list =
        ','.{row_value_constructor}
        ;

query_term =
        non_join_query_term
    |   joined_table
        ;

corresponding_spec =
        'CORRESPONDING' ['BY' '(' column_name_list ')']
        ;

query_primary =
        non_join_query_primary
    |   joined_table
        ;

case_expression =
        case_abbreviation
    |   case_specification
        ;

case_abbreviation =
        'NULLIF' '(' value_expression ',' value_expression ')'
    |   'COALESCE' '(' ','.{value_expression} ')'
        ;

case_specification =
        simple_case
    |   searched_case
        ;

simple_case =
        'CASE' value_expression
            {simple_when_clause}+
            [else_clause]
            'END'
        ;

simple_when_clause =
        'WHEN' value_expression 'THEN' result
        ;

result =
        value_expression
    |   'NULL'
        ;

else_clause =
        'ELSE' result
        ;

searched_case =
        'CASE'
            {searched_when_clause}+
            [else_clause]
            'END'
        ;

searched_when_clause =
        'WHEN' search_condition 'THEN' result
        ;

cast_target =
        qualified_name
    |   data_type
        ;

numeric_value_function =
        'POSITION' '(' character_value_expression 'IN' character_value_expression ')'
    |   'EXTRACT' '(' _KW_EXTRACT_FIELD 'FROM' extract_source ')'
    |   length_expression
        ;

character_value_expression =
        character_value_expression '||' character_factor
    |   character_factor
        ;

character_factor =
        character_primary [collate_clause]
        ;

character_primary =
        value_expression_primary
    |   string_value_function
        ;

string_value_function =
        character_value_function
    |   'SUBSTRING' '(' bit_value_expression 'FROM' numeric_value_expression ['FOR' numeric_value_expression] ')'
        ;

character_value_function =
        'SUBSTRING' '(' character_value_expression 'FROM' numeric_value_expression ['FOR' numeric_value_expression] ')'
    |   ('UPPER' | 'LOWER') '(' character_value_expression ')'
    |   'CONVERT' '(' character_value_expression 'USING' qualified_name ')'
    |   'TRANSLATE' '(' character_value_expression 'USING' qualified_name ')'
    |   'TRIM' '(' [[_KW_TRIM_SPECIFICATION] [character_value_expression] 'FROM'] character_value_expression ')'
        ;

bit_value_expression =
        bit_value_expression '||' character_primary
    |   character_primary
        ;

extract_source =
        datetime_value_expression
    |   interval_value_expression
        ;

datetime_value_expression =
        [interval_value_expression '+'] datetime_factor
    |   datetime_value_expression sign interval_term
        ;

interval_term =
        interval_term mult_div factor
    |   [term '*'] [sign] value_expression_primary [interval_qualifier]
        ;

interval_value_expression =
        interval_term
    |   interval_value_expression sign interval_term
    |   '(' datetime_value_expression '-' datetime_factor ')' interval_qualifier
        ;

datetime_factor =
        datetime_primary ['AT' time_zone_specifier]
        ;

datetime_primary =
        value_expression_primary
    |   datetime_value_function
        ;

time_zone_specifier =
        'LOCAL'
    |   'TIME' 'ZONE' interval_value_expression
        ;

length_expression =
        ('CHAR_LENGTH' | 'CHARACTER_LENGTH' | 'OCTET_LENGTH' | 'BIT_LENGTH')
            '(' string_value_expression ')'
        ;

string_value_expression =
        character_value_expression
    |   bit_value_expression
        ;

comp_op =
        '='
    |   '<>'
    |   '<'
    |   '>'
    |   '<='
    |   '>='
        ;

in_predicate_value =
        subquery
    |   '(' in_value_list ')'
        ;

in_value_list =
        ','.{value_expression}
        ;

table_constraint_definition =
        [constraint_name_definition] table_constraint [_KW_CONSTRAINT_CHECK_TIME]
        ;

table_constraint =
        _KW_UNIQUE_SPECIFICATION '(' column_name_list ')'
    |   'FOREIGN' 'KEY' '(' column_name_list ')' references_specification
    |   assertion_check
        ;

order_by_clause =
        'ORDER' 'BY' sort_specification_list
        ;

sort_specification_list =
        ','.{sort_key [collate_clause] [_KW_ORDERING_SPECIFICATION]}
        ;

sort_key =
        identifier
    |   integer
        ;

sql_schema_statement =
        sql_schema_definition_statement
    |   sql_schema_manipulation_statement
        ;

sql_schema_definition_statement =
        schema_definition
    |   table_definition
    |   view_definition
    |   grant_statement
    |   domain_definition
    |   character_set_definition
    |   collation_definition
    |   translation_definition
    |   assertion_definition
        ;

schema_definition =
        'CREATE' 'SCHEMA' schema_name_clause
            ['DEFAULT' 'CHARACTER' 'SET' identifier_chain]
            [{schema_element}+]
        ;

schema_name_clause =
        identifier_chain
    |   [identifier_chain] 'AUTHORIZATION' identifier
        ;

schema_element =
        domain_definition
    |   table_definition
    |   view_definition
    |   grant_statement
    |   assertion_definition
    |   character_set_definition
    |   collation_definition
    |   translation_definition
        ;

domain_definition =
        'CREATE' 'DOMAIN' qualified_name ['AS'] data_type
            [default_clause] [domain_constraint] [collate_clause]
        ;

domain_constraint =
        [constraint_name_definition] assertion_check [_KW_CONSTRAINT_ATTRIBUTES]
        ;

table_definition =
        'CREATE' [('GLOBAL' | 'LOCAL') 'TEMPORARY'] 'TABLE'
            table_name table_element_list ['ON' 'COMMIT' ('DELETE' | 'PRESERVE') 'ROWS']
        ;

view_definition =
        'CREATE' 'VIEW' table_name ['(' column_name_list ')']
            'AS' query_expression ['WITH' [_KW_LEVELS_CLAUSE] 'CHECK' 'OPTION']
        ;

grant_statement =
        'GRANT' privileges 'ON' object_name 'TO' ','.{grantee} ['WITH' 'GRANT' 'OPTION']
        ;

privileges =
        'ALL' 'PRIVILEGES'
    |   ','.{action}
        ;

action =
        'SELECT'
    |   'DELETE'
    |   'INSERT' ['(' column_name_list ')']
    |   'UPDATE' ['(' column_name_list ')']
    |   'REFERENCES' ['(' column_name_list ')']
    |   'USAGE'
        ;

object_name =
        ['TABLE'] table_name
    |   'DOMAIN' qualified_name
    |   'COLLATION' qualified_name
    |   'CHARACTER' 'SET' identifier_chain
    |   'TRANSLATION' qualified_name
        ;

grantee =
        'PUBLIC'
    |   identifier
        ;

assertion_definition =
        'CREATE' 'ASSERTION' qualified_name assertion_check [_KW_CONSTRAINT_ATTRIBUTES]
        ;

assertion_check =
        'CHECK' '(' search_condition ')'
        ;

character_set_definition =
        'CREATE' 'CHARACTER' 'SET' identifier_chain ['AS'] 'GET' identifier_chain
            [collate_clause | 'COLLATION' 'FROM' collation_source]
        ;

collation_source =
        collating_sequence_definition
    |   'TRANSLATION' qualified_name ['THEN' 'COLLATION' qualified_name]
        ;

collating_sequence_definition =
        external_translation
    |   qualified_name
    |   'DESC' '(' qualified_name ')'
    |   'DEFAULT'
        ;

collation_definition =
        'CREATE' 'COLLATION' qualified_name 'FOR' identifier_chain
            'FROM' collation_source [_KW_PAD_ATTRIBUTE]
        ;

translation_definition =
        'CREATE' 'TRANSLATION' qualified_name
            'FOR' identifier_chain
            'TO' identifier_chain
            'FROM' translation_specification
        ;

translation_specification =
        external_translation
    |   'IDENTITY'
    |   qualified_name
        ;

external_translation =
        'EXTERNAL' '(' "'" qualified_name "'" ')'
        ;

sql_schema_manipulation_statement =
        drop_schema_statement
    |   alter_table_statement
    |   drop_table_statement
    |   drop_view_statement
    |   revoke_statement
    |   alter_domain_statement
    |   drop_domain_statement
    |   drop_character_set_statement
    |   drop_collation_statement
    |   drop_translation_statement
    |   drop_assertion_statement
        ;

drop_schema_statement =
        'DROP' 'SCHEMA' identifier_chain _KW_DROP_BEHAVIOUR
        ;

alter_table_statement =
        'ALTER' 'TABLE' table_name alter_table_action
        ;

alter_table_action =
        'ADD' ['COLUMN'] column_definition
    |   'ALTER' ['COLUMN'] identifier alter_column_action
    |   'DROP' ['COLUMN'] identifier _KW_DROP_BEHAVIOUR
    |   'ADD' table_constraint_definition
    |   'DROP' 'CONSTRAINT' qualified_name _KW_DROP_BEHAVIOUR
        ;

alter_column_action =
        set_default_clause
    |   _KW_DROP_DEFAULT_CLAUSE
        ;

set_default_clause =
        'SET' default_clause
        ;

drop_table_statement =
        'DROP' 'TABLE' table_name _KW_DROP_BEHAVIOUR
        ;

drop_view_statement =
        'DROP' 'VIEW' table_name _KW_DROP_BEHAVIOUR
        ;

revoke_statement =
        'REVOKE' ['GRANT' 'OPTION' 'FOR'] privileges 'ON' object_name
            'FROM' ','.{grantee} _KW_DROP_BEHAVIOUR
        ;

alter_domain_statement =
        'ALTER' 'DOMAIN' qualified_name alter_domain_action
        ;

alter_domain_action =
        set_default_clause
    |   _KW_DROP_DEFAULT_CLAUSE
    |   'ADD' domain_constraint
    |   'DROP' 'CONSTRAINT' qualified_name
        ;

drop_domain_statement =
        'DROP' 'DOMAIN' qualified_name _KW_DROP_BEHAVIOUR
        ;

drop_character_set_statement =
        'DROP' 'CHARACTER' 'SET' identifier_chain
        ;

drop_collation_statement =
        'DROP' 'COLLATION' qualified_name
        ;

drop_translation_statement =
        'DROP' 'TRANSLATION' qualified_name
        ;

drop_assertion_statement =
        'DROP' 'ASSERTION' qualified_name
        ;

simple_value_specification =
        parameter_name
    |   literal
        ;

delete_statement_searched =
        'DELETE' 'FROM' table_name ['WHERE' search_condition]
        ;

insert_statement =
        'INSERT' 'INTO' table_name insert_columns_and_source
        ;

insert_columns_and_source =
        ['(' column_name_list ')'] query_expression
    |   'DEFAULT' 'VALUES'
        ;

set_clause_list =
        ','.{set_clause}
        ;

set_clause =
        identifier '=' row_value_constructor_element
        ;

update_statement_searched =
        'UPDATE' table_name 'SET' set_clause_list ['WHERE' search_condition]
        ;

sql_transaction_statement =
        set_transaction_statement
    |   set_constraints_mode_statement
    |   _KW_COMMIT_STATEMENT
    |   _KW_ROLLBACK_STATEMENT
        ;

set_transaction_statement =
        'SET' 'TRANSACTION' ','.{transaction_mode}
        ;

transaction_mode =
        'ISOLATION' 'LEVEL' _KW_LEVEL_OF_ISOLATION
    |   _KW_TRANSACTION_ACCESS_MODE
    |   'DIAGNOSTICS' 'SIZE' simple_value_specification
        ;

set_constraints_mode_statement =
        'SET' 'CONSTRAINTS' constraint_name_list ('DEFERRED' | 'IMMEDIATE')
        ;

constraint_name_list =
        'ALL'
    |   ','.{qualified_name}
        ;

sql_connection_statement =
        connect_statement
    |   set_connection_statement
    |   disconnect_statement
        ;

connect_statement =
        'CONNECT' 'TO' connection_target
        ;

connection_target =
        simple_value_specification ['AS' simple_value_specification] ['USER' simple_value_specification]
    |   'DEFAULT'
        ;

set_connection_statement =
        'SET' 'CONNECTION' connection_object
        ;

connection_object =
        'DEFAULT'
    |   simple_value_specification
        ;

disconnect_statement =
        'DISCONNECT' disconnect_object
        ;

disconnect_object =
        connection_object
    |   'ALL'
    |   'CURRENT'
        ;

sql_session_statement =
        set_catalog_statement
    |   set_schema_statement
    |   set_names_statement
    |   set_session_authorization_identifier_statement
    |   set_local_time_zone_statement
        ;

set_catalog_statement =
        'SET' 'CATALOG' value_specification
        ;

value_specification =
        literal
    |   general_value_specification
        ;

set_schema_statement =
        'SET' 'SCHEMA' value_specification
        ;

set_names_statement =
        'SET' 'NAMES' value_specification
        ;

set_session_authorization_identifier_statement =
        'SET' 'SESSION' 'AUTHORIZATION' value_specification
        ;

set_local_time_zone_statement =
        'SET' 'TIME' 'ZONE' set_time_zone_value
        ;

set_time_zone_value =
        interval_value_expression
    |   'LOCAL'
        ;

direct_sql_statement =
        direct_sql_data_statement
    |   sql_schema_statement
    |   sql_transaction_statement
    |   sql_connection_statement
    |   sql_session_statement
        ;

direct_sql_data_statement =
        delete_statement_searched
    |   direct_select_statement_multiple_rows
    |   insert_statement
    |   update_statement_searched
    |   temporary_table_declaration
        ;

direct_select_statement_multiple_rows =
        query_expression [order_by_clause]
        ;

_KW_CONSTRAINT_ATTRIBUTES =
        _KW_CONSTRAINT_CHECK_TIME [['NOT'] 'DEFERRABLE']
    |   ['NOT'] 'DEFERRABLE' [_KW_CONSTRAINT_CHECK_TIME]
        ;

_KW_NON_SECOND_DATETIME_FIELD =
        'YEAR'
    |   'MONTH'
    |   'DAY'
    |   'HOUR'
    |   'MINUTE'
        ;

_KW_UNIQUE_SPECIFICATION =
        'UNIQUE'
    |   'PRIMARY' 'KEY'
        ;

_KW_MATCH_TYPE =
        'FULL'
    |   'PARTIAL'
        ;

_KW_REFERENTIAL_TRIGGERED_ACTION =
        _KW_UPDATE_RULE [_KW_DELETE_RULE]
    |   _KW_DELETE_RULE [_KW_UPDATE_RULE]
        ;

_KW_UPDATE_RULE =
        'ON' 'UPDATE' _KW_REFERENTIAL_ACTION
        ;

_KW_REFERENTIAL_ACTION =
        'CASCADE'
    |   'SET' 'NULL'
    |   'SET' 'DEFAULT'
    |   'NO' 'ACTION'
        ;

_KW_DELETE_RULE =
        'ON' 'DELETE' _KW_REFERENTIAL_ACTION
        ;

_KW_SET_FUNCTION_TYPE =
        'AVG'
    |   'MAX'
    |   'MIN'
    |   'SUM'
    |   'COUNT'
        ;

_KW_SET_QUANTIFIER =
        'DISTINCT'
    |   'ALL'
        ;

_KW_JOIN_TYPE =
        'INNER'
    |   _KW_OUTER_JOIN_TYPE ['OUTER']
    |   'UNION'
        ;

_KW_OUTER_JOIN_TYPE =
        'LEFT'
    |   'RIGHT'
    |   'FULL'
        ;

_KW_TRIM_SPECIFICATION =
        'LEADING'
    |   'TRAILING'
    |   'BOTH'
        ;

_KW_EXTRACT_FIELD =
        _KW_DATETIME_FIELD
    |   _KW_TIME_ZONE_FIELD
        ;

_KW_DATETIME_FIELD =
        _KW_NON_SECOND_DATETIME_FIELD
    |   'SECOND'
        ;

_KW_TIME_ZONE_FIELD =
        'TIMEZONE_HOUR'
    |   'TIMEZONE_MINUTE'
        ;

_KW_QUANTIFIER =
        'ALL'
    |   'SOME'
    |   'ANY'
        ;

_KW_TRUTH_VALUE =
        'TRUE'
    |   'FALSE'
    |   'UNKNOWN'
        ;

_KW_CONSTRAINT_CHECK_TIME =
        'INITIALLY' 'DEFERRED'
    |   'INITIALLY' 'IMMEDIATE'
        ;

_KW_ORDERING_SPECIFICATION =
        'ASC'
    |   'DESC'
        ;

_KW_LEVELS_CLAUSE =
        'CASCADED'
    |   'LOCAL'
        ;

_KW_PAD_ATTRIBUTE =
        'NO' 'PAD'
    |   'PAD' 'SPACE'
        ;

_KW_DROP_BEHAVIOUR =
        'CASCADE'
    |   'RESTRICT'
        ;

_KW_DROP_DEFAULT_CLAUSE =
        'DROP' 'DEFAULT'
        ;

_KW_LEVEL_OF_ISOLATION =
        'READ' 'UNCOMMITTED'
    |   'READ' 'COMMITTED'
    |   'REPEATABLE' 'READ'
    |   'SERIALIZABLE'
        ;

_KW_TRANSACTION_ACCESS_MODE =
        'READ' 'ONLY'
    |   'READ' 'WRITE'
        ;

_KW_COMMIT_STATEMENT =
        'COMMIT' ['WORK']
        ;

_KW_ROLLBACK_STATEMENT =
        'ROLLBACK' ['WORK']
        ;

_KW_CHAR =
        'CHARACTER'
    |   'CHAR'
        ;

_KW_NCHAR =
        'NATIONAL' _KW_CHAR
    |   'NCHAR'
        ;

_KW_VCHAR =
        _KW_CHAR 'VARYING'
    |   'VARCHAR'
        ;
