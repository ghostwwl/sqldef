# The MIT License (MIT)
# Copyright (c) 2016, Victor M. Uriarte
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

@@grammar :: Sql
@@ignorecase :: True

@@whitespace :: /\s+/
@@eol_comments :: /--.*?$/
@@comments :: ?//\*[\s\S]*?\*//?

digit =
    /\d+/
    ;

double_quote =
    '"'
    ;

quote =
    "'"
    ;

left_paren =
    '('
    ;

right_paren =
    ')'
    ;

asterisk =
    '*'
    ;

plus_sign =
    '+'
    ;

comma =
    ','
    ;

minus_sign =
    '-'
    ;

period =
    '.'
    ;

solidus =
    '/'
    ;

colon =
    ':'
    ;

semicolon =
    ';'
    ;

less_than_operator =
    '<'
    ;

equals_operator =
    '='
    ;

greater_than_operator =
    '>'
    ;

question_mark =
    '?'
    ;

left_bracket_or_trigraph =
  | left_bracket
  | left_bracket_trigraph
    ;

right_bracket_or_trigraph =
  | right_bracket
  | right_bracket_trigraph
    ;

left_bracket =
    '['
    ;

left_bracket_trigraph =
    '??('
    ;

right_bracket =
    ']'
    ;

right_bracket_trigraph =
    '??)'
    ;

underscore =
    '_'
    ;

@name
regular_identifier =
    /[a-z]\w*/
    ;

large_object_length_token =
    digit multiplier
    ;

multiplier =
  | 'K'
  | 'M'
  | 'G'
    ;

delimited_identifier =
    double_quote delimited_identifier_body double_quote
    ;

delimited_identifier_body =
    /(""|[^"\n])+/
    ;

unicode_escape_value =
  | unicode_4_digit_escape_value
  | unicode_6_digit_escape_value
  | unicode_character_escape_value
    ;

unicode_4_digit_escape_value =
    unicode_escape_character hexit hexit hexit hexit
    ;

unicode_6_digit_escape_value =
    unicode_escape_character plus_sign hexit hexit hexit hexit hexit hexit
    ;

unicode_character_escape_value =
    unicode_escape_character unicode_escape_character
    ;

unicode_escape_character =
    '\U'
    ;

not_equals_operator =
    '<>'
    ;

greater_than_or_equals_operator =
    '>='
    ;

less_than_or_equals_operator =
    '<='
    ;

concatenation_operator =
    '||'
    ;

right_arrow =
    '->'
    ;

double_colon =
    '::'
    ;

literal =
  | signed_numeric_literal
  | general_literal
    ;

unsigned_literal =
  | unsigned_numeric_literal
  | general_literal
    ;

general_literal =
  | character_string_literal
  | national_character_string_literal
  | unicode_character_string_literal
  | binary_string_literal
  | datetime_literal
  | interval_literal
  | boolean_literal
    ;

character_string_literal =
    [introducer character_set_specification] quote [{character_representation}+] quote [{quote [{character_representation}+] quote}+]
    ;

introducer =
    underscore
    ;

character_representation =
    /(''|[^'\n])/
    ;

national_character_string_literal =
    'N' quote [{character_representation}+] quote [{quote [{character_representation}+] quote}+]
    ;

unicode_character_string_literal =
    [introducer character_set_specification] 'U&' quote [{unicode_representation}+] quote [{quote [{unicode_representation}+] quote}+] ['ESCAPE' escape_character]
    ;

unicode_representation =
  | character_representation
  | unicode_escape_value
    ;

binary_string_literal =
    'X' quote [{hexit hexit}+] quote [{quote [{hexit hexit}+] quote}+] ['ESCAPE' escape_character]
    ;

hexit =
    /[a-f\d]/
    ;

signed_numeric_literal =
    [sign] unsigned_numeric_literal
    ;

unsigned_numeric_literal =
  | exact_numeric_literal
  | approximate_numeric_literal
    ;

exact_numeric_literal =
  | unsigned_integer [period [unsigned_integer]]
  | period unsigned_integer
    ;

sign =
  | plus_sign
  | minus_sign
    ;

approximate_numeric_literal =
    exact_numeric_literal 'E' signed_integer
    ;

signed_integer =
    [sign] unsigned_integer
    ;

unsigned_integer =
    digit
    ;

datetime_literal =
  | date_literal
  | time_literal
  | timestamp_literal
    ;

date_literal =
    'DATE' date_string
    ;

time_literal =
    'TIME' time_string
    ;

timestamp_literal =
    'TIMESTAMP' timestamp_string
    ;

date_string =
    quote unquoted_date_string quote
    ;

time_string =
    quote unquoted_time_string quote
    ;

timestamp_string =
    quote unquoted_timestamp_string quote
    ;

time_zone_interval =
    sign hours_value colon minutes_value
    ;

date_value =
    years_value minus_sign months_value minus_sign days_value
    ;

time_value =
    hours_value colon minutes_value colon seconds_value
    ;

interval_literal =
    'INTERVAL' [sign] interval_string interval_qualifier
    ;

interval_string =
    quote unquoted_interval_string quote
    ;

unquoted_date_string =
    date_value
    ;

unquoted_time_string =
    time_value [time_zone_interval]
    ;

unquoted_timestamp_string =
    unquoted_date_string unquoted_time_string
    ;

unquoted_interval_string =
    [sign] (year_month_literal | day_time_literal)
    ;

year_month_literal =
  | years_value
  | [years_value minus_sign] months_value
    ;

day_time_literal =
  | day_time_interval
  | time_interval
    ;

day_time_interval =
    days_value [hours_value [colon minutes_value [colon seconds_value]]]
    ;

time_interval =
  | hours_value [colon minutes_value [colon seconds_value]]
  | minutes_value [colon seconds_value]
  | seconds_value
    ;

years_value =
    datetime_value
    ;

months_value =
    datetime_value
    ;

days_value =
    datetime_value
    ;

hours_value =
    datetime_value
    ;

minutes_value =
    datetime_value
    ;

seconds_value =
    unsigned_integer [period [unsigned_integer]]
    ;

datetime_value =
    unsigned_integer
    ;

boolean_literal =
  | 'TRUE'
  | 'FALSE'
  | 'UNKNOWN'
    ;

identifier =
    actual_identifier
    ;

actual_identifier =
  | regular_identifier
  | delimited_identifier
    ;

authorization_identifier =
  | role_name
  | identifier
    ;

table_name =
    local_or_schema_qualified_name
    ;

domain_name =
    schema_qualified_name
    ;

schema_name =
    [identifier period] identifier
    ;

schema_qualified_name =
    [schema_name period] qualified_identifier
    ;

local_or_schema_qualified_name =
    [local_or_schema_qualifier period] qualified_identifier
    ;

local_or_schema_qualifier =
  | schema_name
  | 'MODULE'
    ;

qualified_identifier =
    identifier
    ;

column_name =
    identifier
    ;

correlation_name =
    identifier
    ;

query_name =
    identifier
    ;

schema_qualified_routine_name =
    schema_qualified_name
    ;

method_name =
    identifier
    ;

specific_name =
    schema_qualified_name
    ;

cursor_name =
    local_qualified_name
    ;

local_qualified_name =
    [local_qualifier period] qualified_identifier
    ;

local_qualifier =
    'MODULE'
    ;

host_parameter_name =
    colon identifier
    ;

constraint_name =
    schema_qualified_name
    ;

external_routine_name =
  | identifier
  | character_string_literal
    ;

trigger_name =
    schema_qualified_name
    ;

collation_name =
    schema_qualified_name
    ;

character_set_name =
    [schema_name period] regular_identifier
    ;

transliteration_name =
    schema_qualified_name
    ;

user_defined_type_name =
    schema_qualified_type_name
    ;

schema_resolved_user_defined_type_name =
    user_defined_type_name
    ;

schema_qualified_type_name =
    [schema_name period] qualified_identifier
    ;

attribute_name =
    identifier
    ;

field_name =
    identifier
    ;

sequence_generator_name =
    schema_qualified_name
    ;

role_name =
    identifier
    ;

connection_name =
    simple_value_specification
    ;

sql_statement_name =
  | identifier
  | extended_statement_name
    ;

extended_statement_name =
    [scope_option] simple_value_specification
    ;

dynamic_cursor_name =
  | cursor_name
  | extended_cursor_name
    ;

extended_cursor_name =
    [scope_option] simple_value_specification
    ;

descriptor_name =
    [scope_option] simple_value_specification
    ;

scope_option =
  | 'GLOBAL'
  | 'LOCAL'
    ;

window_name =
    identifier
    ;

data_type =
  | predefined_type
  | row_type
  | path_resolved_user_defined_type_name
  | reference_type
  | collection_type
    ;

predefined_type =
  | character_string_type ['CHARACTER' 'SET' character_set_specification] [collate_clause]
  | national_character_string_type [collate_clause]
  | binary_large_object_string_type
  | numeric_type
  | boolean_type
  | datetime_type
  | interval_type
    ;

character_string_type =
  | 'CHARACTER' [left_paren length right_paren]
  | 'CHAR' [left_paren length right_paren]
  | 'CHARACTER' 'VARYING' left_paren length right_paren
  | 'CHAR' 'VARYING' left_paren length right_paren
  | 'VARCHAR' left_paren length right_paren
  | 'CHARACTER' 'LARGE' 'OBJECT' [left_paren large_object_length right_paren]
  | 'CHAR' 'LARGE' 'OBJECT' [left_paren large_object_length right_paren]
  | 'CLOB' [left_paren large_object_length right_paren]
    ;

national_character_string_type =
  | 'NATIONAL' 'CHARACTER' [left_paren length right_paren]
  | 'NATIONAL' 'CHAR' [left_paren length right_paren]
  | 'NCHAR' [left_paren length right_paren]
  | 'NATIONAL' 'CHARACTER' 'VARYING' left_paren length right_paren
  | 'NATIONAL' 'CHAR' 'VARYING' left_paren length right_paren
  | 'NCHAR' 'VARYING' left_paren length right_paren
  | 'NATIONAL' 'CHARACTER' 'LARGE' 'OBJECT' [left_paren large_object_length right_paren]
  | 'NCHAR' 'LARGE' 'OBJECT' [left_paren large_object_length right_paren]
  | 'NCLOB' [left_paren large_object_length right_paren]
    ;

binary_large_object_string_type =
  | 'BINARY' 'LARGE' 'OBJECT' [left_paren large_object_length right_paren]
  | 'BLOB' [left_paren large_object_length right_paren]
    ;

numeric_type =
  | exact_numeric_type
  | approximate_numeric_type
    ;

exact_numeric_type =
  | 'NUMERIC' [left_paren precision [comma scale] right_paren]
  | 'DECIMAL' [left_paren precision [comma scale] right_paren]
  | 'DEC' [left_paren precision [comma scale] right_paren]
  | 'SMALLINT'
  | 'INTEGER'
  | 'INT'
  | 'BIGINT'
    ;

approximate_numeric_type =
  | 'FLOAT' [left_paren precision right_paren]
  | 'REAL'
  | 'DOUBLE' 'PRECISION'
    ;

length =
    unsigned_integer
    ;

large_object_length =
  | unsigned_integer [multiplier] [char_length_units]
  | large_object_length_token [char_length_units]
    ;

char_length_units =
  | 'CHARACTERS'
  | 'CODE_UNITS'
  | 'OCTETS'
    ;

precision =
    unsigned_integer
    ;

scale =
    unsigned_integer
    ;

boolean_type =
    'BOOLEAN'
    ;

datetime_type =
  | 'DATE'
  | 'TIME' [left_paren time_precision right_paren] [with_or_without_time_zone]
  | 'TIMESTAMP' [left_paren timestamp_precision right_paren] [with_or_without_time_zone]
    ;

with_or_without_time_zone =
  | 'WITH' 'TIME' 'ZONE'
  | 'WITHOUT' 'TIME' 'ZONE'
    ;

time_precision =
    time_fractional_seconds_precision
    ;

timestamp_precision =
    time_fractional_seconds_precision
    ;

time_fractional_seconds_precision =
    unsigned_integer
    ;

interval_type =
    'INTERVAL' interval_qualifier
    ;

row_type =
    'ROW' row_type_body
    ;

row_type_body =
    left_paren field_definition [{comma field_definition}+] right_paren
    ;

reference_type =
    'REF' left_paren path_resolved_user_defined_type_name right_paren [scope_clause]
    ;

scope_clause =
    'SCOPE' table_name
    ;

path_resolved_user_defined_type_name =
    user_defined_type_name
    ;

collection_type =
  | array_type
  | multiset_type
    ;

array_type =
    data_type 'ARRAY' [left_bracket_or_trigraph unsigned_integer right_bracket_or_trigraph]
    ;

multiset_type =
    data_type 'MULTISET'
    ;

field_definition =
    field_name data_type [reference_scope_check]
    ;

value_expression_primary =
  | parenthesized_value_expression
  | nonparenthesized_value_expression_primary
    ;

parenthesized_value_expression =
    left_paren value_expression right_paren
    ;

nonparenthesized_value_expression_primary =
  | unsigned_value_specification
  | column_reference
  | set_function_specification
  | window_function
  | subquery
  | case_expression
  | cast_specification
  | field_reference
  | subtype_treatment
  | method_invocation
  | static_method_invocation
  | new_specification
  | attribute_or_method_reference
  | reference_resolution
  | collection_value_constructor
  | array_element_reference
  | multiset_element_reference
  | routine_invocation
  | next_value_expression
    ;

value_specification =
  | literal
  | general_value_specification
    ;

unsigned_value_specification =
  | unsigned_literal
  | general_value_specification
    ;

general_value_specification =
  | host_parameter_specification
  | sql_parameter_reference
  | dynamic_parameter_specification
  | current_collation_specification
  | 'CURRENT_DEFAULT_TRANSFORM_GROUP'
  | 'CURRENT_PATH'
  | 'CURRENT_ROLE'
  | 'CURRENT_TRANSFORM_GROUP_FOR_TYPE' path_resolved_user_defined_type_name
  | 'CURRENT_USER'
  | 'SESSION_USER'
  | 'SYSTEM_USER'
  | 'USER'
  | 'VALUE'
    ;

simple_value_specification =
  | literal
  | host_parameter_name
  | sql_parameter_reference
    ;

target_specification =
  | host_parameter_specification
  | sql_parameter_reference
  | column_reference
  | target_array_element_specification
  | dynamic_parameter_specification
    ;

simple_target_specification =
  | host_parameter_specification
  | sql_parameter_reference
  | column_reference
    ;

host_parameter_specification =
    host_parameter_name [indicator_parameter]
    ;

dynamic_parameter_specification =
    question_mark
    ;

indicator_parameter =
    ['INDICATOR'] host_parameter_name
    ;

target_array_element_specification =
    target_array_reference left_bracket_or_trigraph simple_value_specification right_bracket_or_trigraph
    ;

target_array_reference =
  | sql_parameter_reference
  | column_reference
    ;

current_collation_specification =
    'CURRENT_COLLATION' left_paren string_value_expression right_paren
    ;

contextually_typed_value_specification =
  | implicitly_typed_value_specification
  | default_specification
    ;

implicitly_typed_value_specification =
  | null_specification
  | empty_specification
    ;

null_specification =
    'NULL'
    ;

empty_specification =
  | 'ARRAY' left_bracket_or_trigraph right_bracket_or_trigraph
  | 'MULTISET' left_bracket_or_trigraph right_bracket_or_trigraph
    ;

default_specification =
    'DEFAULT'
    ;

identifier_chain =
    identifier [{period identifier}+]
    ;

basic_identifier_chain =
    identifier_chain
    ;

column_reference =
  | basic_identifier_chain
  | 'MODULE' period qualified_identifier period column_name
    ;

sql_parameter_reference =
    basic_identifier_chain
    ;

set_function_specification =
  | aggregate_function
  | grouping_operation
    ;

grouping_operation =
    'GROUPING' left_paren column_reference [{comma column_reference}+] right_paren
    ;

window_function =
    window_function_type 'OVER' window_name_or_specification
    ;

window_function_type =
  | rank_function_type left_paren right_paren
  | 'ROW_NUMBER' left_paren right_paren
  | aggregate_function
    ;

rank_function_type =
  | 'RANK'
  | 'DENSE_RANK'
  | 'PERCENT_RANK'
  | 'CUME_DIST'
    ;

window_name_or_specification =
  | window_name
  | window_specification
    ;

case_expression =
  | case_abbreviation
  | case_specification
    ;

case_abbreviation =
  | 'NULLIF' left_paren value_expression comma value_expression right_paren
  | 'COALESCE' left_paren value_expression {comma value_expression}+ right_paren
    ;

case_specification =
  | simple_case
  | searched_case
    ;

simple_case =
    'CASE' case_operand {simple_when_clause}+ [else_clause] 'END'
    ;

searched_case =
    'CASE' {searched_when_clause}+ [else_clause] 'END'
    ;

simple_when_clause =
    'WHEN' when_operand 'THEN' result
    ;

searched_when_clause =
    'WHEN' search_condition 'THEN' result
    ;

else_clause =
    'ELSE' result
    ;

case_operand =
  | row_value_predicand
  | overlaps_predicate_part_1
    ;

when_operand =
  | row_value_predicand
  | comparison_predicate_part_2
  | between_predicate_part_2
  | in_predicate_part_2
  | character_like_predicate_part_2
  | octet_like_predicate_part_2
  | similar_predicate_part_2
  | null_predicate_part_2
  | quantified_comparison_predicate_part_2
  | match_predicate_part_2
  | overlaps_predicate_part_2
  | distinct_predicate_part_2
  | member_predicate_part_2
  | submultiset_predicate_part_2
  | set_predicate_part_2
  | type_predicate_part_2
    ;

result =
  | value_expression
  | 'NULL'
    ;

cast_specification =
    'CAST' left_paren cast_operand 'AS' cast_target right_paren
    ;

cast_operand =
  | value_expression
  | implicitly_typed_value_specification
    ;

cast_target =
  | domain_name
  | data_type
    ;

next_value_expression =
    'NEXT' 'VALUE' 'FOR' sequence_generator_name
    ;

field_reference =
    value_expression_primary period field_name
    ;

subtype_treatment =
    'TREAT' left_paren value_expression 'AS' target_subtype right_paren
    ;

target_subtype =
  | path_resolved_user_defined_type_name
  | reference_type
    ;

method_invocation =
  | direct_invocation
  | generalized_invocation
    ;

direct_invocation =
    value_expression_primary period method_name [sql_argument_list]
    ;

generalized_invocation =
    left_paren value_expression_primary 'AS' data_type right_paren period method_name [sql_argument_list]
    ;

static_method_invocation =
    path_resolved_user_defined_type_name double_colon method_name [sql_argument_list]
    ;

new_specification =
    'NEW' routine_invocation
    ;

attribute_or_method_reference =
    value_expression_primary right_arrow qualified_identifier [sql_argument_list]
    ;

reference_resolution =
    'DEREF' left_paren reference_value_expression right_paren
    ;

array_element_reference =
    array_value_expression left_bracket_or_trigraph numeric_value_expression right_bracket_or_trigraph
    ;

multiset_element_reference =
    'ELEMENT' left_paren multiset_value_expression right_paren
    ;

value_expression =
  | common_value_expression
  | boolean_value_expression
  | row_value_expression
    ;

common_value_expression =
  | numeric_value_expression
  | string_value_expression
  | datetime_value_expression
  | interval_value_expression
  | user_defined_type_value_expression
  | reference_value_expression
  | collection_value_expression
    ;

user_defined_type_value_expression =
    value_expression_primary
    ;

reference_value_expression =
    value_expression_primary
    ;

collection_value_expression =
  | array_value_expression
  | multiset_value_expression
    ;

collection_value_constructor =
  | array_value_constructor
  | multiset_value_constructor
    ;

numeric_value_expression =
  | term
  | numeric_value_expression plus_sign term
  | numeric_value_expression minus_sign term
    ;

term =
  | factor
  | term asterisk factor
  | term solidus factor
    ;

factor =
    [sign] numeric_primary
    ;

numeric_primary =
  | value_expression_primary
  | numeric_value_function
    ;

numeric_value_function =
  | position_expression
  | extract_expression
  | length_expression
  | cardinality_expression
  | absolute_value_expression
  | modulus_expression
  | natural_logarithm
  | exponential_function
  | power_function
  | square_root
  | floor_function
  | ceiling_function
  | width_bucket_function
    ;

position_expression =
  | string_position_expression
  | blob_position_expression
    ;

string_position_expression =
    'POSITION' left_paren string_value_expression 'IN' string_value_expression ['USING' char_length_units] right_paren
    ;

blob_position_expression =
    'POSITION' left_paren blob_value_expression 'IN' blob_value_expression right_paren
    ;

length_expression =
  | char_length_expression
  | octet_length_expression
    ;

char_length_expression =
    ('CHAR_LENGTH' | 'CHARACTER_LENGTH') left_paren string_value_expression ['USING' char_length_units] right_paren
    ;

octet_length_expression =
    'OCTET_LENGTH' left_paren string_value_expression right_paren
    ;

extract_expression =
    'EXTRACT' left_paren extract_field 'FROM' extract_source right_paren
    ;

extract_field =
  | primary_datetime_field
  | time_zone_field
    ;

time_zone_field =
  | 'TIMEZONE_HOUR'
  | 'TIMEZONE_MINUTE'
    ;

extract_source =
  | datetime_value_expression
  | interval_value_expression
    ;

cardinality_expression =
    'CARDINALITY' left_paren collection_value_expression right_paren
    ;

absolute_value_expression =
    'ABS' left_paren numeric_value_expression right_paren
    ;

modulus_expression =
    'MOD' left_paren numeric_value_expression comma numeric_value_expression right_paren
    ;

natural_logarithm =
    'LN' left_paren numeric_value_expression right_paren
    ;

exponential_function =
    'EXP' left_paren numeric_value_expression right_paren
    ;

power_function =
    'POWER' left_paren numeric_value_expression comma numeric_value_expression right_paren
    ;

square_root =
    'SQRT' left_paren numeric_value_expression right_paren
    ;

floor_function =
    'FLOOR' left_paren numeric_value_expression right_paren
    ;

ceiling_function =
    ('CEIL' | 'CEILING') left_paren numeric_value_expression right_paren
    ;

width_bucket_function =
    'WIDTH_BUCKET' left_paren numeric_value_expression comma numeric_value_expression comma numeric_value_expression comma numeric_value_expression right_paren
    ;

string_value_expression =
  | character_value_expression
  | blob_value_expression
    ;

character_value_expression =
  | concatenation
  | character_factor
    ;

concatenation =
    character_value_expression concatenation_operator character_factor
    ;

character_factor =
    character_primary [collate_clause]
    ;

character_primary =
  | value_expression_primary
  | string_value_function
    ;

blob_value_expression =
  | blob_concatenation
  | blob_factor
    ;

blob_factor =
    blob_primary
    ;

blob_primary =
  | value_expression_primary
  | string_value_function
    ;

blob_concatenation =
    blob_value_expression concatenation_operator blob_factor
    ;

string_value_function =
  | character_value_function
  | blob_value_function
    ;

character_value_function =
  | character_substring_function
  | regular_expression_substring_function
  | fold
  | transcoding
  | character_transliteration
  | trim_function
  | character_overlay_function
  | normalize_function
  | specific_type_method
    ;

character_substring_function =
    'SUBSTRING' left_paren character_value_expression 'FROM' start_position ['FOR' string_length] ['USING' char_length_units] right_paren
    ;

regular_expression_substring_function =
    'SUBSTRING' left_paren character_value_expression 'SIMILAR' character_value_expression 'ESCAPE' escape_character right_paren
    ;

fold =
    ('UPPER' | 'LOWER') left_paren character_value_expression right_paren
    ;

transcoding =
    'CONVERT' left_paren character_value_expression 'USING' schema_qualified_name right_paren
    ;

character_transliteration =
    'TRANSLATE' left_paren character_value_expression 'USING' transliteration_name right_paren
    ;

trim_function =
    'TRIM' left_paren trim_operands right_paren
    ;

trim_operands =
    [[trim_specification] [character_value_expression] 'FROM'] character_value_expression
    ;

trim_specification =
  | 'LEADING'
  | 'TRAILING'
  | 'BOTH'
    ;

character_overlay_function =
    'OVERLAY' left_paren character_value_expression 'PLACING' character_value_expression 'FROM' start_position ['FOR' string_length] ['USING' char_length_units] right_paren
    ;

normalize_function =
    'NORMALIZE' left_paren character_value_expression right_paren
    ;

specific_type_method =
    user_defined_type_value_expression period 'SPECIFICTYPE'
    ;

blob_value_function =
  | blob_substring_function
  | blob_trim_function
  | blob_overlay_function
    ;

blob_substring_function =
    'SUBSTRING' left_paren blob_value_expression 'FROM' start_position ['FOR' string_length] right_paren
    ;

blob_trim_function =
    'TRIM' left_paren blob_trim_operands right_paren
    ;

blob_trim_operands =
    [[trim_specification] [blob_value_expression] 'FROM'] blob_value_expression
    ;

blob_overlay_function =
    'OVERLAY' left_paren blob_value_expression 'PLACING' blob_value_expression 'FROM' start_position ['FOR' string_length] right_paren
    ;

start_position =
    numeric_value_expression
    ;

string_length =
    numeric_value_expression
    ;

datetime_value_expression =
  | datetime_term
  | interval_value_expression plus_sign datetime_term
  | datetime_value_expression plus_sign interval_term
  | datetime_value_expression minus_sign interval_term
    ;

datetime_term =
    datetime_factor
    ;

datetime_factor =
    datetime_primary [time_zone]
    ;

datetime_primary =
  | value_expression_primary
  | datetime_value_function
    ;

time_zone =
    'AT' time_zone_specifier
    ;

time_zone_specifier =
  | 'LOCAL'
  | 'TIME' 'ZONE' interval_primary
    ;

datetime_value_function =
  | current_date_value_function
  | current_time_value_function
  | current_timestamp_value_function
  | current_local_time_value_function
  | current_local_timestamp_value_function
    ;

current_date_value_function =
    'CURRENT_DATE'
    ;

current_time_value_function =
    'CURRENT_TIME' [left_paren time_precision right_paren]
    ;

current_local_time_value_function =
    'LOCALTIME' [left_paren time_precision right_paren]
    ;

current_timestamp_value_function =
    'CURRENT_TIMESTAMP' [left_paren timestamp_precision right_paren]
    ;

current_local_timestamp_value_function =
    'LOCALTIMESTAMP' [left_paren timestamp_precision right_paren]
    ;

interval_value_expression =
  | interval_term
  | interval_value_expression_1 plus_sign interval_term_1
  | interval_value_expression_1 minus_sign interval_term_1
  | left_paren datetime_value_expression minus_sign datetime_term right_paren interval_qualifier
    ;

interval_term =
  | interval_factor
  | interval_term_2 asterisk factor
  | interval_term_2 solidus factor
  | term asterisk interval_factor
    ;

interval_factor =
    [sign] interval_primary
    ;

interval_primary =
  | value_expression_primary [interval_qualifier]
  | interval_absolute_value_function
    ;

interval_value_expression_1 =
    interval_value_expression
    ;

interval_term_1 =
    interval_term
    ;

interval_term_2 =
    interval_term
    ;

interval_absolute_value_function =
    'ABS' left_paren interval_value_expression right_paren
    ;

boolean_value_expression =
  | boolean_term
  | boolean_value_expression 'OR' boolean_term
    ;

boolean_term =
  | boolean_factor
  | boolean_term 'AND' boolean_factor
    ;

boolean_factor =
    ['NOT'] boolean_test
    ;

boolean_test =
    boolean_primary ['IS' ['NOT'] truth_value]
    ;

truth_value =
  | 'TRUE'
  | 'FALSE'
  | 'UNKNOWN'
    ;

boolean_primary =
  | predicate
  | boolean_predicand
    ;

boolean_predicand =
  | parenthesized_boolean_value_expression
  | nonparenthesized_value_expression_primary
    ;

parenthesized_boolean_value_expression =
    left_paren boolean_value_expression right_paren
    ;

array_value_expression =
  | array_concatenation
  | array_factor
    ;

array_concatenation =
    array_value_expression concatenation_operator array_factor
    ;

array_factor =
    value_expression_primary
    ;

array_value_constructor =
  | array_value_constructor_by_enumeration
  | array_value_constructor_by_query
    ;

array_value_constructor_by_enumeration =
    'ARRAY' left_bracket_or_trigraph array_element_list right_bracket_or_trigraph
    ;

array_element_list =
    array_element [{comma array_element}+]
    ;

array_element =
    value_expression
    ;

array_value_constructor_by_query =
    'ARRAY' left_paren query_expression [order_by_clause] right_paren
    ;

multiset_value_expression =
  | multiset_term
  | multiset_value_expression 'MULTISET' 'UNION' ['ALL' | 'DISTINCT'] multiset_term
  | multiset_value_expression 'MULTISET' 'EXCEPT' ['ALL' | 'DISTINCT'] multiset_term
    ;

multiset_term =
  | multiset_primary
  | multiset_term 'MULTISET' 'INTERSECT' ['ALL' | 'DISTINCT'] multiset_primary
    ;

multiset_primary =
  | multiset_set_function
  | value_expression_primary
    ;

multiset_set_function =
    'SET' left_paren multiset_value_expression right_paren
    ;

multiset_value_constructor =
  | multiset_value_constructor_by_enumeration
  | multiset_value_constructor_by_query
  | table_value_constructor_by_query
    ;

multiset_value_constructor_by_enumeration =
    'MULTISET' left_bracket_or_trigraph multiset_element_list right_bracket_or_trigraph
    ;

multiset_element_list =
    multiset_element [{comma multiset_element}+]
    ;

multiset_element =
    value_expression
    ;

multiset_value_constructor_by_query =
    'MULTISET' left_paren query_expression right_paren
    ;

table_value_constructor_by_query =
    'TABLE' left_paren query_expression right_paren
    ;

row_value_constructor =
  | common_value_expression
  | boolean_value_expression
  | explicit_row_value_constructor
    ;

explicit_row_value_constructor =
  | left_paren row_value_constructor_element comma row_value_constructor_element_list right_paren
  | 'ROW' left_paren row_value_constructor_element_list right_paren
  | subquery
    ;

row_value_constructor_element_list =
    row_value_constructor_element [{comma row_value_constructor_element}+]
    ;

row_value_constructor_element =
    value_expression
    ;

contextually_typed_row_value_constructor =
  | common_value_expression
  | boolean_value_expression
  | contextually_typed_value_specification
  | left_paren contextually_typed_row_value_constructor_element comma contextually_typed_row_value_constructor_element_list right_paren
  | 'ROW' left_paren contextually_typed_row_value_constructor_element_list right_paren
    ;

contextually_typed_row_value_constructor_element_list =
    contextually_typed_row_value_constructor_element [{comma contextually_typed_row_value_constructor_element}+]
    ;

contextually_typed_row_value_constructor_element =
  | value_expression
  | contextually_typed_value_specification
    ;

row_value_constructor_predicand =
  | common_value_expression
  | boolean_predicand
  | explicit_row_value_constructor
    ;

row_value_expression =
  | row_value_special_case
  | explicit_row_value_constructor
    ;

table_row_value_expression =
  | row_value_special_case
  | row_value_constructor
    ;

contextually_typed_row_value_expression =
  | row_value_special_case
  | contextually_typed_row_value_constructor
    ;

row_value_predicand =
  | row_value_special_case
  | row_value_constructor_predicand
    ;

row_value_special_case =
    nonparenthesized_value_expression_primary
    ;

table_value_constructor =
    'VALUES' row_value_expression_list
    ;

row_value_expression_list =
    table_row_value_expression [{comma table_row_value_expression}+]
    ;

contextually_typed_table_value_constructor =
    'VALUES' contextually_typed_row_value_expression_list
    ;

contextually_typed_row_value_expression_list =
    contextually_typed_row_value_expression [{comma contextually_typed_row_value_expression}+]
    ;

table_expression =
    from_clause [where_clause] [group_by_clause] [having_clause] [window_clause]
    ;

from_clause =
    'FROM' table_reference_list
    ;

table_reference_list =
    table_reference [{comma table_reference}+]
    ;

table_reference =
    table_primary_or_joined_table [sample_clause]
    ;

table_primary_or_joined_table =
  | table_primary
  | joined_table
    ;

sample_clause =
    'TABLESAMPLE' sample_method left_paren numeric_value_expression right_paren [repeatable_clause]
    ;

sample_method =
  | 'BERNOULLI'
  | 'SYSTEM'
    ;

repeatable_clause =
    'REPEATABLE' left_paren numeric_value_expression right_paren
    ;

table_primary =
  | table_or_query_name [['AS'] correlation_name [left_paren derived_column_list right_paren]]
  | table_subquery ['AS'] correlation_name [left_paren derived_column_list right_paren]
  | lateral_derived_table ['AS'] correlation_name [left_paren derived_column_list right_paren]
  | collection_derived_table ['AS'] correlation_name [left_paren derived_column_list right_paren]
  | table_function_derived_table ['AS'] correlation_name [left_paren derived_column_list right_paren]
  | only_spec [['AS'] correlation_name [left_paren derived_column_list right_paren]]
  | left_paren joined_table right_paren
    ;

only_spec =
    'ONLY' left_paren table_or_query_name right_paren
    ;

lateral_derived_table =
    'LATERAL' table_subquery
    ;

collection_derived_table =
    'UNNEST' left_paren collection_value_expression right_paren ['WITH' 'ORDINALITY']
    ;

table_function_derived_table =
    'TABLE' left_paren collection_value_expression right_paren
    ;

table_or_query_name =
  | table_name
  | query_name
    ;

derived_column_list =
    column_name_list
    ;

column_name_list =
    column_name [{comma column_name}+]
    ;

joined_table =
  | cross_join
  | qualified_join
  | natural_join
  | union_join
    ;

cross_join =
    table_reference 'CROSS' 'JOIN' table_primary
    ;

qualified_join =
    table_reference [join_type] 'JOIN' table_reference join_specification
    ;

natural_join =
    table_reference 'NATURAL' [join_type] 'JOIN' table_primary
    ;

union_join =
    table_reference 'UNION' 'JOIN' table_primary
    ;

join_specification =
  | join_condition
  | named_columns_join
    ;

join_condition =
    'ON' search_condition
    ;

named_columns_join =
    'USING' left_paren column_name_list right_paren
    ;

join_type =
  | 'INNER'
  | outer_join_type ['OUTER']
    ;

outer_join_type =
  | 'LEFT'
  | 'RIGHT'
  | 'FULL'
    ;

where_clause =
    'WHERE' search_condition
    ;

group_by_clause =
    'GROUP' 'BY' [set_quantifier] grouping_element_list
    ;

grouping_element_list =
    grouping_element [{comma grouping_element}+]
    ;

grouping_element =
  | ordinary_grouping_set
  | rollup_list
  | cube_list
  | grouping_sets_specification
  | empty_grouping_set
    ;

ordinary_grouping_set =
  | grouping_column_reference
  | left_paren grouping_column_reference_list right_paren
    ;

grouping_column_reference =
    column_reference [collate_clause]
    ;

grouping_column_reference_list =
    grouping_column_reference [{comma grouping_column_reference}+]
    ;

rollup_list =
    'ROLLUP' left_paren ordinary_grouping_set_list right_paren
    ;

ordinary_grouping_set_list =
    ordinary_grouping_set [{comma ordinary_grouping_set}+]
    ;

cube_list =
    'CUBE' left_paren ordinary_grouping_set_list right_paren
    ;

grouping_sets_specification =
    'GROUPING' 'SETS' left_paren grouping_set_list right_paren
    ;

grouping_set_list =
    grouping_set [{comma grouping_set}+]
    ;

grouping_set =
  | ordinary_grouping_set
  | rollup_list
  | cube_list
  | grouping_sets_specification
  | empty_grouping_set
    ;

empty_grouping_set =
    left_paren right_paren
    ;

having_clause =
    'HAVING' search_condition
    ;

window_clause =
    'WINDOW' window_definition_list
    ;

window_definition_list =
    window_definition [{comma window_definition}+]
    ;

window_definition =
    window_name 'AS' window_specification
    ;

window_specification =
    left_paren window_specification_details right_paren
    ;

window_specification_details =
    [window_name] [window_partition_clause] [window_order_clause] [window_frame_clause]
    ;

window_partition_clause =
    'PARTITION' 'BY' window_partition_column_reference_list
    ;

window_partition_column_reference_list =
    window_partition_column_reference [{comma window_partition_column_reference}+]
    ;

window_partition_column_reference =
    column_reference [collate_clause]
    ;

window_order_clause =
    'ORDER' 'BY' sort_specification_list
    ;

window_frame_clause =
    window_frame_units window_frame_extent [window_frame_exclusion]
    ;

window_frame_units =
  | 'ROWS'
  | 'RANGE'
    ;

window_frame_extent =
  | window_frame_start
  | window_frame_between
    ;

window_frame_start =
  | 'UNBOUNDED' 'PRECEDING'
  | window_frame_preceding
  | 'CURRENT' 'ROW'
    ;

window_frame_preceding =
    unsigned_value_specification 'PRECEDING'
    ;

window_frame_between =
    'BETWEEN' window_frame_bound 'AND' window_frame_bound
    ;

window_frame_bound =
  | window_frame_start
  | 'UNBOUNDED' 'FOLLOWING'
  | window_frame_following
    ;

window_frame_following =
    unsigned_value_specification 'FOLLOWING'
    ;

window_frame_exclusion =
  | 'EXCLUDE' 'CURRENT' 'ROW'
  | 'EXCLUDE' 'GROUP'
  | 'EXCLUDE' 'TIES'
  | 'EXCLUDE' 'NO' 'OTHERS'
    ;

query_specification =
    'SELECT' [set_quantifier] select_list table_expression
    ;

select_list =
  | asterisk
  | select_sublist [{comma select_sublist}+]
    ;

select_sublist =
  | derived_column
  | qualified_asterisk
    ;

qualified_asterisk =
  | asterisked_identifier_chain period asterisk
  | all_fields_reference
    ;

asterisked_identifier_chain =
    asterisked_identifier [{period asterisked_identifier}+]
    ;

asterisked_identifier =
    identifier
    ;

derived_column =
    value_expression [as_clause]
    ;

as_clause =
    ['AS'] column_name
    ;

all_fields_reference =
    value_expression_primary period asterisk ['AS' left_paren column_name_list right_paren]
    ;

query_expression =
    [with_clause] query_expression_body
    ;

with_clause =
    'WITH' ['RECURSIVE'] with_list
    ;

with_list =
    with_list_element [{comma with_list_element}+]
    ;

with_list_element =
    query_name [left_paren column_name_list right_paren] 'AS' left_paren query_expression right_paren [search_or_cycle_clause]
    ;

query_expression_body =
  | non_join_query_expression
  | joined_table
    ;

non_join_query_expression =
  | non_join_query_term
  | query_expression_body 'UNION' ['ALL' | 'DISTINCT'] [corresponding_spec] query_term
  | query_expression_body 'EXCEPT' ['ALL' | 'DISTINCT'] [corresponding_spec] query_term
    ;

query_term =
  | non_join_query_term
  | joined_table
    ;

non_join_query_term =
  | non_join_query_primary
  | query_term 'INTERSECT' ['ALL' | 'DISTINCT'] [corresponding_spec] query_primary
    ;

query_primary =
  | non_join_query_primary
  | joined_table
    ;

non_join_query_primary =
  | simple_table
  | left_paren non_join_query_expression right_paren
    ;

simple_table =
  | query_specification
  | table_value_constructor
  | explicit_table
    ;

explicit_table =
    'TABLE' table_or_query_name
    ;

corresponding_spec =
    'CORRESPONDING' ['BY' left_paren column_name_list right_paren]
    ;

search_or_cycle_clause =
  | search_clause
  | cycle_clause
  | search_clause cycle_clause
    ;

search_clause =
    'SEARCH' recursive_search_order 'SET' column_name
    ;

recursive_search_order =
  | 'DEPTH' 'FIRST' 'BY' sort_specification_list
  | 'BREADTH' 'FIRST' 'BY' sort_specification_list
    ;

cycle_clause =
    'CYCLE' cycle_column_list 'SET' column_name 'TO' value_expression 'DEFAULT' value_expression 'USING' column_name
    ;

cycle_column_list =
    cycle_column [{comma cycle_column}+]
    ;

cycle_column =
    column_name
    ;

table_subquery =
    subquery
    ;

subquery =
    left_paren query_expression right_paren
    ;

predicate =
  | comparison_predicate
  | between_predicate
  | in_predicate
  | like_predicate
  | similar_predicate
  | null_predicate
  | quantified_comparison_predicate
  | exists_predicate
  | unique_predicate
  | normalized_predicate
  | match_predicate
  | overlaps_predicate
  | distinct_predicate
  | member_predicate
  | submultiset_predicate
  | set_predicate
  | type_predicate
    ;

comparison_predicate =
    row_value_predicand comparison_predicate_part_2
    ;

comparison_predicate_part_2 =
    comp_op row_value_predicand
    ;

comp_op =
  | equals_operator
  | not_equals_operator
  | less_than_operator
  | greater_than_operator
  | less_than_or_equals_operator
  | greater_than_or_equals_operator
    ;

between_predicate =
    row_value_predicand between_predicate_part_2
    ;

between_predicate_part_2 =
    ['NOT'] 'BETWEEN' ['ASYMMETRIC' | 'SYMMETRIC'] row_value_predicand 'AND' row_value_predicand
    ;

in_predicate =
    row_value_predicand in_predicate_part_2
    ;

in_predicate_part_2 =
    ['NOT'] 'IN' in_predicate_value
    ;

in_predicate_value =
  | table_subquery
  | left_paren in_value_list right_paren
    ;

in_value_list =
    row_value_expression [{comma row_value_expression}+]
    ;

like_predicate =
  | character_like_predicate
  | octet_like_predicate
    ;

character_like_predicate =
    row_value_predicand character_like_predicate_part_2
    ;

character_like_predicate_part_2 =
    ['NOT'] 'LIKE' character_value_expression ['ESCAPE' escape_character]
    ;

escape_character =
    character_value_expression
    ;

octet_like_predicate =
    row_value_predicand octet_like_predicate_part_2
    ;

octet_like_predicate_part_2 =
    ['NOT'] 'LIKE' blob_value_expression ['ESCAPE' blob_value_expression]
    ;

similar_predicate =
    row_value_predicand similar_predicate_part_2
    ;

similar_predicate_part_2 =
    ['NOT'] 'SIMILAR' 'TO' character_value_expression ['ESCAPE' escape_character]
    ;

null_predicate =
    row_value_predicand null_predicate_part_2
    ;

null_predicate_part_2 =
    'IS' ['NOT'] 'NULL'
    ;

quantified_comparison_predicate =
    row_value_predicand quantified_comparison_predicate_part_2
    ;

quantified_comparison_predicate_part_2 =
    comp_op quantifier table_subquery
    ;

quantifier =
  | all
  | some
    ;

all =
    'ALL'
    ;

some =
  | 'SOME'
  | 'ANY'
    ;

exists_predicate =
    'EXISTS' table_subquery
    ;

unique_predicate =
    'UNIQUE' table_subquery
    ;

normalized_predicate =
    string_value_expression 'IS' ['NOT'] 'NORMALIZED'
    ;

match_predicate =
    row_value_predicand match_predicate_part_2
    ;

match_predicate_part_2 =
    'MATCH' ['UNIQUE'] ['SIMPLE' | 'PARTIAL' | 'FULL'] table_subquery
    ;

overlaps_predicate =
    overlaps_predicate_part_1 overlaps_predicate_part_2
    ;

overlaps_predicate_part_1 =
    row_value_predicand
    ;

overlaps_predicate_part_2 =
    'OVERLAPS' row_value_predicand
    ;

distinct_predicate =
    row_value_predicand distinct_predicate_part_2
    ;

distinct_predicate_part_2 =
    'IS' ['NOT'] 'DISTINCT' 'FROM' row_value_predicand
    ;

member_predicate =
    row_value_predicand member_predicate_part_2
    ;

member_predicate_part_2 =
    ['NOT'] 'MEMBER' ['OF'] multiset_value_expression
    ;

submultiset_predicate =
    row_value_predicand submultiset_predicate_part_2
    ;

submultiset_predicate_part_2 =
    ['NOT'] 'SUBMULTISET' ['OF'] multiset_value_expression
    ;

set_predicate =
    row_value_predicand set_predicate_part_2
    ;

set_predicate_part_2 =
    'IS' ['NOT'] 'A' 'SET'
    ;

type_predicate =
    row_value_predicand type_predicate_part_2
    ;

type_predicate_part_2 =
    'IS' ['NOT'] 'OF' left_paren type_list right_paren
    ;

type_list =
    user_defined_type_specification [{comma user_defined_type_specification}+]
    ;

user_defined_type_specification =
  | path_resolved_user_defined_type_name
  | exclusive_user_defined_type_specification
    ;

exclusive_user_defined_type_specification =
    'ONLY' path_resolved_user_defined_type_name
    ;

search_condition =
    boolean_value_expression
    ;

interval_qualifier =
  | start_field 'TO' end_field
  | single_datetime_field
    ;

start_field =
    non_second_primary_datetime_field [left_paren interval_leading_field_precision right_paren]
    ;

end_field =
  | non_second_primary_datetime_field
  | 'SECOND' [left_paren interval_fractional_seconds_precision right_paren]
    ;

single_datetime_field =
  | non_second_primary_datetime_field [left_paren interval_leading_field_precision right_paren]
  | 'SECOND' [left_paren interval_leading_field_precision [comma interval_fractional_seconds_precision] right_paren]
    ;

primary_datetime_field =
  | non_second_primary_datetime_field
  | 'SECOND'
    ;

non_second_primary_datetime_field =
  | 'YEAR'
  | 'MONTH'
  | 'DAY'
  | 'HOUR'
  | 'MINUTE'
    ;

interval_fractional_seconds_precision =
    unsigned_integer
    ;

interval_leading_field_precision =
    unsigned_integer
    ;

language_clause =
    'LANGUAGE' language_name
    ;

language_name =
  | 'ADA'
  | 'C'
  | 'COBOL'
  | 'FORTRAN'
  | 'M'
  | 'MUMPS'
  | 'PASCAL'
  | 'PLI'
  | 'SQL'
    ;

path_specification =
    'PATH' schema_name_list
    ;

schema_name_list =
    schema_name [{comma schema_name}+]
    ;

routine_invocation =
    routine_name sql_argument_list
    ;

routine_name =
    [schema_name period] qualified_identifier
    ;

sql_argument_list =
    left_paren [sql_argument [{comma sql_argument}+]] right_paren
    ;

sql_argument =
  | value_expression
  | generalized_expression
  | target_specification
    ;

generalized_expression =
    value_expression 'AS' path_resolved_user_defined_type_name
    ;

character_set_specification =
  | character_set_name
  | character_set_name
  | character_set_name
    ;

specific_routine_designator =
  | 'SPECIFIC' routine_type specific_name
  | routine_type member_name ['FOR' schema_resolved_user_defined_type_name]
    ;

routine_type =
  | 'ROUTINE'
  | 'FUNCTION'
  | 'PROCEDURE'
  | ['INSTANCE' | 'STATIC' | 'CONSTRUCTOR'] 'METHOD'
    ;

member_name =
    member_name_alternatives [data_type_list]
    ;

member_name_alternatives =
  | schema_qualified_routine_name
  | method_name
    ;

data_type_list =
    left_paren [data_type [{comma data_type}+]] right_paren
    ;

collate_clause =
    'COLLATE' collation_name
    ;

constraint_name_definition =
    'CONSTRAINT' constraint_name
    ;

constraint_characteristics =
  | constraint_check_time [['NOT'] 'DEFERRABLE']
  | ['NOT'] 'DEFERRABLE' [constraint_check_time]
    ;

constraint_check_time =
  | 'INITIALLY' 'DEFERRED'
  | 'INITIALLY' 'IMMEDIATE'
    ;

aggregate_function =
  | 'COUNT' left_paren asterisk right_paren [filter_clause]
  | general_set_function [filter_clause]
  | binary_set_function [filter_clause]
  | ordered_set_function [filter_clause]
    ;

general_set_function =
    computational_operation left_paren [set_quantifier] value_expression right_paren
    ;

computational_operation =
  | 'AVG'
  | 'MAX'
  | 'MIN'
  | 'SUM'
  | 'EVERY'
  | 'ANY'
  | 'SOME'
  | 'COUNT'
  | 'STDDEV_POP'
  | 'STDDEV_SAMP'
  | 'VAR_SAMP'
  | 'VAR_POP'
  | 'COLLECT'
  | 'FUSION'
  | 'INTERSECTION'
    ;

set_quantifier =
  | 'DISTINCT'
  | 'ALL'
    ;

filter_clause =
    'FILTER' left_paren 'WHERE' search_condition right_paren
    ;

binary_set_function =
    binary_set_function_type left_paren numeric_value_expression comma numeric_value_expression right_paren
    ;

binary_set_function_type =
  | 'COVAR_POP'
  | 'COVAR_SAMP'
  | 'CORR'
  | 'REGR_SLOPE'
  | 'REGR_INTERCEPT'
  | 'REGR_COUNT'
  | 'REGR_R2'
  | 'REGR_AVGX'
  | 'REGR_AVGY'
  | 'REGR_SXX'
  | 'REGR_SYY'
  | 'REGR_SXY'
    ;

ordered_set_function =
  | hypothetical_set_function
  | inverse_distribution_function
    ;

hypothetical_set_function =
    rank_function_type left_paren hypothetical_set_function_value_expression_list right_paren within_group_specification
    ;

within_group_specification =
    'WITHIN' 'GROUP' left_paren 'ORDER' 'BY' sort_specification_list right_paren
    ;

hypothetical_set_function_value_expression_list =
    value_expression [{comma value_expression}+]
    ;

inverse_distribution_function =
    inverse_distribution_function_type left_paren numeric_value_expression right_paren within_group_specification
    ;

inverse_distribution_function_type =
  | 'PERCENTILE_CONT'
  | 'PERCENTILE_DISC'
    ;

sort_specification_list =
    sort_specification [{comma sort_specification}+]
    ;

sort_specification =
    value_expression [ordering_specification] [null_ordering]
    ;

ordering_specification =
  | 'ASC'
  | 'DESC'
    ;

null_ordering =
  | 'NULLS' 'FIRST'
  | 'NULLS' 'LAST'
    ;

schema_definition =
    'CREATE' 'SCHEMA' schema_name_clause [schema_character_set_or_path] [{schema_element}+]
    ;

schema_character_set_or_path =
  | schema_character_set_specification
  | schema_path_specification
  | schema_character_set_specification schema_path_specification
  | schema_path_specification schema_character_set_specification
    ;

schema_name_clause =
  | schema_name
  | 'AUTHORIZATION' schema_authorization_identifier
  | schema_name 'AUTHORIZATION' schema_authorization_identifier
    ;

schema_authorization_identifier =
    authorization_identifier
    ;

schema_character_set_specification =
    'DEFAULT' 'CHARACTER' 'SET' character_set_specification
    ;

schema_path_specification =
    path_specification
    ;

schema_element =
  | table_definition
  | view_definition
  | domain_definition
  | character_set_definition
  | collation_definition
  | transliteration_definition
  | assertion_definition
  | trigger_definition
  | user_defined_type_definition
  | user_defined_cast_definition
  | user_defined_ordering_definition
  | transform_definition
  | schema_routine
  | sequence_generator_definition
  | grant_statement
  | role_definition
    ;

drop_schema_statement =
    'DROP' 'SCHEMA' schema_name drop_behavior
    ;

drop_behavior =
  | 'CASCADE'
  | 'RESTRICT'
    ;

table_definition =
    'CREATE' [table_scope] 'TABLE' table_name table_contents_source ['ON' 'COMMIT' table_commit_action 'ROWS']
    ;

table_contents_source =
  | table_element_list
  | 'OF' path_resolved_user_defined_type_name [subtable_clause] [table_element_list]
  | as_subquery_clause
    ;

table_scope =
    global_or_local 'TEMPORARY'
    ;

global_or_local =
  | 'GLOBAL'
  | 'LOCAL'
    ;

table_commit_action =
  | 'PRESERVE'
  | 'DELETE'
    ;

table_element_list =
    left_paren table_element [{comma table_element}+] right_paren
    ;

table_element =
  | column_definition
  | table_constraint_definition
  | like_clause
  | self_referencing_column_specification
  | column_options
    ;

self_referencing_column_specification =
    'REF' 'IS' column_name reference_generation
    ;

reference_generation =
  | 'SYSTEM' 'GENERATED'
  | 'USER' 'GENERATED'
  | 'DERIVED'
    ;

column_options =
    column_name 'WITH' 'OPTIONS' column_option_list
    ;

column_option_list =
    [scope_clause] [default_clause] [{column_constraint_definition}+]
    ;

subtable_clause =
    'UNDER' table_name
    ;

like_clause =
    'LIKE' table_name [like_options]
    ;

like_options =
  | identity_option
  | column_default_option
    ;

identity_option =
  | 'INCLUDING' 'IDENTITY'
  | 'EXCLUDING' 'IDENTITY'
    ;

column_default_option =
  | 'INCLUDING' 'DEFAULTS'
  | 'EXCLUDING' 'DEFAULTS'
    ;

as_subquery_clause =
    [left_paren column_name_list right_paren] 'AS' subquery with_or_without_data
    ;

with_or_without_data =
  | 'WITH' 'NO' 'DATA'
  | 'WITH' 'DATA'
    ;

column_definition =
    column_name [data_type | domain_name] [reference_scope_check] [default_clause | identity_column_specification | generation_clause] [{column_constraint_definition}+] [collate_clause]
    ;

column_constraint_definition =
    [constraint_name_definition] column_constraint [constraint_characteristics]
    ;

column_constraint =
  | 'NOT' 'NULL'
  | unique_specification
  | references_specification
  | check_constraint_definition
    ;

reference_scope_check =
    'REFERENCES' 'ARE' ['NOT'] 'CHECKED' ['ON' 'DELETE' referential_action]
    ;

identity_column_specification =
    'GENERATED' ('ALWAYS' | 'BY' 'DEFAULT') 'AS' 'IDENTITY' [left_paren common_sequence_generator_options right_paren]
    ;

generation_clause =
    generation_rule 'AS' generation_expression
    ;

generation_rule =
    'GENERATED' 'ALWAYS'
    ;

generation_expression =
    left_paren value_expression right_paren
    ;

default_clause =
    'DEFAULT' default_option
    ;

default_option =
  | literal
  | datetime_value_function
  | 'USER'
  | 'CURRENT_USER'
  | 'CURRENT_ROLE'
  | 'SESSION_USER'
  | 'SYSTEM_USER'
  | 'CURRENT_PATH'
  | implicitly_typed_value_specification
    ;

table_constraint_definition =
    [constraint_name_definition] table_constraint [constraint_characteristics]
    ;

table_constraint =
  | unique_constraint_definition
  | referential_constraint_definition
  | check_constraint_definition
    ;

unique_constraint_definition =
  | unique_specification left_paren column_name_list right_paren
  | 'UNIQUE' '(' 'VALUE' ')'
    ;

unique_specification =
  | 'UNIQUE'
  | 'PRIMARY' 'KEY'
    ;

referential_constraint_definition =
    'FOREIGN' 'KEY' left_paren reference_column_list right_paren references_specification
    ;

references_specification =
    'REFERENCES' referenced_table_and_columns ['MATCH' match_type] [referential_triggered_action]
    ;

match_type =
  | 'FULL'
  | 'PARTIAL'
  | 'SIMPLE'
    ;

referenced_table_and_columns =
    table_name [left_paren reference_column_list right_paren]
    ;

reference_column_list =
    column_name_list
    ;

referential_triggered_action =
  | update_rule [delete_rule]
  | delete_rule [update_rule]
    ;

update_rule =
    'ON' 'UPDATE' referential_action
    ;

delete_rule =
    'ON' 'DELETE' referential_action
    ;

referential_action =
  | 'CASCADE'
  | 'SET' 'NULL'
  | 'SET' 'DEFAULT'
  | 'RESTRICT'
  | 'NO' 'ACTION'
    ;

check_constraint_definition =
    'CHECK' left_paren search_condition right_paren
    ;

alter_table_statement =
    'ALTER' 'TABLE' table_name alter_table_action
    ;

alter_table_action =
  | add_column_definition
  | alter_column_definition
  | drop_column_definition
  | add_table_constraint_definition
  | drop_table_constraint_definition
    ;

add_column_definition =
    'ADD' ['COLUMN'] column_definition
    ;

alter_column_definition =
    'ALTER' ['COLUMN'] column_name alter_column_action
    ;

alter_column_action =
  | set_column_default_clause
  | drop_column_default_clause
  | add_column_scope_clause
  | drop_column_scope_clause
  | alter_identity_column_specification
    ;

set_column_default_clause =
    'SET' default_clause
    ;

drop_column_default_clause =
    'DROP' 'DEFAULT'
    ;

add_column_scope_clause =
    'ADD' scope_clause
    ;

drop_column_scope_clause =
    'DROP' 'SCOPE' drop_behavior
    ;

alter_identity_column_specification =
    {alter_identity_column_option}+
    ;

alter_identity_column_option =
  | alter_sequence_generator_restart_option
  | 'SET' basic_sequence_generator_option
    ;

drop_column_definition =
    'DROP' ['COLUMN'] column_name drop_behavior
    ;

add_table_constraint_definition =
    'ADD' table_constraint_definition
    ;

drop_table_constraint_definition =
    'DROP' 'CONSTRAINT' constraint_name drop_behavior
    ;

drop_table_statement =
    'DROP' 'TABLE' table_name drop_behavior
    ;

view_definition =
    'CREATE' ['RECURSIVE'] 'VIEW' table_name view_specification 'AS' query_expression ['WITH' [levels_clause] 'CHECK' 'OPTION']
    ;

view_specification =
  | regular_view_specification
  | referenceable_view_specification
    ;

regular_view_specification =
    [left_paren column_name_list right_paren]
    ;

referenceable_view_specification =
    'OF' path_resolved_user_defined_type_name [subview_clause] [view_element_list]
    ;

subview_clause =
    'UNDER' table_name
    ;

view_element_list =
    left_paren view_element [{comma view_element}+] right_paren
    ;

view_element =
  | self_referencing_column_specification
  | view_column_option
    ;

view_column_option =
    column_name 'WITH' 'OPTIONS' scope_clause
    ;

levels_clause =
  | 'CASCADED'
  | 'LOCAL'
    ;

drop_view_statement =
    'DROP' 'VIEW' table_name drop_behavior
    ;

domain_definition =
    'CREATE' 'DOMAIN' domain_name ['AS'] data_type [default_clause] [{domain_constraint}+] [collate_clause]
    ;

domain_constraint =
    [constraint_name_definition] check_constraint_definition [constraint_characteristics]
    ;

alter_domain_statement =
    'ALTER' 'DOMAIN' domain_name alter_domain_action
    ;

alter_domain_action =
  | set_domain_default_clause
  | drop_domain_default_clause
  | add_domain_constraint_definition
  | drop_domain_constraint_definition
    ;

set_domain_default_clause =
    'SET' default_clause
    ;

drop_domain_default_clause =
    'DROP' 'DEFAULT'
    ;

add_domain_constraint_definition =
    'ADD' domain_constraint
    ;

drop_domain_constraint_definition =
    'DROP' 'CONSTRAINT' constraint_name
    ;

drop_domain_statement =
    'DROP' 'DOMAIN' domain_name drop_behavior
    ;

character_set_definition =
    'CREATE' 'CHARACTER' 'SET' character_set_name ['AS'] character_set_source [collate_clause]
    ;

character_set_source =
    'GET' character_set_specification
    ;

drop_character_set_statement =
    'DROP' 'CHARACTER' 'SET' character_set_name
    ;

collation_definition =
    'CREATE' 'COLLATION' collation_name 'FOR' character_set_specification 'FROM' collation_name [pad_characteristic]
    ;

pad_characteristic =
  | 'NO' 'PAD'
  | 'PAD' 'SPACE'
    ;

drop_collation_statement =
    'DROP' 'COLLATION' collation_name drop_behavior
    ;

transliteration_definition =
    'CREATE' 'TRANSLATION' transliteration_name 'FOR' character_set_specification 'TO' character_set_specification 'FROM' transliteration_source
    ;

transliteration_source =
  | transliteration_name
  | specific_routine_designator
    ;

drop_transliteration_statement =
    'DROP' 'TRANSLATION' transliteration_name
    ;

assertion_definition =
    'CREATE' 'ASSERTION' constraint_name 'CHECK' left_paren search_condition right_paren [constraint_characteristics]
    ;

drop_assertion_statement =
    'DROP' 'ASSERTION' constraint_name
    ;

trigger_definition =
    'CREATE' 'TRIGGER' trigger_name trigger_action_time trigger_event 'ON' table_name ['REFERENCING' old_or_new_values_alias_list] triggered_action
    ;

trigger_action_time =
  | 'BEFORE'
  | 'AFTER'
    ;

trigger_event =
  | 'INSERT'
  | 'DELETE'
  | 'UPDATE' ['OF' column_name_list]
    ;

triggered_action =
    ['FOR' 'EACH' ('ROW' | 'STATEMENT')] ['WHEN' left_paren search_condition right_paren] triggered_sql_statement
    ;

triggered_sql_statement =
  | sql_procedure_statement
  | 'BEGIN' 'ATOMIC' {sql_procedure_statement semicolon}+ 'END'
    ;

old_or_new_values_alias_list =
    {old_or_new_values_alias}+
    ;

old_or_new_values_alias =
  | 'OLD' ['ROW'] ['AS'] correlation_name
  | 'NEW' ['ROW'] ['AS'] correlation_name
  | 'OLD' 'TABLE' ['AS'] identifier
  | 'NEW' 'TABLE' ['AS'] identifier
    ;

drop_trigger_statement =
    'DROP' 'TRIGGER' trigger_name
    ;

user_defined_type_definition =
    'CREATE' 'TYPE' user_defined_type_body
    ;

user_defined_type_body =
    schema_resolved_user_defined_type_name [subtype_clause] ['AS' representation] [user_defined_type_option_list] [method_specification_list]
    ;

user_defined_type_option_list =
    user_defined_type_option [{user_defined_type_option}+]
    ;

user_defined_type_option =
  | instantiable_clause
  | finality
  | reference_type_specification
  | ref_cast_option
  | cast_option
    ;

subtype_clause =
    'UNDER' path_resolved_user_defined_type_name
    ;

representation =
  | predefined_type
  | member_list
    ;

member_list =
    left_paren member [{comma member}+] right_paren
    ;

member =
    attribute_definition
    ;

instantiable_clause =
  | 'INSTANTIABLE'
  | 'NOT' 'INSTANTIABLE'
    ;

finality =
  | 'FINAL'
  | 'NOT' 'FINAL'
    ;

reference_type_specification =
  | user_defined_representation
  | derived_representation
  | system_generated_representation
    ;

user_defined_representation =
    'REF' 'USING' predefined_type
    ;

derived_representation =
    'REF' 'FROM' list_of_attributes
    ;

system_generated_representation =
    'REF' 'IS' 'SYSTEM' 'GENERATED'
    ;

ref_cast_option =
    [cast_to_ref] [cast_to_type]
    ;

cast_to_ref =
    'CAST' left_paren 'SOURCE' 'AS' 'REF' right_paren 'WITH' identifier
    ;

cast_to_type =
    'CAST' left_paren 'REF' 'AS' 'SOURCE' right_paren 'WITH' identifier
    ;

list_of_attributes =
    left_paren attribute_name [{comma attribute_name}+] right_paren
    ;

cast_option =
    [cast_to_distinct] [cast_to_source]
    ;

cast_to_distinct =
    'CAST' left_paren 'SOURCE' 'AS' 'DISTINCT' right_paren 'WITH' identifier
    ;

cast_to_source =
    'CAST' left_paren 'DISTINCT' 'AS' 'SOURCE' right_paren 'WITH' identifier
    ;

method_specification_list =
    method_specification [{comma method_specification}+]
    ;

method_specification =
  | original_method_specification
  | overriding_method_specification
    ;

original_method_specification =
    partial_method_specification ['SELF' 'AS' 'RESULT'] ['SELF' 'AS' 'LOCATOR'] [method_characteristics]
    ;

overriding_method_specification =
    'OVERRIDING' partial_method_specification
    ;

partial_method_specification =
    ['INSTANCE' | 'STATIC' | 'CONSTRUCTOR'] 'METHOD' method_name sql_parameter_declaration_list returns_clause ['SPECIFIC' specific_method_name]
    ;

specific_method_name =
    [schema_name period] qualified_identifier
    ;

method_characteristics =
    {method_characteristic}+
    ;

method_characteristic =
  | language_clause
  | parameter_style_clause
  | deterministic_characteristic
  | sql_data_access_indication
  | null_call_clause
    ;

attribute_definition =
    attribute_name data_type [reference_scope_check] [default_clause] [collate_clause]
    ;

alter_type_statement =
    'ALTER' 'TYPE' schema_resolved_user_defined_type_name alter_type_action
    ;

alter_type_action =
  | add_attribute_definition
  | drop_attribute_definition
  | add_original_method_specification
  | add_overriding_method_specification
  | drop_method_specification
    ;

add_attribute_definition =
    'ADD' 'ATTRIBUTE' attribute_definition
    ;

drop_attribute_definition =
    'DROP' 'ATTRIBUTE' attribute_name 'RESTRICT'
    ;

add_original_method_specification =
    'ADD' original_method_specification
    ;

add_overriding_method_specification =
    'ADD' overriding_method_specification
    ;

drop_method_specification =
    'DROP' specific_method_specification_designator 'RESTRICT'
    ;

specific_method_specification_designator =
    ['INSTANCE' | 'STATIC' | 'CONSTRUCTOR'] 'METHOD' method_name data_type_list
    ;

drop_data_type_statement =
    'DROP' 'TYPE' schema_resolved_user_defined_type_name drop_behavior
    ;

schema_routine =
  | schema_procedure
  | schema_function
    ;

schema_procedure =
    'CREATE' sql_invoked_procedure
    ;

schema_function =
    'CREATE' sql_invoked_function
    ;

sql_invoked_procedure =
    'PROCEDURE' schema_qualified_routine_name sql_parameter_declaration_list routine_characteristics routine_body
    ;

sql_invoked_function =
    (function_specification | method_specification_designator) routine_body
    ;

sql_parameter_declaration_list =
    left_paren [sql_parameter_declaration [{comma sql_parameter_declaration}+]] right_paren
    ;

sql_parameter_declaration =
    [parameter_mode] [identifier] parameter_type ['RESULT']
    ;

parameter_mode =
  | 'IN'
  | 'OUT'
  | 'INOUT'
    ;

parameter_type =
    data_type [locator_indication]
    ;

locator_indication =
    'AS' 'LOCATOR'
    ;

function_specification =
    'FUNCTION' schema_qualified_routine_name sql_parameter_declaration_list returns_clause routine_characteristics [dispatch_clause]
    ;

method_specification_designator =
  | 'SPECIFIC' 'METHOD' specific_method_name
  | ['INSTANCE' | 'STATIC' | 'CONSTRUCTOR'] 'METHOD' method_name sql_parameter_declaration_list [returns_clause] 'FOR' schema_resolved_user_defined_type_name
    ;

routine_characteristics =
    [{routine_characteristic}+]
    ;

routine_characteristic =
  | language_clause
  | parameter_style_clause
  | 'SPECIFIC' specific_name
  | deterministic_characteristic
  | sql_data_access_indication
  | null_call_clause
  | dynamic_result_sets_characteristic
  | savepoint_level_indication
    ;

savepoint_level_indication =
  | 'NEW' 'SAVEPOINT' 'LEVEL'
  | 'OLD' 'SAVEPOINT' 'LEVEL'
    ;

dynamic_result_sets_characteristic =
    'DYNAMIC' 'RESULT' 'SETS' unsigned_integer
    ;

parameter_style_clause =
    'PARAMETER' 'STYLE' parameter_style
    ;

dispatch_clause =
    'STATIC' 'DISPATCH'
    ;

returns_clause =
    'RETURNS' returns_type
    ;

returns_type =
  | returns_data_type [result_cast]
  | returns_table_type
    ;

returns_table_type =
    'TABLE' table_function_column_list
    ;

table_function_column_list =
    left_paren table_function_column_list_element [{comma table_function_column_list_element}+] right_paren
    ;

table_function_column_list_element =
    column_name data_type
    ;

result_cast =
    'CAST' 'FROM' result_cast_from_type
    ;

result_cast_from_type =
    data_type [locator_indication]
    ;

returns_data_type =
    data_type [locator_indication]
    ;

routine_body =
  | sql_routine_spec
  | external_body_reference
    ;

sql_routine_spec =
    [rights_clause] sql_procedure_statement
    ;

rights_clause =
  | 'SQL' 'SECURITY' 'INVOKER'
  | 'SQL' 'SECURITY' 'DEFINER'
    ;

external_body_reference =
    'EXTERNAL' ['NAME' external_routine_name] [parameter_style_clause] [transform_group_specification] [external_security_clause]
    ;

external_security_clause =
  | 'EXTERNAL' 'SECURITY' 'DEFINER'
  | 'EXTERNAL' 'SECURITY' 'INVOKER'
  | 'EXTERNAL' 'SECURITY' 'IMPLEMENTATION' 'DEFINED'
    ;

parameter_style =
  | 'SQL'
  | 'GENERAL'
    ;

deterministic_characteristic =
  | 'DETERMINISTIC'
  | 'NOT' 'DETERMINISTIC'
    ;

sql_data_access_indication =
  | 'NO' 'SQL'
  | 'CONTAINS' 'SQL'
  | 'READS' 'SQL' 'DATA'
  | 'MODIFIES' 'SQL' 'DATA'
    ;

null_call_clause =
  | 'RETURNS' 'NULL' 'ON' 'NULL' 'INPUT'
  | 'CALLED' 'ON' 'NULL' 'INPUT'
    ;

transform_group_specification =
    'TRANSFORM' 'GROUP' (group_name | multiple_group_specification)
    ;

multiple_group_specification =
    group_specification [{comma group_specification}+]
    ;

group_specification =
    group_name 'FOR' 'TYPE' path_resolved_user_defined_type_name
    ;

alter_routine_statement =
    'ALTER' specific_routine_designator alter_routine_characteristics alter_routine_behavior
    ;

alter_routine_characteristics =
    {alter_routine_characteristic}+
    ;

alter_routine_characteristic =
  | language_clause
  | parameter_style_clause
  | sql_data_access_indication
  | null_call_clause
  | dynamic_result_sets_characteristic
  | 'NAME' external_routine_name
    ;

alter_routine_behavior =
    'RESTRICT'
    ;

drop_routine_statement =
    'DROP' specific_routine_designator drop_behavior
    ;

user_defined_cast_definition =
    'CREATE' 'CAST' left_paren source_data_type 'AS' target_data_type right_paren 'WITH' specific_routine_designator ['AS' 'ASSIGNMENT']
    ;

source_data_type =
    data_type
    ;

target_data_type =
    data_type
    ;

drop_user_defined_cast_statement =
    'DROP' 'CAST' left_paren source_data_type 'AS' target_data_type right_paren drop_behavior
    ;

user_defined_ordering_definition =
    'CREATE' 'ORDERING' 'FOR' schema_resolved_user_defined_type_name ordering_form
    ;

ordering_form =
  | equals_ordering_form
  | full_ordering_form
    ;

equals_ordering_form =
    'EQUALS' 'ONLY' 'BY' ordering_category
    ;

full_ordering_form =
    'ORDER' 'FULL' 'BY' ordering_category
    ;

ordering_category =
  | relative_category
  | map_category
  | state_category
    ;

relative_category =
    'RELATIVE' 'WITH' specific_routine_designator
    ;

map_category =
    'MAP' 'WITH' specific_routine_designator
    ;

state_category =
    'STATE' [specific_name]
    ;

drop_user_defined_ordering_statement =
    'DROP' 'ORDERING' 'FOR' schema_resolved_user_defined_type_name drop_behavior
    ;

transform_definition =
    'CREATE' ('TRANSFORM' | 'TRANSFORMS') 'FOR' schema_resolved_user_defined_type_name {transform_group}+
    ;

transform_group =
    group_name left_paren transform_element_list right_paren
    ;

group_name =
    identifier
    ;

transform_element_list =
    transform_element [comma transform_element]
    ;

transform_element =
  | to_sql
  | from_sql
    ;

to_sql =
    'TO' 'SQL' 'WITH' specific_routine_designator
    ;

from_sql =
    'FROM' 'SQL' 'WITH' specific_routine_designator
    ;

alter_transform_statement =
    'ALTER' ('TRANSFORM' | 'TRANSFORMS') 'FOR' schema_resolved_user_defined_type_name {alter_group}+
    ;

alter_group =
    group_name left_paren alter_transform_action_list right_paren
    ;

alter_transform_action_list =
    alter_transform_action [{comma alter_transform_action}+]
    ;

alter_transform_action =
  | add_transform_element_list
  | drop_transform_element_list
    ;

add_transform_element_list =
    'ADD' left_paren transform_element_list right_paren
    ;

drop_transform_element_list =
    'DROP' left_paren transform_kind [comma transform_kind] drop_behavior right_paren
    ;

transform_kind =
  | 'TO' 'SQL'
  | 'FROM' 'SQL'
    ;

drop_transform_statement =
    'DROP' ('TRANSFORM' | 'TRANSFORMS') transforms_to_be_dropped 'FOR' schema_resolved_user_defined_type_name drop_behavior
    ;

transforms_to_be_dropped =
  | 'ALL'
  | group_name
    ;

sequence_generator_definition =
    'CREATE' 'SEQUENCE' sequence_generator_name [sequence_generator_options]
    ;

sequence_generator_options =
    {sequence_generator_option}+
    ;

sequence_generator_option =
  | sequence_generator_data_type_option
  | common_sequence_generator_options
    ;

common_sequence_generator_options =
    {common_sequence_generator_option}+
    ;

common_sequence_generator_option =
  | sequence_generator_start_with_option
  | basic_sequence_generator_option
    ;

basic_sequence_generator_option =
  | sequence_generator_increment_by_option
  | sequence_generator_maxvalue_option
  | sequence_generator_minvalue_option
  | sequence_generator_cycle_option
    ;

sequence_generator_data_type_option =
    'AS' data_type
    ;

sequence_generator_start_with_option =
    'START' 'WITH' signed_numeric_literal
    ;

sequence_generator_increment_by_option =
    'INCREMENT' 'BY' signed_numeric_literal
    ;

sequence_generator_maxvalue_option =
  | 'MAXVALUE' signed_numeric_literal
  | 'NO' 'MAXVALUE'
    ;

sequence_generator_minvalue_option =
  | 'MINVALUE' signed_numeric_literal
  | 'NO' 'MINVALUE'
    ;

sequence_generator_cycle_option =
  | 'CYCLE'
  | 'NO' 'CYCLE'
    ;

alter_sequence_generator_statement =
    'ALTER' 'SEQUENCE' sequence_generator_name alter_sequence_generator_options
    ;

alter_sequence_generator_options =
    {alter_sequence_generator_option}+
    ;

alter_sequence_generator_option =
  | alter_sequence_generator_restart_option
  | basic_sequence_generator_option
    ;

alter_sequence_generator_restart_option =
    'RESTART' 'WITH' signed_numeric_literal
    ;

drop_sequence_generator_statement =
    'DROP' 'SEQUENCE' sequence_generator_name drop_behavior
    ;

grant_statement =
  | grant_privilege_statement
  | grant_role_statement
    ;

grant_privilege_statement =
    'GRANT' privileges 'TO' grantee [{comma grantee}+] ['WITH' 'HIERARCHY' 'OPTION'] ['WITH' 'GRANT' 'OPTION'] ['GRANTED' 'BY' grantor]
    ;

privileges =
    object_privileges 'ON' object_name
    ;

object_name =
  | ['TABLE'] table_name
  | 'DOMAIN' domain_name
  | 'COLLATION' collation_name
  | 'CHARACTER' 'SET' character_set_name
  | 'TRANSLATION' transliteration_name
  | 'TYPE' schema_resolved_user_defined_type_name
  | 'SEQUENCE' sequence_generator_name
  | specific_routine_designator
    ;

object_privileges =
  | 'ALL' 'PRIVILEGES'
  | action [{comma action}+]
    ;

action =
  | 'SELECT'
  | 'SELECT' left_paren privilege_column_list right_paren
  | 'SELECT' left_paren privilege_method_list right_paren
  | 'DELETE'
  | 'INSERT' [left_paren privilege_column_list right_paren]
  | 'UPDATE' [left_paren privilege_column_list right_paren]
  | 'REFERENCES' [left_paren privilege_column_list right_paren]
  | 'USAGE'
  | 'TRIGGER'
  | 'UNDER'
  | 'EXECUTE'
    ;

privilege_method_list =
    specific_routine_designator [{comma specific_routine_designator}+]
    ;

privilege_column_list =
    column_name_list
    ;

grantee =
  | 'PUBLIC'
  | authorization_identifier
    ;

grantor =
  | 'CURRENT_USER'
  | 'CURRENT_ROLE'
    ;

role_definition =
    'CREATE' 'ROLE' role_name ['WITH' 'ADMIN' grantor]
    ;

grant_role_statement =
    'GRANT' role_granted [{comma role_granted}+] 'TO' grantee [{comma grantee}+] ['WITH' 'ADMIN' 'OPTION'] ['GRANTED' 'BY' grantor]
    ;

role_granted =
    role_name
    ;

drop_role_statement =
    'DROP' 'ROLE' role_name
    ;

revoke_statement =
  | revoke_privilege_statement
  | revoke_role_statement
    ;

revoke_privilege_statement =
    'REVOKE' [revoke_option_extension] privileges 'FROM' grantee [{comma grantee}+] ['GRANTED' 'BY' grantor] drop_behavior
    ;

revoke_option_extension =
  | 'GRANT' 'OPTION' 'FOR'
  | 'HIERARCHY' 'OPTION' 'FOR'
    ;

revoke_role_statement =
    'REVOKE' ['ADMIN' 'OPTION' 'FOR'] role_revoked [{comma role_revoked}+] 'FROM' grantee [{comma grantee}+] ['GRANTED' 'BY' grantor] drop_behavior
    ;

role_revoked =
    role_name
    ;

character_set_specification_list =
    character_set_specification [{comma character_set_specification}+]
    ;

sql_procedure_statement =
    sql_executable_statement
    ;

sql_executable_statement =
  | sql_schema_statement
  | sql_data_statement
  | sql_control_statement
  | sql_transaction_statement
  | sql_connection_statement
  | sql_session_statement
  | get_diagnostics_statement
  | sql_dynamic_statement
    ;

sql_schema_statement =
  | sql_schema_definition_statement
  | sql_schema_manipulation_statement
    ;

sql_schema_definition_statement =
  | schema_definition
  | table_definition
  | view_definition
  | schema_routine
  | grant_statement
  | role_definition
  | domain_definition
  | character_set_definition
  | collation_definition
  | transliteration_definition
  | assertion_definition
  | trigger_definition
  | user_defined_type_definition
  | user_defined_cast_definition
  | user_defined_ordering_definition
  | transform_definition
  | sequence_generator_definition
    ;

sql_schema_manipulation_statement =
  | drop_schema_statement
  | alter_table_statement
  | drop_table_statement
  | drop_view_statement
  | alter_routine_statement
  | drop_routine_statement
  | drop_user_defined_cast_statement
  | revoke_statement
  | drop_role_statement
  | alter_domain_statement
  | drop_domain_statement
  | drop_character_set_statement
  | drop_collation_statement
  | drop_transliteration_statement
  | drop_assertion_statement
  | drop_trigger_statement
  | alter_type_statement
  | drop_data_type_statement
  | drop_user_defined_ordering_statement
  | alter_transform_statement
  | drop_transform_statement
  | alter_sequence_generator_statement
  | drop_sequence_generator_statement
    ;

sql_data_statement =
  | open_statement
  | fetch_statement
  | close_statement
  | select_statement_single_row
  | free_locator_statement
  | hold_locator_statement
  | sql_data_change_statement
    ;

sql_data_change_statement =
  | delete_statement_positioned
  | delete_statement_searched
  | insert_statement
  | update_statement_positioned
  | update_statement_searched
  | merge_statement
    ;

sql_control_statement =
  | call_statement
  | return_statement
    ;

sql_transaction_statement =
  | start_transaction_statement
  | set_transaction_statement
  | set_constraints_mode_statement
  | savepoint_statement
  | release_savepoint_statement
  | commit_statement
  | rollback_statement
    ;

sql_connection_statement =
  | connect_statement
  | set_connection_statement
  | disconnect_statement
    ;

sql_session_statement =
  | set_session_user_identifier_statement
  | set_role_statement
  | set_local_time_zone_statement
  | set_session_characteristics_statement
  | set_catalog_statement
  | set_schema_statement
  | set_names_statement
  | set_path_statement
  | set_transform_group_statement
  | set_session_collation_statement
    ;

sql_dynamic_statement =
  | system_descriptor_statement
  | prepare_statement
  | deallocate_prepared_statement
  | describe_statement
  | execute_statement
  | execute_immediate_statement
  | sql_dynamic_data_statement
    ;

sql_dynamic_data_statement =
  | allocate_cursor_statement
  | dynamic_open_statement
  | dynamic_fetch_statement
  | dynamic_close_statement
  | dynamic_delete_statement_positioned
  | dynamic_update_statement_positioned
    ;

system_descriptor_statement =
  | allocate_descriptor_statement
  | deallocate_descriptor_statement
  | set_descriptor_statement
  | get_descriptor_statement
    ;

cursor_sensitivity =
  | 'SENSITIVE'
  | 'INSENSITIVE'
  | 'ASENSITIVE'
    ;

cursor_scrollability =
  | 'SCROLL'
  | 'NO' 'SCROLL'
    ;

cursor_holdability =
  | 'WITH' 'HOLD'
  | 'WITHOUT' 'HOLD'
    ;

cursor_returnability =
  | 'WITH' 'RETURN'
  | 'WITHOUT' 'RETURN'
    ;

cursor_specification =
    query_expression [order_by_clause] [updatability_clause]
    ;

updatability_clause =
    'FOR' ('READ' 'ONLY' | 'UPDATE' ['OF' column_name_list])
    ;

order_by_clause =
    'ORDER' 'BY' sort_specification_list
    ;

open_statement =
    'OPEN' cursor_name
    ;

fetch_statement =
    'FETCH' [[fetch_orientation] 'FROM'] cursor_name 'INTO' fetch_target_list
    ;

fetch_orientation =
  | 'NEXT'
  | 'PRIOR'
  | 'FIRST'
  | 'LAST'
  | ('ABSOLUTE' | 'RELATIVE') simple_value_specification
    ;

fetch_target_list =
    target_specification [{comma target_specification}+]
    ;

close_statement =
    'CLOSE' cursor_name
    ;

select_statement_single_row =
    'SELECT' [set_quantifier] select_list 'INTO' select_target_list table_expression
    ;

select_target_list =
    target_specification [{comma target_specification}+]
    ;

delete_statement_positioned =
    'DELETE' 'FROM' target_table 'WHERE' 'CURRENT' 'OF' cursor_name
    ;

target_table =
  | table_name
  | 'ONLY' left_paren table_name right_paren
    ;

delete_statement_searched =
    'DELETE' 'FROM' target_table ['WHERE' search_condition]
    ;

insert_statement =
    'INSERT' 'INTO' table_name insert_columns_and_source
    ;

insert_columns_and_source =
  | from_subquery
  | from_constructor
  | from_default
    ;

from_subquery =
    [left_paren insert_column_list right_paren] [override_clause] query_expression
    ;

from_constructor =
    [left_paren insert_column_list right_paren] [override_clause] contextually_typed_table_value_constructor
    ;

override_clause =
  | 'OVERRIDING' 'USER' 'VALUE'
  | 'OVERRIDING' 'SYSTEM' 'VALUE'
    ;

from_default =
    'DEFAULT' 'VALUES'
    ;

insert_column_list =
    column_name_list
    ;

merge_statement =
    'MERGE' 'INTO' target_table [['AS'] correlation_name] 'USING' table_reference 'ON' search_condition merge_operation_specification
    ;

merge_operation_specification =
    {merge_when_clause}+
    ;

merge_when_clause =
  | merge_when_matched_clause
  | merge_when_not_matched_clause
    ;

merge_when_matched_clause =
    'WHEN' 'MATCHED' 'THEN' merge_update_specification
    ;

merge_when_not_matched_clause =
    'WHEN' 'NOT' 'MATCHED' 'THEN' merge_insert_specification
    ;

merge_update_specification =
    'UPDATE' 'SET' set_clause_list
    ;

merge_insert_specification =
    'INSERT' [left_paren insert_column_list right_paren] [override_clause] 'VALUES' merge_insert_value_list
    ;

merge_insert_value_list =
    left_paren merge_insert_value_element [{comma merge_insert_value_element}+] right_paren
    ;

merge_insert_value_element =
  | value_expression
  | contextually_typed_value_specification
    ;

update_statement_positioned =
    'UPDATE' target_table 'SET' set_clause_list 'WHERE' 'CURRENT' 'OF' cursor_name
    ;

update_statement_searched =
    'UPDATE' target_table 'SET' set_clause_list ['WHERE' search_condition]
    ;

set_clause_list =
    set_clause [{comma set_clause}+]
    ;

set_clause =
  | multiple_column_assignment
  | set_target equals_operator update_source
    ;

set_target =
  | update_target
  | mutated_set_clause
    ;

multiple_column_assignment =
    set_target_list equals_operator contextually_typed_row_value_expression
    ;

set_target_list =
    left_paren set_target [{comma set_target}+] right_paren
    ;

update_target =
  | object_column
  | object_column left_bracket_or_trigraph simple_value_specification right_bracket_or_trigraph
    ;

object_column =
    column_name
    ;

mutated_set_clause =
    mutated_target period method_name
    ;

mutated_target =
  | object_column
  | mutated_set_clause
    ;

update_source =
  | value_expression
  | contextually_typed_value_specification
    ;

temporary_table_declaration =
    'DECLARE' 'LOCAL' 'TEMPORARY' 'TABLE' table_name table_element_list ['ON' 'COMMIT' table_commit_action 'ROWS']
    ;

free_locator_statement =
    'FREE' 'LOCATOR' locator_reference [{comma locator_reference}+]
    ;

locator_reference =
    host_parameter_name
    ;

hold_locator_statement =
    'HOLD' 'LOCATOR' locator_reference [{comma locator_reference}+]
    ;

call_statement =
    'CALL' routine_invocation
    ;

return_statement =
    'RETURN' return_value
    ;

return_value =
  | value_expression
  | 'NULL'
    ;

start_transaction_statement =
    'START' 'TRANSACTION' [transaction_mode [{comma transaction_mode}+]]
    ;

transaction_mode =
  | isolation_level
  | transaction_access_mode
  | diagnostics_size
    ;

transaction_access_mode =
  | 'READ' 'ONLY'
  | 'READ' 'WRITE'
    ;

isolation_level =
    'ISOLATION' 'LEVEL' level_of_isolation
    ;

level_of_isolation =
  | 'READ' 'UNCOMMITTED'
  | 'READ' 'COMMITTED'
  | 'REPEATABLE' 'READ'
  | 'SERIALIZABLE'
    ;

diagnostics_size =
    'DIAGNOSTICS' 'SIZE' simple_value_specification
    ;

set_transaction_statement =
    'SET' ['LOCAL'] transaction_characteristics
    ;

transaction_characteristics =
    'TRANSACTION' transaction_mode [{comma transaction_mode}+]
    ;

set_constraints_mode_statement =
    'SET' 'CONSTRAINTS' constraint_name_list ('DEFERRED' | 'IMMEDIATE')
    ;

constraint_name_list =
  | 'ALL'
  | constraint_name [{comma constraint_name}+]
    ;

savepoint_statement =
    'SAVEPOINT' savepoint_specifier
    ;

savepoint_specifier =
    identifier
    ;

release_savepoint_statement =
    'RELEASE' 'SAVEPOINT' savepoint_specifier
    ;

commit_statement =
    'COMMIT' ['WORK'] ['AND' ['NO'] 'CHAIN']
    ;

rollback_statement =
    'ROLLBACK' ['WORK'] ['AND' ['NO'] 'CHAIN'] [savepoint_clause]
    ;

savepoint_clause =
    'TO' 'SAVEPOINT' savepoint_specifier
    ;

connect_statement =
    'CONNECT' 'TO' connection_target
    ;

connection_target =
  | simple_value_specification ['AS' connection_name] ['USER' simple_value_specification]
  | 'DEFAULT'
    ;

set_connection_statement =
    'SET' 'CONNECTION' connection_object
    ;

connection_object =
  | 'DEFAULT'
  | connection_name
    ;

disconnect_statement =
    'DISCONNECT' disconnect_object
    ;

disconnect_object =
  | connection_object
  | 'ALL'
  | 'CURRENT'
    ;

set_session_characteristics_statement =
    'SET' 'SESSION' 'CHARACTERISTICS' 'AS' session_characteristic_list
    ;

session_characteristic_list =
    session_characteristic [{comma session_characteristic}+]
    ;

session_characteristic =
    transaction_characteristics
    ;

set_session_user_identifier_statement =
    'SET' 'SESSION' 'AUTHORIZATION' value_specification
    ;

set_role_statement =
    'SET' 'ROLE' role_specification
    ;

role_specification =
  | value_specification
  | 'NONE'
    ;

set_local_time_zone_statement =
    'SET' 'TIME' 'ZONE' set_time_zone_value
    ;

set_time_zone_value =
  | interval_value_expression
  | 'LOCAL'
    ;

set_catalog_statement =
    'SET' catalog_name_characteristic
    ;

catalog_name_characteristic =
    'CATALOG' value_specification
    ;

set_schema_statement =
    'SET' schema_name_characteristic
    ;

schema_name_characteristic =
    'SCHEMA' value_specification
    ;

set_names_statement =
    'SET' character_set_name_characteristic
    ;

character_set_name_characteristic =
    'NAMES' value_specification
    ;

set_path_statement =
    'SET' sql_path_characteristic
    ;

sql_path_characteristic =
    'PATH' value_specification
    ;

set_transform_group_statement =
    'SET' transform_group_characteristic
    ;

transform_group_characteristic =
  | 'DEFAULT' 'TRANSFORM' 'GROUP' value_specification
  | 'TRANSFORM' 'GROUP' 'FOR' 'TYPE' path_resolved_user_defined_type_name value_specification
    ;

set_session_collation_statement =
  | 'SET' 'COLLATION' value_specification ['FOR' character_set_specification_list]
  | 'SET' 'NO' 'COLLATION' ['FOR' character_set_specification_list]
    ;

allocate_descriptor_statement =
    'ALLOCATE' ['SQL'] 'DESCRIPTOR' descriptor_name ['WITH' 'MAX' simple_value_specification]
    ;

deallocate_descriptor_statement =
    'DEALLOCATE' ['SQL'] 'DESCRIPTOR' descriptor_name
    ;

get_descriptor_statement =
    'GET' ['SQL'] 'DESCRIPTOR' descriptor_name get_descriptor_information
    ;

get_descriptor_information =
  | get_header_information [{comma get_header_information}+]
  | 'VALUE' item_number get_item_information [{comma get_item_information}+]
    ;

get_header_information =
    simple_target_specification equals_operator header_item_name
    ;

header_item_name =
  | 'COUNT'
  | 'KEY_TYPE'
  | 'DYNAMIC_FUNCTION'
  | 'DYNAMIC_FUNCTION_CODE'
  | 'TOP_LEVEL_COUNT'
    ;

get_item_information =
    simple_target_specification equals_operator descriptor_item_name
    ;

item_number =
    simple_value_specification
    ;

descriptor_item_name =
  | 'CARDINALITY'
  | 'CHARACTER_SET_CATALOG'
  | 'CHARACTER_SET_NAME'
  | 'CHARACTER_SET_SCHEMA'
  | 'COLLATION_CATALOG'
  | 'COLLATION_NAME'
  | 'COLLATION_SCHEMA'
  | 'DATA'
  | 'DATETIME_INTERVAL_CODE'
  | 'DATETIME_INTERVAL_PRECISION'
  | 'DEGREE'
  | 'INDICATOR'
  | 'KEY_MEMBER'
  | 'LENGTH'
  | 'LEVEL'
  | 'NAME'
  | 'NULLABLE'
  | 'OCTET_LENGTH'
  | 'PARAMETER_MODE'
  | 'PARAMETER_ORDINAL_POSITION'
  | 'PARAMETER_SPECIFIC_CATALOG'
  | 'PARAMETER_SPECIFIC_NAME'
  | 'PARAMETER_SPECIFIC_SCHEMA'
  | 'PRECISION'
  | 'RETURNED_CARDINALITY'
  | 'RETURNED_LENGTH'
  | 'RETURNED_OCTET_LENGTH'
  | 'SCALE'
  | 'SCOPE_CATALOG'
  | 'SCOPE_NAME'
  | 'SCOPE_SCHEMA'
  | 'TYPE'
  | 'UNNAMED'
  | 'USER_DEFINED_TYPE_CATALOG'
  | 'USER_DEFINED_TYPE_NAME'
  | 'USER_DEFINED_TYPE_SCHEMA'
  | 'USER_DEFINED_TYPE_CODE'
    ;

set_descriptor_statement =
    'SET' ['SQL'] 'DESCRIPTOR' descriptor_name set_descriptor_information
    ;

set_descriptor_information =
  | set_header_information [{comma set_header_information}+]
  | 'VALUE' item_number set_item_information [{comma set_item_information}+]
    ;

set_header_information =
    header_item_name equals_operator simple_value_specification
    ;

set_item_information =
    descriptor_item_name equals_operator simple_value_specification
    ;

prepare_statement =
    'PREPARE' sql_statement_name [attributes_specification] 'FROM' sql_statement_variable
    ;

attributes_specification =
    'ATTRIBUTES' simple_value_specification
    ;

sql_statement_variable =
    simple_value_specification
    ;

deallocate_prepared_statement =
    'DEALLOCATE' 'PREPARE' sql_statement_name
    ;

describe_statement =
  | describe_input_statement
  | describe_output_statement
    ;

describe_input_statement =
    'DESCRIBE' 'INPUT' sql_statement_name using_descriptor [nesting_option]
    ;

describe_output_statement =
    'DESCRIBE' ['OUTPUT'] described_object using_descriptor [nesting_option]
    ;

nesting_option =
  | 'WITH' 'NESTING'
  | 'WITHOUT' 'NESTING'
    ;

using_descriptor =
    'USING' ['SQL'] 'DESCRIPTOR' descriptor_name
    ;

described_object =
  | sql_statement_name
  | 'CURSOR' extended_cursor_name 'STRUCTURE'
    ;

input_using_clause =
  | using_arguments
  | using_descriptor
    ;

using_arguments =
    'USING' using_argument [{comma using_argument}+]
    ;

using_argument =
    general_value_specification
    ;

output_using_clause =
  | into_arguments
  | into_descriptor
    ;

into_arguments =
    'INTO' into_argument [{comma into_argument}+]
    ;

into_argument =
    target_specification
    ;

into_descriptor =
    'INTO' ['SQL'] 'DESCRIPTOR' descriptor_name
    ;

execute_statement =
    'EXECUTE' sql_statement_name [output_using_clause] [input_using_clause]
    ;

execute_immediate_statement =
    'EXECUTE' 'IMMEDIATE' sql_statement_variable
    ;

allocate_cursor_statement =
    'ALLOCATE' extended_cursor_name cursor_intent
    ;

cursor_intent =
  | statement_cursor
  | result_set_cursor
    ;

statement_cursor =
    [cursor_sensitivity] [cursor_scrollability] 'CURSOR' [cursor_holdability] [cursor_returnability] 'FOR' extended_statement_name
    ;

result_set_cursor =
    'FOR' 'PROCEDURE' specific_routine_designator
    ;

dynamic_open_statement =
    'OPEN' dynamic_cursor_name [input_using_clause]
    ;

dynamic_fetch_statement =
    'FETCH' [[fetch_orientation] 'FROM'] dynamic_cursor_name output_using_clause
    ;

dynamic_close_statement =
    'CLOSE' dynamic_cursor_name
    ;

dynamic_delete_statement_positioned =
    'DELETE' 'FROM' target_table 'WHERE' 'CURRENT' 'OF' dynamic_cursor_name
    ;

dynamic_update_statement_positioned =
    'UPDATE' target_table 'SET' set_clause_list 'WHERE' 'CURRENT' 'OF' dynamic_cursor_name
    ;

direct_sql_statement =
    directly_executable_statement semicolon
    ;

directly_executable_statement =
  | direct_sql_data_statement
  | sql_schema_statement
  | sql_transaction_statement
  | sql_connection_statement
  | sql_session_statement
    ;

direct_sql_data_statement =
  | delete_statement_searched
  | cursor_specification
  | insert_statement
  | update_statement_searched
  | merge_statement
  | temporary_table_declaration
    ;

get_diagnostics_statement =
    'GET' 'DIAGNOSTICS' sql_diagnostics_information
    ;

sql_diagnostics_information =
  | statement_information
  | condition_information
    ;

statement_information =
    statement_information_item [{comma statement_information_item}+]
    ;

statement_information_item =
    simple_target_specification equals_operator statement_information_item_name
    ;

statement_information_item_name =
  | 'NUMBER'
  | 'MORE'
  | 'COMMAND_FUNCTION'
  | 'COMMAND_FUNCTION_CODE'
  | 'DYNAMIC_FUNCTION'
  | 'DYNAMIC_FUNCTION_CODE'
  | 'ROW_COUNT'
  | 'TRANSACTIONS_COMMITTED'
  | 'TRANSACTIONS_ROLLED_BACK'
  | 'TRANSACTION_ACTIVE'
    ;

condition_information =
    ('EXCEPTION' | 'CONDITION') simple_value_specification condition_information_item [{comma condition_information_item}+]
    ;

condition_information_item =
    simple_target_specification equals_operator condition_information_item_name
    ;

condition_information_item_name =
  | 'CATALOG_NAME'
  | 'CLASS_ORIGIN'
  | 'COLUMN_NAME'
  | 'CONDITION_NUMBER'
  | 'CONNECTION_NAME'
  | 'CONSTRAINT_CATALOG'
  | 'CONSTRAINT_NAME'
  | 'CONSTRAINT_SCHEMA'
  | 'CURSOR_NAME'
  | 'MESSAGE_LENGTH'
  | 'MESSAGE_OCTET_LENGTH'
  | 'MESSAGE_TEXT'
  | 'PARAMETER_MODE'
  | 'PARAMETER_NAME'
  | 'PARAMETER_ORDINAL_POSITION'
  | 'RETURNED_SQLSTATE'
  | 'ROUTINE_CATALOG'
  | 'ROUTINE_NAME'
  | 'ROUTINE_SCHEMA'
  | 'SCHEMA_NAME'
  | 'SERVER_NAME'
  | 'SPECIFIC_NAME'
  | 'SUBCLASS_ORIGIN'
  | 'TABLE_NAME'
  | 'TRIGGER_CATALOG'
  | 'TRIGGER_NAME'
  | 'TRIGGER_SCHEMA'
    ;

start =
    direct_sql_statement $
    ;
