# The MIT License (MIT)
# Copyright (c) 2016, Victor M. Uriarte
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

@@grammar :: Sql
@@ignorecase :: True

@@whitespace :: /\s+/
@@eol_comments :: /--.*?$/
@@comments :: ?//\*[\s\S]*?\*//?
@@keyword :: SELECT FROM WHERE
#include :: reserved.grako
#include :: keywords92.grako

start =
    statements $
    ;

statements =
    ';'.{select_statement} [';']
    ;

@name
regular_identifier =
    /[a-z]\w*/
    ;

par_integer =
    '(' integer [',' integer] ')'
    ;

exact_numeric_literal =
  | proper_decimal
  | '.' integer
    ;

integer =
    /\d+/
    ;

identifier_chain =
    '.'.{identifier}
    ;

identifier =
  | regular_identifier
  | '"' /(""|[^"\n])+/ '"'
    ;

proper_decimal =
    integer ['.' [integer]]
    ;

data_type =
  | _KW_CHAR [par_integer]
  | 'NUMERIC' [par_integer]
  | 'DECIMAL' [par_integer]
  | 'INTEGER'
  | 'INT'
  | 'SMALLINT'
  | 'FLOAT' [par_integer]
  | 'REAL'
  | 'DOUBLE' 'PRECISION'
  | 'DATE'
  | 'TIME' [par_integer] ['WITH' 'TIME' 'ZONE']
  | 'TIMESTAMP' [par_integer] ['WITH' 'TIME' 'ZONE']
    ;

search_condition =
    ('AND'|'OR').{['NOT'] boolean_primary}
    ;

boolean_primary =
  | predicate
  | '(' search_condition ')'
    ;

predicate =
  | 'IS' ['NOT'] 'NULL'
  | 'EXISTS' subquery
  | row_value_constructor comp_op row_value_constructor
  | row_value_constructor ['NOT'] 'LIKE' row_value_constructor
  | row_value_constructor ['NOT'] 'BETWEEN' row_value_constructor 'AND' row_value_constructor
  | row_value_constructor ['NOT'] 'IN' in_predicate_value
  | row_value_constructor comp_op _KW_QUANTIFIER subquery
  | row_value_constructor 'MATCH' ['UNIQUE'] ['PARTIAL' | 'FULL'] subquery
  | row_value_constructor 'OVERLAPS' row_value_constructor
    ;

row_value_constructor =
  | '(' ','.{row_value_constructor_element} ')'
  | row_value_constructor_element
  | subquery
    ;

row_value_constructor_element =
  | 'NULL'
  | value_expression
    ;

value_expression =
    [value_expression ops] [sign] primary
    ;

ops =
  | sign
  | mult_div
  | '||'
  ;

primary =
  | exact_numeric_literal ['E' [sign] integer]
  | "'" /(''|[^'\n])*/ "'"
  | ':' identifier
  | '?'
  | 'COALESCE' value_expression_list
  | 'SUBSTR' value_expression_list
  | 'DECODE' value_expression_list
  | 'NULLIF' value_expression_list
  | 'CAST' '(' result 'AS' data_type ')'
  | 'DATE' "'" integer '-' integer '-' integer "'"
  | 'TIME' "'" integer ':' integer ':' proper_decimal "'"
  | 'TIMESTAMP' "'" integer '-' integer '-' integer integer ':' integer ':' proper_decimal "'"
  | 'USER'
  | 'CURRENT_USER'
  | 'SESSION_USER'
  | 'SYSTEM_USER'
  | 'VALUE'
  | 'COUNT' '(' '*' ')'
  | _KW_SET_FUNCTION_TYPE '(' [_KW_SET_QUANTIFIER] value_expression ')'
  | 'CASE' [value_expression] {when_clause}+ [else_clause] 'END'
  | 'POSITION' '(' value_expression 'IN' value_expression ')'
  | 'EXTRACT' '(' _KW_EXTRACT_FIELD 'FROM' value_expression ')'
  | 'SUBSTRING' '(' value_expression 'FROM' value_expression ['FOR' value_expression] ')'
  | 'UPPER' '(' value_expression ')'
  | 'LOWER' '(' value_expression ')'
  | 'TRIM' '(' [[_KW_TRIM_SPECIFICATION] [value_expression] 'FROM'] value_expression ')'
  | 'CURRENT_DATE'
  | 'CURRENT_TIME'
  | 'CURRENT_TIMESTAMP'
  | subquery
  | '(' value_expression ')'
  | identifier_chain
    ;

subquery =
    '(' query_expression ')'
    ;

query_expression =
  | non_join_query_expression
  | joined_table
    ;

non_join_query_expression =
  | non_join_query_term
  | query_expression ('UNION' | 'EXCEPT') ['ALL'] query_term
    ;

non_join_query_term =
  | non_join_query_primary
  | query_term 'INTERSECT' ['ALL'] query_primary
    ;

non_join_query_primary =
  | '(' non_join_query_expression ')'
  | simple_table
    ;

simple_table =
    'SELECT' [_KW_SET_QUANTIFIER] select_list table_expression
    ;

select_list =
  | '*'
  | ','.{select_sublist}
    ;

select_sublist =
  | value_expression [as_clause]
  | identifier_chain '.' '*'
    ;

as_clause =
    ['AS'] identifier
    ;

table_expression =
    from_clause [where_clause] [group_by_clause] [having_clause]
    ;

from_clause =
    'FROM' ','.{table_reference}
    ;

table_reference =
  | identifier_chain [as_clause]
  | subquery as_clause
  | joined_table
    ;

joined_table =
  | cross_join
  | qualified_join
  | '(' joined_table ')'
    ;

cross_join =
    table_reference 'CROSS' 'JOIN' table_reference
    ;

qualified_join =
    table_reference ['NATURAL'] [_KW_JOIN_TYPE] 'JOIN' table_reference [join_condition]
    ;

join_condition =
    'ON' search_condition
    ;

where_clause =
    'WHERE' search_condition
    ;

group_by_clause =
    'GROUP' 'BY' grouping_column_reference_list
    ;

grouping_column_reference_list =
    ','.{identifier_chain}
    ;

having_clause =
    'HAVING' search_condition
    ;

query_term =
  | non_join_query_term
  | joined_table
    ;

query_primary =
  | non_join_query_primary
  | joined_table
    ;

result =
  | 'NULL'
  | value_expression
    ;

else_clause =
    'ELSE' result
    ;

when_clause =
  | 'WHEN' search_condition 'THEN' result
  | 'WHEN' value_expression 'THEN' result
    ;

in_predicate_value =
  | subquery
  | value_expression_list
    ;

value_expression_list =
    '(' ','.{value_expression} ')'
    ;

order_by_clause =
    'ORDER' 'BY' sort_specification_list
    ;

sort_specification_list =
    ','.{sort_key [_KW_ORDERING_SPECIFICATION]}
    ;

sort_key =
  | identifier
  | integer
    ;

select_statement =
    query_expression [order_by_clause]
    ;
