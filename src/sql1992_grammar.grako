# The MIT License (MIT)
# Copyright (c) 2016, Victor M. Uriarte
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

@@grammar :: Sql
@@ignorecase :: True

@@whitespace :: /\s+/
@@eol_comments :: /--.*?$/
@@comments :: ?//\*[\s\S]*?\*//?

digit =
    /\d+/
    ;

space =
    / /
    ;

double_quote =
    '"'
    ;

quote =
    "'"
    ;

left_paren =
    '('
    ;

right_paren =
    ')'
    ;

asterisk =
    '*'
    ;

plus_sign =
    '+'
    ;

comma =
    ','
    ;

minus_sign =
    '-'
    ;

period =
    '.'
    ;

solidus =
    '/'
    ;

colon =
    ':'
    ;

semicolon =
    ';'
    ;

less_than_operator =
    '<'
    ;

equals_operator =
    '='
    ;

greater_than_operator =
    '>'
    ;

question_mark =
    '?'
    ;

underscore =
    '_'
    ;

@name
regular_identifier =
    /[a-z]\w*/
    ;

delimited_identifier =
    double_quote delimited_identifier_body double_quote
    ;

delimited_identifier_body =
    /(""|[^"\n])+/
    ;

not_equals_operator =
    '<>'
    ;

greater_than_or_equals_operator =
    '>='
    ;

less_than_or_equals_operator =
    '<='
    ;

concatenation_operator =
    '||'
    ;

separator =
    {comment | space | newline}+
    ;

comment =
    comment_introducer [{comment_character}+] newline
    ;

comment_character =
  | nonquote_character
  | quote
    ;

comment_introducer =
    minus_sign minus_sign [{minus_sign}+]
    ;

newline =
    '#SEE_THE_SYNTAX_RULES'
    ;

literal =
  | signed_numeric_literal
  | general_literal
    ;

unsigned_literal =
  | unsigned_numeric_literal
  | general_literal
    ;

general_literal =
  | character_string_literal
  | national_character_string_literal
  | bit_string_literal
  | hex_string_literal
  | datetime_literal
  | interval_literal
    ;

character_string_literal =
    [introducer character_set_specification] quote [{character_representation}+] quote [{{separator}+ quote [{character_representation}+] quote}+]
    ;

introducer =
    underscore
    ;

character_representation =
    /(''|[^'\n])/
    ;

nonquote_character =
    '#SEE_THE_SYNTAX_RULES'
    ;

national_character_string_literal =
    'N' quote [{character_representation}+] quote [{{separator}+ quote [{character_representation}+] quote}+]
    ;

bit_string_literal =
    'B' quote [{bit}+] quote [{{separator}+ quote [{bit}+] quote}+]
    ;

hex_string_literal =
    'X' quote [{hexit}+] quote [{{separator}+ quote [{hexit}+] quote}+]
    ;

bit =
  | '0'
  | '1'
    ;

hexit =
    /[a-f\d]/
    ;

signed_numeric_literal =
    [sign] unsigned_numeric_literal
    ;

unsigned_numeric_literal =
  | exact_numeric_literal
  | approximate_numeric_literal
    ;

exact_numeric_literal =
  | unsigned_integer [period [unsigned_integer]]
  | period unsigned_integer
    ;

sign =
  | plus_sign
  | minus_sign
    ;

approximate_numeric_literal =
    mantissa 'E' exponent
    ;

mantissa =
    exact_numeric_literal
    ;

exponent =
    signed_integer
    ;

signed_integer =
    [sign] unsigned_integer
    ;

unsigned_integer =
    digit
    ;

datetime_literal =
  | date_literal
  | time_literal
  | timestamp_literal
    ;

date_literal =
    'DATE' date_string
    ;

time_literal =
    'TIME' time_string
    ;

timestamp_literal =
    'TIMESTAMP' timestamp_string
    ;

date_string =
    quote date_value quote
    ;

time_string =
    quote time_value [time_zone_interval] quote
    ;

timestamp_string =
    quote date_value space time_value [time_zone_interval] quote
    ;

time_zone_interval =
    sign hours_value colon minutes_value
    ;

date_value =
    years_value minus_sign months_value minus_sign days_value
    ;

time_value =
    hours_value colon minutes_value colon seconds_value
    ;

interval_literal =
    'INTERVAL' [sign] interval_string interval_qualifier
    ;

interval_string =
    quote (year_month_literal | day_time_literal) quote
    ;

year_month_literal =
  | years_value
  | [years_value minus_sign] months_value
    ;

day_time_literal =
  | day_time_interval
  | time_interval
    ;

day_time_interval =
    days_value [space hours_value [colon minutes_value [colon seconds_value]]]
    ;

time_interval =
  | hours_value [colon minutes_value [colon seconds_value]]
  | minutes_value [colon seconds_value]
  | seconds_value
    ;

years_value =
    datetime_value
    ;

months_value =
    datetime_value
    ;

days_value =
    datetime_value
    ;

hours_value =
    datetime_value
    ;

minutes_value =
    datetime_value
    ;

seconds_value =
    seconds_integer_value [period [seconds_fraction]]
    ;

seconds_integer_value =
    unsigned_integer
    ;

seconds_fraction =
    unsigned_integer
    ;

datetime_value =
    unsigned_integer
    ;

identifier =
    [introducer character_set_specification] actual_identifier
    ;

actual_identifier =
  | regular_identifier
  | delimited_identifier
    ;

sql_language_identifier =
    regular_identifier
    ;

authorization_identifier =
    identifier
    ;

table_name =
  | qualified_name
  | qualified_local_table_name
    ;

qualified_local_table_name =
    'MODULE' period local_table_name
    ;

local_table_name =
    qualified_identifier
    ;

domain_name =
    qualified_name
    ;

schema_name =
    [catalog_name period] unqualified_schema_name
    ;

unqualified_schema_name =
    identifier
    ;

catalog_name =
    identifier
    ;

qualified_name =
    [schema_name period] qualified_identifier
    ;

qualified_identifier =
    identifier
    ;

column_name =
    identifier
    ;

correlation_name =
    identifier
    ;

parameter_name =
    colon identifier
    ;

constraint_name =
    qualified_name
    ;

collation_name =
    qualified_name
    ;

character_set_name =
    [schema_name period] sql_language_identifier
    ;

translation_name =
    qualified_name
    ;

form_of_use_conversion_name =
    qualified_name
    ;

connection_name =
    simple_value_specification
    ;

sql_server_name =
    simple_value_specification
    ;

user_name =
    simple_value_specification
    ;

data_type =
  | character_string_type ['CHARACTER' 'SET' character_set_specification]
  | national_character_string_type
  | bit_string_type
  | numeric_type
  | datetime_type
  | interval_type
    ;

character_string_type =
  | 'CHARACTER' [left_paren length right_paren]
  | 'CHAR' [left_paren length right_paren]
  | 'CHARACTER' 'VARYING' left_paren length right_paren
  | 'CHAR' 'VARYING' left_paren length right_paren
  | 'VARCHAR' left_paren length right_paren
    ;

national_character_string_type =
  | 'NATIONAL' 'CHARACTER' [left_paren length right_paren]
  | 'NATIONAL' 'CHAR' [left_paren length right_paren]
  | 'NCHAR' [left_paren length right_paren]
  | 'NATIONAL' 'CHARACTER' 'VARYING' left_paren length right_paren
  | 'NATIONAL' 'CHAR' 'VARYING' left_paren length right_paren
  | 'NCHAR' 'VARYING' left_paren length right_paren
    ;

bit_string_type =
  | 'BIT' [left_paren length right_paren]
  | 'BIT' 'VARYING' left_paren length right_paren
    ;

numeric_type =
  | exact_numeric_type
  | approximate_numeric_type
    ;

exact_numeric_type =
  | 'NUMERIC' [left_paren precision [comma scale] right_paren]
  | 'DECIMAL' [left_paren precision [comma scale] right_paren]
  | 'DEC' [left_paren precision [comma scale] right_paren]
  | 'INTEGER'
  | 'INT'
  | 'SMALLINT'
    ;

approximate_numeric_type =
  | 'FLOAT' [left_paren precision right_paren]
  | 'REAL'
  | 'DOUBLE' 'PRECISION'
    ;

length =
    unsigned_integer
    ;

precision =
    unsigned_integer
    ;

scale =
    unsigned_integer
    ;

datetime_type =
  | 'DATE'
  | 'TIME' [left_paren time_precision right_paren] ['WITH' 'TIME' 'ZONE']
  | 'TIMESTAMP' [left_paren timestamp_precision right_paren] ['WITH' 'TIME' 'ZONE']
    ;

time_precision =
    time_fractional_seconds_precision
    ;

timestamp_precision =
    time_fractional_seconds_precision
    ;

time_fractional_seconds_precision =
    unsigned_integer
    ;

interval_type =
    'INTERVAL' interval_qualifier
    ;

value_specification =
  | literal
  | general_value_specification
    ;

unsigned_value_specification =
  | unsigned_literal
  | general_value_specification
    ;

general_value_specification =
  | parameter_specification
  | dynamic_parameter_specification
  | variable_specification
  | 'USER'
  | 'CURRENT_USER'
  | 'SESSION_USER'
  | 'SYSTEM_USER'
  | 'VALUE'
    ;

simple_value_specification =
  | parameter_name
  | embedded_variable_name
  | literal
    ;

parameter_specification =
    parameter_name [indicator_parameter]
    ;

indicator_parameter =
    ['INDICATOR'] parameter_name
    ;

dynamic_parameter_specification =
    question_mark
    ;

variable_specification =
    embedded_variable_name [indicator_variable]
    ;

indicator_variable =
    ['INDICATOR'] embedded_variable_name
    ;

table_reference =
  | table_name [['AS'] correlation_name [left_paren derived_column_list right_paren]]
  | derived_table ['AS'] correlation_name [left_paren derived_column_list right_paren]
  | joined_table
    ;

derived_table =
    table_subquery
    ;

derived_column_list =
    column_name_list
    ;

column_name_list =
    column_name [{comma column_name}+]
    ;

column_reference =
    [qualifier period] column_name
    ;

qualifier =
  | table_name
  | correlation_name
    ;

set_function_specification =
  | 'COUNT' left_paren asterisk right_paren
  | general_set_function
    ;

general_set_function =
    set_function_type left_paren [set_quantifier] value_expression right_paren
    ;

set_function_type =
  | 'AVG'
  | 'MAX'
  | 'MIN'
  | 'SUM'
  | 'COUNT'
    ;

set_quantifier =
  | 'DISTINCT'
  | 'ALL'
    ;

numeric_value_function =
  | position_expression
  | extract_expression
  | length_expression
    ;

position_expression =
    'POSITION' left_paren character_value_expression 'IN' character_value_expression right_paren
    ;

length_expression =
  | char_length_expression
  | octet_length_expression
  | bit_length_expression
    ;

char_length_expression =
    ('CHAR_LENGTH' | 'CHARACTER_LENGTH') left_paren string_value_expression right_paren
    ;

octet_length_expression =
    'OCTET_LENGTH' left_paren string_value_expression right_paren
    ;

bit_length_expression =
    'BIT_LENGTH' left_paren string_value_expression right_paren
    ;

extract_expression =
    'EXTRACT' left_paren extract_field 'FROM' extract_source right_paren
    ;

extract_field =
  | datetime_field
  | time_zone_field
    ;

time_zone_field =
  | 'TIMEZONE_HOUR'
  | 'TIMEZONE_MINUTE'
    ;

extract_source =
  | datetime_value_expression
  | interval_value_expression
    ;

string_value_function =
  | character_value_function
  | bit_value_function
    ;

character_value_function =
  | character_substring_function
  | fold
  | form_of_use_conversion
  | character_translation
  | trim_function
    ;

character_substring_function =
    'SUBSTRING' left_paren character_value_expression 'FROM' start_position ['FOR' string_length] right_paren
    ;

fold =
    ('UPPER' | 'LOWER') left_paren character_value_expression right_paren
    ;

form_of_use_conversion =
    'CONVERT' left_paren character_value_expression 'USING' form_of_use_conversion_name right_paren
    ;

character_translation =
    'TRANSLATE' left_paren character_value_expression 'USING' translation_name right_paren
    ;

trim_function =
    'TRIM' left_paren trim_operands right_paren
    ;

trim_operands =
    [[trim_specification] [trim_character] 'FROM'] trim_source
    ;

trim_source =
    character_value_expression
    ;

trim_specification =
  | 'LEADING'
  | 'TRAILING'
  | 'BOTH'
    ;

trim_character =
    character_value_expression
    ;

bit_value_function =
    bit_substring_function
    ;

bit_substring_function =
    'SUBSTRING' left_paren bit_value_expression 'FROM' start_position ['FOR' string_length] right_paren
    ;

start_position =
    numeric_value_expression
    ;

string_length =
    numeric_value_expression
    ;

datetime_value_function =
  | current_date_value_function
  | current_time_value_function
  | current_timestamp_value_function
    ;

current_date_value_function =
    'CURRENT_DATE'
    ;

current_time_value_function =
    'CURRENT_TIME' [left_paren time_precision right_paren]
    ;

current_timestamp_value_function =
    'CURRENT_TIMESTAMP' [left_paren timestamp_precision right_paren]
    ;

case_expression =
  | case_abbreviation
  | case_specification
    ;

case_abbreviation =
  | 'NULLIF' left_paren value_expression comma value_expression right_paren
  | 'COALESCE' left_paren value_expression {comma value_expression}+ right_paren
    ;

case_specification =
  | simple_case
  | searched_case
    ;

simple_case =
    'CASE' case_operand {simple_when_clause}+ [else_clause] 'END'
    ;

searched_case =
    'CASE' {searched_when_clause}+ [else_clause] 'END'
    ;

simple_when_clause =
    'WHEN' when_operand 'THEN' result
    ;

searched_when_clause =
    'WHEN' search_condition 'THEN' result
    ;

else_clause =
    'ELSE' result
    ;

case_operand =
    value_expression
    ;

when_operand =
    value_expression
    ;

result =
  | result_expression
  | 'NULL'
    ;

result_expression =
    value_expression
    ;

cast_specification =
    'CAST' left_paren cast_operand 'AS' cast_target right_paren
    ;

cast_operand =
  | value_expression
  | 'NULL'
    ;

cast_target =
  | domain_name
  | data_type
    ;

value_expression =
  | numeric_value_expression
  | string_value_expression
  | datetime_value_expression
  | interval_value_expression
    ;

value_expression_primary =
  | unsigned_value_specification
  | column_reference
  | set_function_specification
  | scalar_subquery
  | case_expression
  | left_paren value_expression right_paren
  | cast_specification
    ;

numeric_value_expression =
  | term
  | numeric_value_expression plus_sign term
  | numeric_value_expression minus_sign term
    ;

term =
  | factor
  | term asterisk factor
  | term solidus factor
    ;

factor =
    [sign] numeric_primary
    ;

numeric_primary =
  | value_expression_primary
  | numeric_value_function
    ;

string_value_expression =
  | character_value_expression
  | bit_value_expression
    ;

character_value_expression =
  | concatenation
  | character_factor
    ;

concatenation =
    character_value_expression concatenation_operator character_factor
    ;

character_factor =
    character_primary [collate_clause]
    ;

character_primary =
  | value_expression_primary
  | string_value_function
    ;

bit_value_expression =
  | bit_concatenation
  | bit_factor
    ;

bit_concatenation =
    bit_value_expression concatenation_operator bit_factor
    ;

bit_factor =
    bit_primary
    ;

bit_primary =
  | value_expression_primary
  | string_value_function
    ;

datetime_value_expression =
  | datetime_term
  | interval_value_expression plus_sign datetime_term
  | datetime_value_expression plus_sign interval_term
  | datetime_value_expression minus_sign interval_term
    ;

datetime_term =
    datetime_factor
    ;

datetime_factor =
    datetime_primary [time_zone]
    ;

datetime_primary =
  | value_expression_primary
  | datetime_value_function
    ;

time_zone =
    'AT' time_zone_specifier
    ;

time_zone_specifier =
  | 'LOCAL'
  | 'TIME' 'ZONE' interval_value_expression
    ;

interval_value_expression =
  | interval_term
  | interval_value_expression_1 plus_sign interval_term_1
  | interval_value_expression_1 minus_sign interval_term_1
  | left_paren datetime_value_expression minus_sign datetime_term right_paren interval_qualifier
    ;

interval_term =
  | interval_factor
  | interval_term_2 asterisk factor
  | interval_term_2 solidus factor
  | term asterisk interval_factor
    ;

interval_factor =
    [sign] interval_primary
    ;

interval_primary =
    value_expression_primary [interval_qualifier]
    ;

interval_value_expression_1 =
    interval_value_expression
    ;

interval_term_1 =
    interval_term
    ;

interval_term_2 =
    interval_term
    ;

row_value_constructor =
  | row_value_constructor_element
  | left_paren row_value_constructor_list right_paren
  | row_subquery
    ;

row_value_constructor_list =
    row_value_constructor_element [{comma row_value_constructor_element}+]
    ;

row_value_constructor_element =
  | value_expression
  | null_specification
  | default_specification
    ;

null_specification =
    'NULL'
    ;

default_specification =
    'DEFAULT'
    ;

table_value_constructor =
    'VALUES' table_value_constructor_list
    ;

table_value_constructor_list =
    row_value_constructor [{comma row_value_constructor}+]
    ;

table_expression =
    from_clause [where_clause] [group_by_clause] [having_clause]
    ;

from_clause =
    'FROM' table_reference [{comma table_reference}+]
    ;

joined_table =
  | cross_join
  | qualified_join
  | left_paren joined_table right_paren
    ;

cross_join =
    table_reference 'CROSS' 'JOIN' table_reference
    ;

qualified_join =
    table_reference ['NATURAL'] [join_type] 'JOIN' table_reference [join_specification]
    ;

join_specification =
  | join_condition
  | named_columns_join
    ;

join_condition =
    'ON' search_condition
    ;

named_columns_join =
    'USING' left_paren join_column_list right_paren
    ;

join_type =
  | 'INNER'
  | outer_join_type ['OUTER']
  | 'UNION'
    ;

outer_join_type =
  | 'LEFT'
  | 'RIGHT'
  | 'FULL'
    ;

join_column_list =
    column_name_list
    ;

where_clause =
    'WHERE' search_condition
    ;

group_by_clause =
    'GROUP' 'BY' grouping_column_reference_list
    ;

grouping_column_reference_list =
    grouping_column_reference [{comma grouping_column_reference}+]
    ;

grouping_column_reference =
    column_reference [collate_clause]
    ;

having_clause =
    'HAVING' search_condition
    ;

query_specification =
    'SELECT' [set_quantifier] select_list table_expression
    ;

select_list =
  | asterisk
  | select_sublist [{comma select_sublist}+]
    ;

select_sublist =
  | derived_column
  | qualifier period asterisk
    ;

derived_column =
    value_expression [as_clause]
    ;

as_clause =
    ['AS'] column_name
    ;

query_expression =
  | non_join_query_expression
  | joined_table
    ;

non_join_query_expression =
  | non_join_query_term
  | query_expression 'UNION' ['ALL'] [corresponding_spec] query_term
  | query_expression 'EXCEPT' ['ALL'] [corresponding_spec] query_term
    ;

query_term =
  | non_join_query_term
  | joined_table
    ;

non_join_query_term =
  | non_join_query_primary
  | query_term 'INTERSECT' ['ALL'] [corresponding_spec] query_primary
    ;

query_primary =
  | non_join_query_primary
  | joined_table
    ;

non_join_query_primary =
  | simple_table
  | left_paren non_join_query_expression right_paren
    ;

simple_table =
  | query_specification
  | table_value_constructor
  | explicit_table
    ;

explicit_table =
    'TABLE' table_name
    ;

corresponding_spec =
    'CORRESPONDING' ['BY' left_paren corresponding_column_list right_paren]
    ;

corresponding_column_list =
    column_name_list
    ;

scalar_subquery =
    subquery
    ;

row_subquery =
    subquery
    ;

table_subquery =
    subquery
    ;

subquery =
    left_paren query_expression right_paren
    ;

predicate =
  | comparison_predicate
  | between_predicate
  | in_predicate
  | like_predicate
  | null_predicate
  | quantified_comparison_predicate
  | exists_predicate
  | unique_predicate
  | match_predicate
  | overlaps_predicate
    ;

comparison_predicate =
    row_value_constructor comp_op row_value_constructor
    ;

comp_op =
  | equals_operator
  | not_equals_operator
  | less_than_operator
  | greater_than_operator
  | less_than_or_equals_operator
  | greater_than_or_equals_operator
    ;

between_predicate =
    row_value_constructor ['NOT'] 'BETWEEN' row_value_constructor 'AND' row_value_constructor
    ;

in_predicate =
    row_value_constructor ['NOT'] 'IN' in_predicate_value
    ;

in_predicate_value =
  | table_subquery
  | left_paren in_value_list right_paren
    ;

in_value_list =
    value_expression {comma value_expression}+
    ;

like_predicate =
    match_value ['NOT'] 'LIKE' pattern ['ESCAPE' escape_character]
    ;

match_value =
    character_value_expression
    ;

pattern =
    character_value_expression
    ;

escape_character =
    character_value_expression
    ;

null_predicate =
    row_value_constructor 'IS' ['NOT'] 'NULL'
    ;

quantified_comparison_predicate =
    row_value_constructor comp_op quantifier table_subquery
    ;

quantifier =
  | all
  | some
    ;

all =
    'ALL'
    ;

some =
  | 'SOME'
  | 'ANY'
    ;

exists_predicate =
    'EXISTS' table_subquery
    ;

unique_predicate =
    'UNIQUE' table_subquery
    ;

match_predicate =
    row_value_constructor 'MATCH' ['UNIQUE'] ['PARTIAL' | 'FULL'] table_subquery
    ;

overlaps_predicate =
    row_value_constructor_1 'OVERLAPS' row_value_constructor_2
    ;

row_value_constructor_1 =
    row_value_constructor
    ;

row_value_constructor_2 =
    row_value_constructor
    ;

search_condition =
  | boolean_term
  | search_condition 'OR' boolean_term
    ;

boolean_term =
  | boolean_factor
  | boolean_term 'AND' boolean_factor
    ;

boolean_factor =
    ['NOT'] boolean_test
    ;

boolean_test =
    boolean_primary ['IS' ['NOT'] truth_value]
    ;

truth_value =
  | 'TRUE'
  | 'FALSE'
  | 'UNKNOWN'
    ;

boolean_primary =
  | predicate
  | left_paren search_condition right_paren
    ;

interval_qualifier =
  | start_field 'TO' end_field
  | single_datetime_field
    ;

start_field =
    non_second_datetime_field [left_paren interval_leading_field_precision right_paren]
    ;

end_field =
  | non_second_datetime_field
  | 'SECOND' [left_paren interval_fractional_seconds_precision right_paren]
    ;

single_datetime_field =
  | non_second_datetime_field [left_paren interval_leading_field_precision right_paren]
  | 'SECOND' [left_paren interval_leading_field_precision [comma interval_fractional_seconds_precision] right_paren]
    ;

datetime_field =
  | non_second_datetime_field
  | 'SECOND'
    ;

non_second_datetime_field =
  | 'YEAR'
  | 'MONTH'
  | 'DAY'
  | 'HOUR'
  | 'MINUTE'
    ;

interval_fractional_seconds_precision =
    unsigned_integer
    ;

interval_leading_field_precision =
    unsigned_integer
    ;

privileges =
  | 'ALL' 'PRIVILEGES'
  | action_list
    ;

action_list =
    action [{comma action}+]
    ;

action =
  | 'SELECT'
  | 'DELETE'
  | 'INSERT' [left_paren privilege_column_list right_paren]
  | 'UPDATE' [left_paren privilege_column_list right_paren]
  | 'REFERENCES' [left_paren privilege_column_list right_paren]
  | 'USAGE'
    ;

privilege_column_list =
    column_name_list
    ;

grantee =
  | 'PUBLIC'
  | authorization_identifier
    ;

character_set_specification =
  | standard_character_repertoire_name
  | implementation_defined_character_repertoire_name
  | user_defined_character_repertoire_name
  | standard_universal_character_form_of_use_name
  | implementation_defined_universal_character_form_of_use_name
    ;

standard_character_repertoire_name =
    character_set_name
    ;

implementation_defined_character_repertoire_name =
    character_set_name
    ;

user_defined_character_repertoire_name =
    character_set_name
    ;

standard_universal_character_form_of_use_name =
    character_set_name
    ;

implementation_defined_universal_character_form_of_use_name =
    character_set_name
    ;

collate_clause =
    'COLLATE' collation_name
    ;

constraint_name_definition =
    'CONSTRAINT' constraint_name
    ;

constraint_attributes =
  | constraint_check_time [['NOT'] 'DEFERRABLE']
  | ['NOT'] 'DEFERRABLE' [constraint_check_time]
    ;

constraint_check_time =
  | 'INITIALLY' 'DEFERRED'
  | 'INITIALLY' 'IMMEDIATE'
    ;

schema_definition =
    'CREATE' 'SCHEMA' schema_name_clause [schema_character_set_specification] [{schema_element}+]
    ;

schema_name_clause =
  | schema_name
  | 'AUTHORIZATION' schema_authorization_identifier
  | schema_name 'AUTHORIZATION' schema_authorization_identifier
    ;

schema_authorization_identifier =
    authorization_identifier
    ;

schema_character_set_specification =
    'DEFAULT' 'CHARACTER' 'SET' character_set_specification
    ;

schema_element =
  | domain_definition
  | table_definition
  | view_definition
  | grant_statement
  | assertion_definition
  | character_set_definition
  | collation_definition
  | translation_definition
    ;

drop_schema_statement =
    'DROP' 'SCHEMA' schema_name drop_behavior
    ;

drop_behavior =
  | 'CASCADE'
  | 'RESTRICT'
    ;

table_definition =
    'CREATE' [('GLOBAL' | 'LOCAL') 'TEMPORARY'] 'TABLE' table_name table_element_list ['ON' 'COMMIT' ('DELETE' | 'PRESERVE') 'ROWS']
    ;

table_element_list =
    left_paren table_element [{comma table_element}+] right_paren
    ;

table_element =
  | column_definition
  | table_constraint_definition
    ;

column_definition =
    column_name (data_type | domain_name) [default_clause] [{column_constraint_definition}+] [collate_clause]
    ;

column_constraint_definition =
    [constraint_name_definition] column_constraint [constraint_attributes]
    ;

column_constraint =
  | 'NOT' 'NULL'
  | unique_specification
  | references_specification
  | check_constraint_definition
    ;

default_clause =
    'DEFAULT' default_option
    ;

default_option =
  | literal
  | datetime_value_function
  | 'USER'
  | 'CURRENT_USER'
  | 'SESSION_USER'
  | 'SYSTEM_USER'
  | 'NULL'
    ;

table_constraint_definition =
    [constraint_name_definition] table_constraint [constraint_attributes]
    ;

table_constraint =
  | unique_constraint_definition
  | referential_constraint_definition
  | check_constraint_definition
    ;

unique_constraint_definition =
    unique_specification left_paren unique_column_list right_paren
    ;

unique_specification =
  | 'UNIQUE'
  | 'PRIMARY' 'KEY'
    ;

unique_column_list =
    column_name_list
    ;

referential_constraint_definition =
    'FOREIGN' 'KEY' left_paren referencing_columns right_paren references_specification
    ;

references_specification =
    'REFERENCES' referenced_table_and_columns ['MATCH' match_type] [referential_triggered_action]
    ;

match_type =
  | 'FULL'
  | 'PARTIAL'
    ;

referencing_columns =
    reference_column_list
    ;

referenced_table_and_columns =
    table_name [left_paren reference_column_list right_paren]
    ;

reference_column_list =
    column_name_list
    ;

referential_triggered_action =
  | update_rule [delete_rule]
  | delete_rule [update_rule]
    ;

update_rule =
    'ON' 'UPDATE' referential_action
    ;

delete_rule =
    'ON' 'DELETE' referential_action
    ;

referential_action =
  | 'CASCADE'
  | 'SET' 'NULL'
  | 'SET' 'DEFAULT'
  | 'NO' 'ACTION'
    ;

check_constraint_definition =
    'CHECK' left_paren search_condition right_paren
    ;

alter_table_statement =
    'ALTER' 'TABLE' table_name alter_table_action
    ;

alter_table_action =
  | add_column_definition
  | alter_column_definition
  | drop_column_definition
  | add_table_constraint_definition
  | drop_table_constraint_definition
    ;

add_column_definition =
    'ADD' ['COLUMN'] column_definition
    ;

alter_column_definition =
    'ALTER' ['COLUMN'] column_name alter_column_action
    ;

alter_column_action =
  | set_column_default_clause
  | drop_column_default_clause
    ;

set_column_default_clause =
    'SET' default_clause
    ;

drop_column_default_clause =
    'DROP' 'DEFAULT'
    ;

drop_column_definition =
    'DROP' ['COLUMN'] column_name drop_behavior
    ;

add_table_constraint_definition =
    'ADD' table_constraint_definition
    ;

drop_table_constraint_definition =
    'DROP' 'CONSTRAINT' constraint_name drop_behavior
    ;

drop_table_statement =
    'DROP' 'TABLE' table_name drop_behavior
    ;

view_definition =
    'CREATE' 'VIEW' table_name [left_paren view_column_list right_paren] 'AS' query_expression ['WITH' [levels_clause] 'CHECK' 'OPTION']
    ;

levels_clause =
  | 'CASCADED'
  | 'LOCAL'
    ;

view_column_list =
    column_name_list
    ;

drop_view_statement =
    'DROP' 'VIEW' table_name drop_behavior
    ;

domain_definition =
    'CREATE' 'DOMAIN' domain_name ['AS'] data_type [default_clause] [{domain_constraint}+] [collate_clause]
    ;

domain_constraint =
    [constraint_name_definition] check_constraint_definition [constraint_attributes]
    ;

alter_domain_statement =
    'ALTER' 'DOMAIN' domain_name alter_domain_action
    ;

alter_domain_action =
  | set_domain_default_clause
  | drop_domain_default_clause
  | add_domain_constraint_definition
  | drop_domain_constraint_definition
    ;

set_domain_default_clause =
    'SET' default_clause
    ;

drop_domain_default_clause =
    'DROP' 'DEFAULT'
    ;

add_domain_constraint_definition =
    'ADD' domain_constraint
    ;

drop_domain_constraint_definition =
    'DROP' 'CONSTRAINT' constraint_name
    ;

drop_domain_statement =
    'DROP' 'DOMAIN' domain_name drop_behavior
    ;

character_set_definition =
    'CREATE' 'CHARACTER' 'SET' character_set_name ['AS'] character_set_source [collate_clause | limited_collation_definition]
    ;

character_set_source =
    'GET' existing_character_set_name
    ;

existing_character_set_name =
  | standard_character_repertoire_name
  | implementation_defined_character_repertoire_name
  | schema_character_set_name
    ;

schema_character_set_name =
    character_set_name
    ;

limited_collation_definition =
    'COLLATION' 'FROM' collation_source
    ;

drop_character_set_statement =
    'DROP' 'CHARACTER' 'SET' character_set_name
    ;

collation_definition =
    'CREATE' 'COLLATION' collation_name 'FOR' character_set_specification 'FROM' collation_source [pad_attribute]
    ;

pad_attribute =
  | 'NO' 'PAD'
  | 'PAD' 'SPACE'
    ;

collation_source =
  | collating_sequence_definition
  | translation_collation
    ;

collating_sequence_definition =
  | external_collation
  | schema_collation_name
  | 'DESC' left_paren collation_name right_paren
  | 'DEFAULT'
    ;

translation_collation =
    'TRANSLATION' translation_name ['THEN' 'COLLATION' collation_name]
    ;

external_collation =
    'EXTERNAL' left_paren quote external_collation_name quote right_paren
    ;

schema_collation_name =
    collation_name
    ;

external_collation_name =
  | standard_collation_name
  | implementation_defined_collation_name
    ;

standard_collation_name =
    collation_name
    ;

implementation_defined_collation_name =
    collation_name
    ;

drop_collation_statement =
    'DROP' 'COLLATION' collation_name
    ;

translation_definition =
    'CREATE' 'TRANSLATION' translation_name 'FOR' source_character_set_specification 'TO' target_character_set_specification 'FROM' translation_source
    ;

source_character_set_specification =
    character_set_specification
    ;

target_character_set_specification =
    character_set_specification
    ;

translation_source =
    translation_specification
    ;

translation_specification =
  | external_translation
  | 'IDENTITY'
  | schema_translation_name
    ;

external_translation =
    'EXTERNAL' left_paren quote external_translation_name quote right_paren
    ;

external_translation_name =
  | standard_translation_name
  | implementation_defined_translation_name
    ;

standard_translation_name =
    translation_name
    ;

implementation_defined_translation_name =
    translation_name
    ;

schema_translation_name =
    translation_name
    ;

drop_translation_statement =
    'DROP' 'TRANSLATION' translation_name
    ;

assertion_definition =
    'CREATE' 'ASSERTION' constraint_name assertion_check [constraint_attributes]
    ;

assertion_check =
    'CHECK' left_paren search_condition right_paren
    ;

drop_assertion_statement =
    'DROP' 'ASSERTION' constraint_name
    ;

grant_statement =
    'GRANT' privileges 'ON' object_name 'TO' grantee [{comma grantee}+] ['WITH' 'GRANT' 'OPTION']
    ;

object_name =
  | ['TABLE'] table_name
  | 'DOMAIN' domain_name
  | 'COLLATION' collation_name
  | 'CHARACTER' 'SET' character_set_name
  | 'TRANSLATION' translation_name
    ;

revoke_statement =
    'REVOKE' ['GRANT' 'OPTION' 'FOR'] privileges 'ON' object_name 'FROM' grantee [{comma grantee}+] drop_behavior
    ;

sql_schema_statement =
  | sql_schema_definition_statement
  | sql_schema_manipulation_statement
    ;

sql_schema_definition_statement =
  | schema_definition
  | table_definition
  | view_definition
  | grant_statement
  | domain_definition
  | character_set_definition
  | collation_definition
  | translation_definition
  | assertion_definition
    ;

sql_schema_manipulation_statement =
  | drop_schema_statement
  | alter_table_statement
  | drop_table_statement
  | drop_view_statement
  | revoke_statement
  | alter_domain_statement
  | drop_domain_statement
  | drop_character_set_statement
  | drop_collation_statement
  | drop_translation_statement
  | drop_assertion_statement
    ;

sql_transaction_statement =
  | set_transaction_statement
  | set_constraints_mode_statement
  | commit_statement
  | rollback_statement
    ;

sql_connection_statement =
  | connect_statement
  | set_connection_statement
  | disconnect_statement
    ;

sql_session_statement =
  | set_catalog_statement
  | set_schema_statement
  | set_names_statement
  | set_session_authorization_identifier_statement
  | set_local_time_zone_statement
    ;

order_by_clause =
    'ORDER' 'BY' sort_specification_list
    ;

sort_specification_list =
    sort_specification [{comma sort_specification}+]
    ;

sort_specification =
    sort_key [collate_clause] [ordering_specification]
    ;

sort_key =
  | column_name
  | unsigned_integer
    ;

ordering_specification =
  | 'ASC'
  | 'DESC'
    ;

delete_statement_searched =
    'DELETE' 'FROM' table_name ['WHERE' search_condition]
    ;

insert_statement =
    'INSERT' 'INTO' table_name insert_columns_and_source
    ;

insert_columns_and_source =
  | [left_paren insert_column_list right_paren] query_expression
  | 'DEFAULT' 'VALUES'
    ;

insert_column_list =
    column_name_list
    ;

set_clause_list =
    set_clause [{comma set_clause}+]
    ;

set_clause =
    object_column equals_operator update_source
    ;

update_source =
  | value_expression
  | null_specification
  | 'DEFAULT'
    ;

object_column =
    column_name
    ;

update_statement_searched =
    'UPDATE' table_name 'SET' set_clause_list ['WHERE' search_condition]
    ;

temporary_table_declaration =
    'DECLARE' 'LOCAL' 'TEMPORARY' 'TABLE' qualified_local_table_name table_element_list ['ON' 'COMMIT' ('PRESERVE' | 'DELETE') 'ROWS']
    ;

set_transaction_statement =
    'SET' 'TRANSACTION' transaction_mode [{comma transaction_mode}+]
    ;

transaction_mode =
  | isolation_level
  | transaction_access_mode
  | diagnostics_size
    ;

transaction_access_mode =
  | 'READ' 'ONLY'
  | 'READ' 'WRITE'
    ;

isolation_level =
    'ISOLATION' 'LEVEL' level_of_isolation
    ;

level_of_isolation =
  | 'READ' 'UNCOMMITTED'
  | 'READ' 'COMMITTED'
  | 'REPEATABLE' 'READ'
  | 'SERIALIZABLE'
    ;

diagnostics_size =
    'DIAGNOSTICS' 'SIZE' number_of_conditions
    ;

number_of_conditions =
    simple_value_specification
    ;

set_constraints_mode_statement =
    'SET' 'CONSTRAINTS' constraint_name_list ('DEFERRED' | 'IMMEDIATE')
    ;

constraint_name_list =
  | 'ALL'
  | constraint_name [{comma constraint_name}+]
    ;

commit_statement =
    'COMMIT' ['WORK']
    ;

rollback_statement =
    'ROLLBACK' ['WORK']
    ;

connect_statement =
    'CONNECT' 'TO' connection_target
    ;

connection_target =
  | sql_server_name ['AS' connection_name] ['USER' user_name]
  | 'DEFAULT'
    ;

set_connection_statement =
    'SET' 'CONNECTION' connection_object
    ;

connection_object =
  | 'DEFAULT'
  | connection_name
    ;

disconnect_statement =
    'DISCONNECT' disconnect_object
    ;

disconnect_object =
  | connection_object
  | 'ALL'
  | 'CURRENT'
    ;

set_catalog_statement =
    'SET' 'CATALOG' value_specification
    ;

set_schema_statement =
    'SET' 'SCHEMA' value_specification
    ;

set_names_statement =
    'SET' 'NAMES' value_specification
    ;

set_session_authorization_identifier_statement =
    'SET' 'SESSION' 'AUTHORIZATION' value_specification
    ;

set_local_time_zone_statement =
    'SET' 'TIME' 'ZONE' set_time_zone_value
    ;

set_time_zone_value =
  | interval_value_expression
  | 'LOCAL'
    ;

embedded_variable_name =
    colon host_identifier
    ;

host_identifier =
  | ada_host_identifier
  | c_host_identifier
  | cobol_host_identifier
  | fortran_host_identifier
  | mumps_host_identifier
  | pascal_host_identifier
  | pl_i_host_identifier
    ;

ada_host_identifier =
    '#SEE_THE_SYNTAX_RULES'
    ;

c_host_identifier =
    '#SEE_THE_SYNTAX_RULES'
    ;

cobol_host_identifier =
    '#SEE_THE_SYNTAX_RULES'
    ;

fortran_host_identifier =
    '#SEE_THE_SYNTAX_RULES'
    ;

mumps_host_identifier =
    '#SEE_THE_SYNTAX_RULES'
    ;

pascal_host_identifier =
    '#SEE_THE_SYNTAX_RULES'
    ;

pl_i_host_identifier =
    '#SEE_THE_SYNTAX_RULES'
    ;

direct_sql_statement =
    directly_executable_statement semicolon
    ;

directly_executable_statement =
  | direct_sql_data_statement
  | sql_schema_statement
  | sql_transaction_statement
  | sql_connection_statement
  | sql_session_statement
  | direct_implementation_defined_statement
    ;

direct_sql_data_statement =
  | delete_statement_searched
  | direct_select_statement_multiple_rows
  | insert_statement
  | update_statement_searched
  | temporary_table_declaration
    ;

direct_implementation_defined_statement =
    '#SEE_THE_SYNTAX_RULES'
    ;

direct_select_statement_multiple_rows =
    query_expression [order_by_clause]
    ;

start =
    direct_sql_statement $
    ;
